{"version":3,"sources":["../src/model/url.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG","file":"url.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * These are a set of entirely-compile time types, used to help us manage the\n * lifecycle of a URL in the system, to ensure that we primarily deal with\n * canonical urls internally in the project.\n *\n * These types should be project-level concerns and should not impact users.\n */\n\n/**\n * A URL that must be resolved relative to a specific base url.\n *\n * Note that it might still be an absolute URL, or even a url with a full\n * protocol and host.\n *\n * This is mostly used to type urls extracted from import statements taken\n * directly out of documents. For example, in `import * as foo from \"./foo.js\"`\n * `./foo.js` is relative to the containing document.\n *\n * Use UrlResolver#resolve to transform it to a ResolvedUrl.\n * Use UrlResolver#relative to transform ResolvedUrls to FileRelativeUrls.\n */\nexport type FileRelativeUrl = string&FileRelativeUrlBrand;\n\n/**\n * A URL that must be resolved relative to the package itself.\n *\n * Note it might still be an absolute URL, or even a url with a full protocol\n * and host.\n *\n * This is the assumed format of user input to Analyzer methods.\n *\n * Use UrlResolver#resolve to transform it to a ResolvedUrl.\n */\nexport type PackageRelativeUrl = string&PackageRelativeUrlBrand;\n\n/**\n * A URL that has been resolved to its canonical and loadable form, by passing\n * through the project's URL Resolver.\n *\n * Use AnalysisContext#resolve to get a ResolvedUrl.\n */\nexport type ResolvedUrl = string&ResolvedUrlBrand;\n\n\n// Declare these as classes rather than interfaces so that the properties\n// can be private.\nexport declare class ResolvedUrlBrand { private ResolvedUrlBrand: never; }\n\nexport declare class PackageRelativeUrlBrand {\n  private PackageRelativeUrlBrand: never;\n}\n\nexport declare class FileRelativeUrlBrand {\n  private FileRelativeUrlBrand: never;\n}\n"]}