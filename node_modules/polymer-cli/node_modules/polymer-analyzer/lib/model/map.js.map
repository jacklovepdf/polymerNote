{"version":3,"sources":["../src/model/map.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH;;;GAGG;AACH,oBAAkC,SAAQ,GAAS;IACjD,YAA6B,WAA0B;QACrD,KAAK,EAAE,CAAC;QADmB,gBAAW,GAAX,WAAW,CAAe;IAEvD,CAAC;IAED,GAAG,CAAC,GAAM;QACR,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAClB,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;SACvC;QACD,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC;IACzB,CAAC;CACF;AAXD,wCAWC","file":"map.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * This is a special map which automatically creates\n * a default value if the key is not found.\n */\nexport class MapWithDefault<K, V> extends Map<K, V> {\n  constructor(private readonly makeDefault: (key: K) => V) {\n    super();\n  }\n\n  get(key: K): V {\n    if (!this.has(key)) {\n      super.set(key, this.makeDefault(key));\n    }\n    return super.get(key)!;\n  }\n}\n"]}