{"version":3,"sources":["../src/test/core/async-work-cache_test.ts"],"names":[],"mappings":"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","file":"async-work-cache_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {CancelToken} from 'cancel-token';\nimport {assert} from 'chai';\n\nimport {AsyncWorkCache} from '../../core/async-work-cache';\nimport {assertIsCancelled, invertPromise} from '../test-utils';\n\nsuite('AsyncWorkCache', () => {\n  let cache: AsyncWorkCache<string, string>;\n  setup(() => {\n    cache = new AsyncWorkCache<string, string>();\n  });\n\n  test('it works for the simple happy case', async () => {\n    assert.equal(await cache.getOrCompute('key', async () => 'cool'), 'cool');\n    // 'cool' was already cached.\n    assert.equal(await cache.getOrCompute('key', async () => 'neat'), 'cool');\n  });\n\n  test('it handles parallel calls', async () => {\n    // Only the first one actually runs\n    const promises = [\n      cache.getOrCompute('key', async () => 'good'),\n      cache.getOrCompute(\n          'key',\n          async () => {\n            throw new Error('Should not be called');\n          }),\n      cache.getOrCompute(\n          'key',\n          async () => {\n            throw new Error('Should not be called');\n          }),\n    ];\n    assert.deepEqual(await Promise.all(promises), ['good', 'good', 'good']);\n\n    // Errors are cached too\n    const failurePromises = [\n      cache.getOrCompute(\n          'badkey',\n          async () => {\n            throw new Error('failed');\n          }),\n      cache.getOrCompute('badkey', async () => 'good'),\n      cache.getOrCompute('badkey', async () => 'good'),\n    ].map(invertPromise);\n    assert.deepEqual(\n        (await Promise.all(failurePromises)).map((e) => e!.message!),\n        ['failed', 'failed', 'failed']);\n  });\n\n  test('it handles a cancellation followed by a new request', async () => {\n    const source = CancelToken.source();\n    const promise1 = cache.getOrCompute('key', async () => {\n      while (true) {\n        await Promise.resolve();\n        source.token.throwIfRequested();\n      }\n    }, source.token);\n    source.cancel();\n    await assertIsCancelled(promise1);\n\n    const source2 = CancelToken.source();\n    const promise2 = cache.getOrCompute('key', async () => {\n      await Promise.resolve();\n      return 'finished!';\n    }, source2.token);\n    assert.equal(await promise2, 'finished!');\n  });\n\n  const testName = `many parallel calls to getOrCompute, some that cancel,` +\n      ` some that don't`;\n  test(testName, async () => {\n    const cancelledPromises: Promise<string>[] = [];\n    for (let i = 0; i < 10; i++) {\n      const source = CancelToken.source();\n      cancelledPromises.push(cache.getOrCompute('key', async () => {\n        while (true) {\n          await Promise.resolve();\n          source.token.throwIfRequested();\n        }\n      }, source.token));\n      source.cancel();\n    }\n    assert.equal(await cache.getOrCompute('key', async () => {\n      return 'cool';\n    }), 'cool');\n    for (const cancelled of cancelledPromises) {\n      await assertIsCancelled(cancelled);\n    }\n  });\n});\n"]}