{"version":3,"sources":["../src/test/html/html-parser_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,+BAA4B;AAC5B,yBAAyB;AACzB,6BAA6B;AAE7B,wDAAkD;AAClD,gFAAyE;AACzE,8CAA0E;AAE1E,KAAK,CAAC,YAAY,EAAE,GAAG,EAAE;IACvB,KAAK,CAAC,SAAS,EAAE,GAAG,EAAE;QACpB,IAAI,MAAkB,CAAC;QAEvB,KAAK,CAAC,GAAG,EAAE;YACT,MAAM,GAAG,IAAI,wBAAU,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACtC,MAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CACxB,IAAI,CAAC,OAAO,CAAC,uBAAU,EAAE,wBAAwB,CAAC,EAAE,MAAM,CAAC,CAAC;YAEhE,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;gBACzC,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CACzB,IAAI,EACJ,wBAAW,CAAA,gCAAgC,EAC3C,IAAI,yCAAkB,EAAE,CAAC,CAAC;gBAC9B,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,gCAAgC,CAAC,CAAC;YAC/D,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,2CAA2C,EAAE,GAAG,EAAE;gBACrD,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CACzB,IAAI,EACJ,wBAAW,CAAA,gCAAgC,EAC3C,IAAI,yCAAkB,EAAE,CAAC,CAAC;gBAC9B,aAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mDAAmD,EAAE,GAAS,EAAE;YACnE,MAAM,EAAC,QAAQ,EAAC,GACZ,MAAM,+BAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,uBAAU,EAAE,KAAK,CAAC,CAAC,CAAC;YAC9D,MAAM,YAAY,GACd,QAAQ,CAAC,UAAU,CAAC,qCAAqC,CAAE,CAAC;YAChE,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC/C,MAAM,QAAQ,GACV,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,YAAY,EAAE,IAAI,yCAAkB,EAAE,CAAC,CAAC;YAC/D,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;YACzC,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;QACjE,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"html-parser_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport {HtmlParser} from '../../html/html-parser';\nimport {PackageUrlResolver} from '../../url-loader/package-url-resolver';\nimport {createForDirectory, fixtureDir, resolvedUrl} from '../test-utils';\n\nsuite('HtmlParser', () => {\n  suite('parse()', () => {\n    let parser: HtmlParser;\n\n    setup(() => {\n      parser = new HtmlParser();\n    });\n\n    suite('on a well-formed document', () => {\n      const file = fs.readFileSync(\n          path.resolve(fixtureDir, 'html-parse-target.html'), 'utf8');\n\n      test('parses a well-formed document', () => {\n        const document = parser.parse(\n            file,\n            resolvedUrl`/static/html-parse-target.html`,\n            new PackageUrlResolver());\n        assert.equal(document.url, '/static/html-parse-target.html');\n      });\n\n      test('can stringify back a well-formed document', () => {\n        const document = parser.parse(\n            file,\n            resolvedUrl`/static/html-parse-target.html`,\n            new PackageUrlResolver());\n        assert.deepEqual(document.stringify(), file);\n      });\n    });\n\n    test('can properly determine the base url of a document', async () => {\n      const {analyzer} =\n          await createForDirectory(path.resolve(fixtureDir, '../'));\n      const resolvedPath =\n          analyzer.resolveUrl(`static/base-href/doc-with-base.html`)!;\n      const file = await analyzer.load(resolvedPath);\n      const document =\n          parser.parse(file, resolvedPath, new PackageUrlResolver());\n      assert.equal(document.url, resolvedPath);\n      assert.equal(document.baseUrl, analyzer.resolveUrl('static/'));\n    });\n  });\n});\n"]}