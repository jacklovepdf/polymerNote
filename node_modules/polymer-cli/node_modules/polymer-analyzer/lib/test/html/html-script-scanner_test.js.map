{"version":3,"sources":["../src/test/html/html-script-scanner_test.ts"],"names":[],"mappings":"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","file":"html-script-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {Analyzer} from '../../core/analyzer';\nimport {HtmlScriptScanner} from '../../html/html-script-scanner';\nimport {JavaScriptDocument} from '../../javascript/javascript-document';\nimport {Analysis} from '../../model/analysis';\nimport {FileRelativeUrl, ResolvedUrl, ScannedImport, ScannedInlineDocument} from '../../model/model';\nimport {InMemoryOverlayUrlLoader} from '../../url-loader/overlay-loader';\nimport {createForDirectory, fixtureDir, runScannerOnContents} from '../test-utils';\n\nsuite('HtmlScriptScanner', () => {\n  test('finds external and inline scripts', async () => {\n    const contents = `<html><head>\n          <script src=\"foo.js\"></script>\n          <script>console.log('hi')</script>\n        </head></html>`;\n    const {features} = await runScannerOnContents(\n        new HtmlScriptScanner(), 'test-document.html', contents);\n\n    assert.equal(features.length, 2);\n    assert.instanceOf(features[0], ScannedImport);\n    const feature0 = features[0] as ScannedImport;\n    assert.equal(feature0.type, 'html-script');\n    assert.equal(feature0.url, 'foo.js' as FileRelativeUrl);\n    assert.instanceOf(features[1], ScannedInlineDocument);\n    const feature1 = features[1] as ScannedInlineDocument;\n    assert.equal(feature1.type, 'js');\n    assert.equal(feature1.contents, `console.log('hi')`);\n    assert.deepEqual(feature1.locationOffset, {line: 2, col: 18});\n  });\n\n  test('finds external scripts relative to baseUrl', async () => {\n    const contents = `<html><head><base href=\"/aybabtu/\">\n          <script src=\"foo.js\"></script>\n        </head></html>`;\n    const {features} = await runScannerOnContents(\n        new HtmlScriptScanner(), 'test-document.html', contents);\n\n    assert.deepEqual(\n        features.map((f: ScannedImport) => [f.type, f.url]),\n        [['html-script', 'foo.js']]);\n  });\n\n  test('could-not-load vs not-loadable warnings', async () => {\n    const contents = `\n      <script src=\"does-not-exist-but-should.js\"></script>\n      <script src=\"https://else.where/does-not-exist-lol-dont-care.js\"></script>\n    `;\n    const urlLoader = new InMemoryOverlayUrlLoader();\n    const analyzer = new Analyzer({urlLoader});\n    const testDocUrl = analyzer.resolveUrl('test-document.html')!;\n    urlLoader.urlContentsMap.set(testDocUrl, contents);\n    urlLoader.canLoad = (url: ResolvedUrl) => url.startsWith('file://');\n    const testDoc =\n        (await analyzer.analyze([testDocUrl])).getDocument(testDocUrl);\n    if (!testDoc.successful) {\n      throw testDoc.error;\n    }\n    const warnings = testDoc.value.warnings;\n    assert.deepEqual(\n        warnings.map((w) => w.code).sort(), ['could-not-load', 'not-loadable']);\n    const couldNotLoadWarning =\n        warnings.find((w) => w.code === 'could-not-load')!;\n    assert.match(couldNotLoadWarning.message, /does-not-exist-but-should\\.js/);\n    const notLoadableWarning = warnings.find((w) => w.code === 'not-loadable')!;\n    assert.match(\n        notLoadableWarning.message, /does-not-exist-lol-dont-care\\.js/);\n  });\n\n  suite('modules', () => {\n    let analyzer: Analyzer;\n    let analysis: Analysis;\n\n    suiteSetup(async () => {\n      ({analyzer} = await createForDirectory(fixtureDir));\n      analysis = await analyzer.analyze(\n          ['js-modules.html', 'base-href/imports-js-module-with-base.html']);\n    });\n\n    test('finds external module scripts', () => {\n      const result = analysis.getDocument('js-modules.html');\n      if (!result.successful) {\n        throw new Error(`could not get document js-modules.html`);\n      }\n      const htmlScripts = [...result.value.getFeatures({kind: 'html-script'})];\n      assert.equal(htmlScripts.length, 1);\n      const js = htmlScripts[0].document!.parsedDocument as JavaScriptDocument;\n      assert.equal(js.url, analyzer.resolveUrl('javascript/module.js')!);\n      assert.equal(js.parsedAsSourceType, 'module');\n    });\n\n    test('finds inline module scripts', () => {\n      const result = analysis.getDocument('js-modules.html');\n      if (!result.successful) {\n        throw new Error(`could not get document js-modules.html`);\n      }\n      const inlineDocuments =\n          [...result.value.getFeatures({kind: 'inline-document'})];\n      assert.equal(inlineDocuments.length, 2);\n      const js1 = inlineDocuments[0].parsedDocument as JavaScriptDocument;\n      assert.equal(js1.url, analyzer.resolveUrl('js-modules.html'));\n      assert.equal(js1.parsedAsSourceType, 'module');\n      assert.equal(\n          js1.contents.trim(),\n          `import * as something from './javascript/module-with-export.js';`);\n      const js2 = inlineDocuments[1].parsedDocument as JavaScriptDocument;\n      assert.equal(js2.url, analyzer.resolveUrl('js-modules.html'));\n      assert.equal(js2.parsedAsSourceType, 'module');\n      assert.equal(\n          js2.contents.trim(),\n          `import * as somethingElse from './javascript/other-module-with-export.js';`);\n    });\n\n    test('follows import statements in modules', async () => {\n      const result = analysis.getDocument('js-modules.html');\n      if (!result.successful) {\n        throw new Error(`could not get document js-modules.html`);\n      }\n      const jsImports = [...result.value.getFeatures(\n          {kind: 'js-import', imported: true, excludeBackreferences: true})];\n      assert.deepEqual(jsImports.map((imp) => imp.originalUrl), [\n        './javascript/module-with-export.js',\n        './javascript/other-module-with-export.js',\n        './submodule.js',\n        './submodule.js',\n        './does-not-exist.js',\n      ]);\n\n      // import statement in 1st inline module script in 'js-modules.html'\n      const js0 = jsImports[0].document!.parsedDocument as JavaScriptDocument;\n      assert.equal(\n          js0.url, analyzer.resolveUrl('javascript/module-with-export.js'));\n      assert.equal(js0.parsedAsSourceType, 'module');\n      assert.equal(\n          js0.contents.trim(), `export const someValue = 'value goes here';`);\n\n      // import statement in 2nd inline module script in 'js-modules.html'\n      const js1 = jsImports[1].document!.parsedDocument as JavaScriptDocument;\n      assert.equal(\n          js1.url,\n          analyzer.resolveUrl('javascript/other-module-with-export.js'));\n      assert.equal(js1.parsedAsSourceType, 'module');\n      assert.equal(\n          js1.contents.trim(),\n          `import { subThing } from './submodule.js';\\n` +\n              `export const otherValue = subThing;`);\n\n      // import statement in imported 'javascript/other-module-with-export.js'\n      const js2 = jsImports[2].document!.parsedDocument as JavaScriptDocument;\n      assert.equal(js2.url, analyzer.resolveUrl('javascript/submodule.js'));\n      assert.equal(js2.parsedAsSourceType, 'module');\n      assert.equal(js2.contents.trim(), `export const subThing = 'sub-thing';`);\n\n      // import statement in external module script 'javascript/module.js'\n      const js3 = jsImports[3].document!.parsedDocument as JavaScriptDocument;\n      assert.equal(js3.url, analyzer.resolveUrl('javascript/submodule.js'));\n      assert.equal(js3.parsedAsSourceType, 'module');\n      assert.equal(js3.contents.trim(), `export const subThing = 'sub-thing';`);\n    });\n\n    test('query for modules imported in specific inline scripts', async () => {\n      const result = analysis.getDocument('js-modules.html');\n      if (!result.successful) {\n        throw new Error(`could not get document js-modules.html`);\n      }\n      const [jsDoc0, jsDoc1] = [...result.value.getFeatures(\n          {kind: 'js-document', imported: false, excludeBackreferences: true})];\n\n      assert.equal(\n          jsDoc0.parsedDocument.contents.trim(),\n          `import * as something from './javascript/module-with-export.js';`);\n      assert.equal(\n          jsDoc1.parsedDocument.contents.trim(),\n          `import * as somethingElse from './javascript/other-module-with-export.js';`);\n\n      const jsDoc0imports = jsDoc0.getFeatures(\n          {kind: 'js-import', imported: false, excludeBackreferences: true});\n      assert.equal(jsDoc0imports.size, 1);\n\n      // Demonstrate that without `excludeBackreferences: true`, the number of\n      // imports returned would be 2, because we'll be getting the js-import\n      // from the other inline JavaScript document's import statement.\n      assert.equal(\n          jsDoc0.getFeatures({kind: 'js-import', imported: false}).size, 2);\n\n      const jsDoc1imports = jsDoc1.getFeatures(\n          {kind: 'js-import', imported: false, excludeBackreferences: true});\n      assert.equal(jsDoc1imports.size, 1);\n    });\n\n    test('finds imports, honoring base href', async () => {\n      const result =\n          analysis.getDocument('base-href/imports-js-module-with-base.html');\n      if (!result.successful) {\n        throw new Error(\n            `could not get document` +\n            ` base-href/imports-js-module-with-base.html`);\n      }\n      const jsImports = [...result.value.getFeatures({kind: 'js-import'})];\n      assert.equal(jsImports.length, 1);\n\n      // import statement in inline module script in\n      // 'imports-js-module-with-base.html'\n      const js0 = jsImports[0].document!.parsedDocument as JavaScriptDocument;\n      assert.equal(\n          js0.url, analyzer.resolveUrl('javascript/module-with-export.js'));\n      assert.equal(js0.parsedAsSourceType, 'module');\n      assert.equal(\n          js0.contents.trim(), `export const someValue = 'value goes here';`);\n    });\n  });\n});\n"]}