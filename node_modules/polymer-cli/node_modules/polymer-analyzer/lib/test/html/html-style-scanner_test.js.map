{"version":3,"sources":["../src/test/html/html-style-scanner_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,+BAA4B;AAE5B,sEAA+D;AAC/D,6CAAwF;AACxF,8CAAmD;AAEnD,KAAK,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAC7B,IAAI,CAAC,kCAAkC,EAAE,GAAS,EAAE;QAClD,MAAM,QAAQ,GAAG;;;uBAGE,CAAC;QAEpB,MAAM,EAAC,QAAQ,EAAC,GAAG,MAAM,iCAAoB,CACzC,IAAI,qCAAgB,EAAE,EAAE,oBAAoB,EAAE,QAAQ,CAAC,CAAC;QAC5D,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACjC,aAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,qBAAa,CAAC,CAAC;QAC9C,MAAM,QAAQ,GAAkB,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC5C,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QAC1C,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,SAA4B,CAAC,CAAC;QACzD,aAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,6BAAqB,CAAC,CAAC;QACtD,MAAM,QAAQ,GAA0B,QAAQ,CAAC,CAAC,CAAC,CAAC;QACpD,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACnC,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAAC;QACxD,aAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,cAAc,EAAE,EAAC,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAC,CAAC,CAAC;IAChE,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,CAAC,2CAA2C,EAAE,GAAS,EAAE;QAC3D,MAAM,QAAQ,GAAG;;uBAEE,CAAC;QAEpB,MAAM,EAAC,QAAQ,EAAC,GAAG,MAAM,iCAAoB,CACzC,IAAI,qCAAgB,EAAE,EAAE,oBAAoB,EAAE,QAAQ,CAAC,CAAC;QAC5D,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAgB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EACnD,CAAC,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"html-style-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {HtmlStyleScanner} from '../../html/html-style-scanner';\nimport {FileRelativeUrl, ScannedImport, ScannedInlineDocument} from '../../model/model';\nimport {runScannerOnContents} from '../test-utils';\n\nsuite('HtmlStyleScanner', () => {\n  test('finds external and inline styles', async () => {\n    const contents = `<html><head>\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"foo.css\">\n          <style>h1 { color: green; }</style>\n        </head></html>`;\n\n    const {features} = await runScannerOnContents(\n        new HtmlStyleScanner(), 'test-document.html', contents);\n    assert.equal(features.length, 2);\n    assert.instanceOf(features[0], ScannedImport);\n    const feature0 = <ScannedImport>features[0];\n    assert.equal(feature0.type, 'html-style');\n    assert.equal(feature0.url, 'foo.css' as FileRelativeUrl);\n    assert.instanceOf(features[1], ScannedInlineDocument);\n    const feature1 = <ScannedInlineDocument>features[1];\n    assert.equal(feature1.type, 'css');\n    assert.equal(feature1.contents, `h1 { color: green; }`);\n    assert.deepEqual(feature1.locationOffset, {line: 2, col: 17});\n  });\n\n  test('finds external styles relative to baseUrl', async () => {\n    const contents = `<html><head><base href=\"/aybabtu/\">\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"foo.css\">\n        </head></html>`;\n\n    const {features} = await runScannerOnContents(\n        new HtmlStyleScanner(), 'test-document.html', contents);\n    assert.deepEqual(\n        features.map((f: ScannedImport) => [f.type, f.url]),\n        [['html-style', 'foo.css']]);\n  });\n});\n"]}