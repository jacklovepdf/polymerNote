{"version":3,"sources":["../src/test/html/html-element-reference-scanner_test.ts"],"names":[],"mappings":"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","file":"html-element-reference-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {HtmlCustomElementReferenceScanner, HtmlElementReferenceScanner} from '../../html/html-element-reference-scanner';\nimport {ScannedElementReference} from '../../model/element-reference';\nimport {CodeUnderliner, runScannerOnContents} from '../test-utils';\n\nsuite('HtmlElementReferenceScanner', () => {\n  test('finds element references', async () => {\n    const contents = `<html><head></head>\n      <body>\n        <div>Foo</div>\n        <x-foo></x-foo>\n        <div>\n          <x-bar></x-bar>\n        </div>\n      </body></html>`;\n\n    const {features} = await runScannerOnContents(\n        new HtmlElementReferenceScanner(), 'test-document.html', contents);\n\n    assert.deepEqual(\n        features.map((f: ScannedElementReference) => f.tagName),\n        ['html', 'head', 'body', 'div', 'x-foo', 'div', 'x-bar']);\n  });\n});\n\nsuite('HtmlCustomElementReferenceScanner', () => {\n  test('finds custom element references', async () => {\n    const contents = `<html><body>\n          <div>Foo</div>\n          <x-foo a=5 b=\"test\" c></x-foo>\n          <div>\n            <x-bar></x-bar>\n          </div>\n          <h1>Bar</h1>\n          <template>\n            <x-baz></x-baz>\n          </template>\n        </body></html>`;\n\n    const {features: untypedFeatures, analyzer} = await runScannerOnContents(\n        new HtmlCustomElementReferenceScanner(),\n        'test-document.html',\n        contents);\n    const features = untypedFeatures as ScannedElementReference[];\n    const underliner = new CodeUnderliner(analyzer);\n\n    assert.deepEqual(\n        features.map((f) => f.tagName), ['x-foo', 'x-bar', 'x-baz']);\n\n    assert.deepEqual(\n        Array.from(features[0].attributes.values())\n            .map((a) => [a.name, a.value]),\n        [['a', '5'], ['b', 'test'], ['c', '']]);\n\n    const sourceRanges = await Promise.all(\n        features.map(async (f) => await underliner.underline(f.sourceRange)));\n\n    assert.deepEqual(sourceRanges, [\n      `\n          <x-foo a=5 b=\"test\" c></x-foo>\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`,\n      `\n            <x-bar></x-bar>\n            ~~~~~~~~~~~~~~~`,\n      `\n            <x-baz></x-baz>\n            ~~~~~~~~~~~~~~~`\n    ]);\n\n    const attrRanges = await Promise.all(features.map(\n        async (f) => await Promise.all(\n            Array.from(f.attributes.values())\n                .map(async (a) => await underliner.underline(a.sourceRange)))));\n\n    assert.deepEqual(attrRanges, [\n      [\n        `\n          <x-foo a=5 b=\"test\" c></x-foo>\n                 ~~~`,\n        `\n          <x-foo a=5 b=\"test\" c></x-foo>\n                     ~~~~~~~~`,\n        `\n          <x-foo a=5 b=\"test\" c></x-foo>\n                              ~`\n      ],\n      [],\n      []\n    ]);\n\n    const attrNameRanges = await Promise.all(features.map(\n        async (f) => await underliner.underline(\n            Array.from(f.attributes.values()).map((a) => a.nameSourceRange))));\n\n    assert.deepEqual(attrNameRanges, [\n      [\n        `\n          <x-foo a=5 b=\"test\" c></x-foo>\n                 ~`,\n        `\n          <x-foo a=5 b=\"test\" c></x-foo>\n                     ~`,\n        `\n          <x-foo a=5 b=\"test\" c></x-foo>\n                              ~`\n      ],\n      [],\n      []\n    ]);\n\n    const attrValueRanges = await Promise.all(features.map(\n        async (f) =>\n            await Promise.all(Array.from(f.attributes.values())\n                                  .map(\n                                      async (a) => await underliner.underline(\n                                          a.valueSourceRange)))));\n\n    assert.deepEqual(attrValueRanges, [\n      [\n        `\n          <x-foo a=5 b=\"test\" c></x-foo>\n                   ~`,\n        `\n          <x-foo a=5 b=\"test\" c></x-foo>\n                       ~~~~~~`,\n        `No source range given.`\n      ],\n      [],\n      []\n    ]);\n  });\n});\n"]}