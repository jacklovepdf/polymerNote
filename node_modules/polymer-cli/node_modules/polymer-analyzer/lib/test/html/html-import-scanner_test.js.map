{"version":3,"sources":["../src/test/html/html-import-scanner_test.ts"],"names":[],"mappings":"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","file":"html-import-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {HtmlImportScanner} from '../../html/html-import-scanner';\nimport {Analyzer, FileRelativeUrl, InMemoryOverlayUrlLoader, ScannedImport} from '../../index';\nimport {PackageRelativeUrl, ResolvedUrl} from '../../model/url';\nimport {runScanner, runScannerOnContents} from '../test-utils';\n\nsuite('HtmlImportScanner', () => {\n  test('finds HTML Imports', async () => {\n    const contents = `<html><head>\n          <link rel=\"import\" href=\"polymer.html\">\n          <link rel=\"import\" type=\"css\" href=\"polymer.css\">\n          <script src=\"foo.js\"></script>\n          <link rel=\"stylesheet\" href=\"foo.css\"></link>\n        </head></html>`;\n    const {features} = await runScannerOnContents(\n        new HtmlImportScanner(), 'test.html', contents);\n    const importFeatures = features as ScannedImport[];\n    assert.deepEqual(\n        importFeatures.map((imp) => [imp.type, imp.url]),\n        [['html-import', 'polymer.html']]);\n  });\n\n  test('resolves HTML Import URLs relative to baseUrl', async () => {\n    const contents = `<html><head><base href=\"/aybabtu/\">\n          <link rel=\"import\" href=\"polymer.html\">\n          <link rel=\"import\" type=\"css\" href=\"polymer.css\">\n          <script src=\"foo.js\"></script>\n          <link rel=\"stylesheet\" href=\"foo.css\"></link>\n        </head></html>`;\n    const {features, analyzer, urlLoader} = await runScannerOnContents(\n        new HtmlImportScanner(), 'test.html', contents);\n    const importFeatures = features as ScannedImport[];\n    assert.deepEqual(\n        importFeatures.map((imp) => [imp.type, imp.url]),\n        [['html-import', 'polymer.html']]);\n\n    urlLoader.urlContentsMap.set(\n        analyzer.resolveUrl('aybabtu/polymer.html')!, '');\n    const [import_] = (await analyzer.analyze(['test.html'])).getFeatures({\n      kind: 'html-import'\n    });\n    assert.equal(import_.originalUrl, 'polymer.html');\n    assert.equal(import_.url, analyzer.resolveUrl('aybabtu/polymer.html'));\n  });\n\n  test('finds lazy HTML Imports', async () => {\n    const contents = `<html><head>\n          <link rel=\"import\" href=\"polymer.html\">\n          <dom-module>\n          <link rel=\"lazy-import\"  href=\"lazy-polymer.html\">\n          </dom-module>\n          <link rel=\"stylesheet\" href=\"foo.css\"></link>\n        </head></html>`;\n    const {features} = await runScannerOnContents(\n        new HtmlImportScanner(), 'test.html', contents);\n    const importFeatures = features as ScannedImport[];\n    assert.deepEqual(\n        importFeatures.map((imp) => [imp.type, imp.url, imp.lazy]), [\n          ['html-import', 'polymer.html', false],\n          ['html-import', 'lazy-polymer.html', true]\n        ]);\n  });\n\n  suite('scan() with lazy import map', () => {\n    test('injects synthetic lazy html imports', async () => {\n      const contents = `<html><head>\n            <link rel=\"import\" href=\"polymer.html\">\n            <link rel=\"import\" type=\"css\" href=\"polymer.css\">\n            <script src=\"foo.js\"></script>\n            <link rel=\"stylesheet\" href=\"foo.css\"></link>\n          </head></html>`;\n      const overlayLoader = new InMemoryOverlayUrlLoader();\n      const analyzer = new Analyzer({urlLoader: overlayLoader});\n      overlayLoader.urlContentsMap.set(\n          analyzer.resolveUrl('test.html')!, contents);\n      const lazyEdges = new Map<ResolvedUrl, PackageRelativeUrl[]>([[\n        analyzer.resolveUrl('test.html')!,\n        ['lazy1.html', 'lazy2.html', 'lazy3.html'] as PackageRelativeUrl[]\n      ]]);\n      const {features} = await runScanner(\n          analyzer, new HtmlImportScanner(lazyEdges), 'test.html');\n      const importFeatures = features as ScannedImport[];\n      assert.deepEqual(\n          importFeatures.map((f) => f.type),\n          ['html-import', 'html-import', 'html-import', 'html-import']);\n      assert.deepEqual(\n          importFeatures.map((i) => i.lazy), [false, true, true, true]);\n      assert.deepEqual(\n          importFeatures.map((f) => f.url),\n          ['polymer.html', 'lazy1.html', 'lazy2.html', 'lazy3.html'] as\n              FileRelativeUrl[]);\n    });\n  });\n});\n"]}