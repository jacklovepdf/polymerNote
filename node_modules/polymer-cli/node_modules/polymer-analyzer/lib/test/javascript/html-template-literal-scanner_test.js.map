{"version":3,"sources":["../src/test/javascript/html-template-literal-scanner_test.ts"],"names":[],"mappings":"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","file":"html-template-literal-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport * as dom5 from 'dom5/lib/index-next';\nimport {Analyzer} from '../../core/analyzer';\nimport {PackageRelativeUrl} from '../../index';\nimport {InMemoryOverlayUrlLoader} from '../../url-loader/overlay-loader';\nimport {PackageUrlResolver} from '../../url-loader/package-url-resolver';\nimport {CodeUnderliner} from '../test-utils';\n\nsuite('HtmlTemplateLiteralScanner', () => {\n  async function analyzeContents(fileName: string, contents: string) {\n    const urlResolver = new PackageUrlResolver();\n    const urlLoader = new InMemoryOverlayUrlLoader();\n    const url = urlResolver.resolve(fileName as PackageRelativeUrl)!;\n    urlLoader.urlContentsMap.set(url, contents);\n    const analyzer = new Analyzer({urlResolver, urlLoader});\n    const analysis = await analyzer.analyze([url]);\n    const result = analysis.getDocument(url);\n    if (!result.successful) {\n      throw new Error(`Tried to get document for url but failed: ${url}`);\n    }\n    const underliner = new CodeUnderliner(analyzer);\n    return {document: result.value, url, underliner};\n  }\n\n  test('works in a super simple case', async () => {\n    const {document, url} = await analyzeContents('index.js', `\n      html\\`<div>Hello world</div>\\`\n    `);\n    const documents = document.getFeatures({kind: 'document'});\n    assert.deepEqual(\n        [...documents].map((d) => [d.url, d.type, d.isInline]),\n        [[url, 'js', false], [url, 'html', true]]);\n    const [htmlDocument] = document.getFeatures({kind: 'html-document'});\n    assert.deepEqual(\n        htmlDocument.parsedDocument.contents, `<div>Hello world</div>`);\n  });\n\n  test('can get source ranges for tags in the inline document', async () => {\n    const {document, underliner} = await analyzeContents('index.js', `\n      html\\`<div>Hello world</div>\n        \\${expression()}\n        <div>Another tag</div>\n      \\`;\n    `);\n    const [htmlDocument] = document.getFeatures({kind: 'html-document'});\n    const elements = [...dom5.queryAll(\n        htmlDocument.parsedDocument.ast, dom5.predicates.hasTagName('div'))];\n\n    const ranges = elements.map(\n        (el) => htmlDocument.parsedDocument.sourceRangeForStartTag(el));\n    assert.deepEqual(await underliner.underline(ranges), [\n      `\n      html\\`<div>Hello world</div>\n           ~~~~~`,\n      `\n        <div>Another tag</div>\n        ~~~~~`\n    ]);\n  });\n\n  let testName = 'can handle nesting of inline documents with html at the root';\n  test(testName, async () => {\n    const {document, underliner, url} = await analyzeContents('index.html', `\n      <script>\n        html\\`<div>Hello world</div>\\`;\n      </script>\n    `);\n    const documents = document.getFeatures({kind: 'document'});\n    assert.deepEqual(\n        [...documents].map((d) => [d.url, d.type, d.isInline]),\n        [[url, 'html', false], [url, 'js', true], [url, 'html', true]]);\n    const [, htmlDocument] = document.getFeatures({kind: 'html-document'});\n    assert.deepEqual(\n        htmlDocument.parsedDocument.contents, `<div>Hello world</div>`);\n    const elements = [...dom5.queryAll(\n        htmlDocument.parsedDocument.ast, dom5.predicates.hasTagName('div'))];\n\n    const ranges = elements.map(\n        (el) => htmlDocument.parsedDocument.sourceRangeForStartTag(el));\n    assert.deepEqual(await underliner.underline(ranges), [\n      `\n        html\\`<div>Hello world</div>\\`;\n             ~~~~~`,\n    ]);\n  });\n\n  testName = 'can handle nesting of inline documents with js at the root';\n  test(testName, async () => {\n    const {document, underliner, url} = await analyzeContents('index.js', `\n\n      html\\`\n        <div>Hello world</div>\n\n        <script>\n          \\${\n            multiLineExpressionToComplicateSourceRanges\n          }\n          html\\\\\\`\n            <style>\n              div {\n                --working: yes;\n              }\n            </style>\n          \\\\\\`\n        </script>\n      \\`;\n    `);\n    const documents = document.getFeatures({kind: 'document'});\n    assert.deepEqual([...documents].map((d) => [d.url, d.type, d.isInline]), [\n      [url, 'js', false],\n      [url, 'html', true],\n      [url, 'js', true],\n      [url, 'html', true],\n      [url, 'css', true]\n    ]);\n\n    const [customPropertyAssignment] =\n        document.getFeatures({kind: 'css-custom-property-assignment'});\n    assert.deepEqual(\n        await underliner.underline(customPropertyAssignment.sourceRange), `\n                --working: yes;\n                ~~~~~~~~~`);\n  });\n\n  // See: https://github.com/Polymer/polymer-analyzer/issues/818\n  testName = 'can handle escape characters properly';\n  test.skip(testName, async () => {\n    const {document, underliner, url} = await analyzeContents('index.js', `\n      html\\`\\\\n\\\\n<div>Hello world</div>\\`;\n    `);\n    const documents = document.getFeatures({kind: 'document'});\n    assert.deepEqual(\n        [...documents].map((d) => [d.url, d.type, d.isInline]),\n        [[url, 'js', false], [url, 'html', true]]);\n    const [htmlDocument] = document.getFeatures({kind: 'html-document'});\n    assert.deepEqual(\n        htmlDocument.parsedDocument.contents, '\\n\\n<div>Hello world</div>');\n    const elements = [...dom5.queryAll(\n        htmlDocument.parsedDocument.ast, dom5.predicates.hasTagName('div'))];\n    const ranges = elements.map(\n        (el) => htmlDocument.parsedDocument.sourceRangeForStartTag(el));\n    assert.deepEqual(await underliner.underline(ranges), [`\n      html\\`\\\\n\\\\n<div>Hello world</div>\\`;\n                ~~~~~`]);\n  });\n});\n"]}