{"version":3,"sources":["../src/test/javascript/esutil_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,sCAAsC;AACtC,mCAAmC;AACnC,qCAA8B;AAC9B,+BAA4B;AAE5B,oDAAqG;AAGrG,KAAK,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAC7B,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACzC,MAAM,IAAI,GAAG,eAAK,CAAC;;;;;;;;;;;;;;UAcb,CAAC,CAAC;QACR,MAAM,MAAM,GAAG,CAAC,GAAG,yBAAgB,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;QACpD,MAAM,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YACP,WAAW,EAAE,EAAE,CAAC,WAAW;YAC3B,IAAI,EAAE,EAAE,CAAC,IAAI;YACb,MAAM,EAAE,EAAE,CAAC,MAAM;YACjB,QAAQ,EAAE,EAAE,CAAC,QAAQ;SACtB,CAAC,CAAC,CAAC;QAEpC,aAAM,CAAC,SAAS,CAAC,YAAY,EAAE;YAC7B;gBACE,WAAW,EAAE,uBAAuB;gBACpC,IAAI,EAAE,uBAAuB;gBAC7B,MAAM,EAAE,EAAE;gBACV,QAAQ,EAAE,EAAE;aACb;YACD;gBACE,WAAW,EAAE,kBAAkB;gBAC/B,IAAI,EAAE,YAAY;gBAClB,MAAM,EAAE,CAAC,EAAC,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAC,CAAC;gBAClD,QAAQ,EAAE,EAAE;aACb;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,KAAK,CAAC,mBAAmB,EAAE;IACzB,IAAI,CAAC,yBAAyB,EAAE;QAC9B,MAAM,iBAAiB,GAAG;;;;;;;;;KASzB,CAAC;QACF,MAAM,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnE,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,SAAS,CAAC,EAAE;YAC3C,MAAM,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;SACrB;QACD,MAAM,IAAI,GAAG,SAAS,CAAC,UAAU,CAAC;QAClC,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE;YACnC,MAAM,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;SACrB;QACD,aAAM,CAAC,SAAS,CACZ,CAAC,GAAG,kCAAyB,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CACpC,CAAC,IAAI,EAAE,EAAE,CAAC,wBAAe,CAAC,IAAI,CAAC,CAAC,EACpC,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"esutil_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as babel from '@babel/types';\nimport * as babylon from 'babylon';\nimport {parse} from 'babylon';\nimport {assert} from 'chai';\n\nimport {getEventComments, getPropertyName, getSimpleObjectProperties} from '../../javascript/esutil';\n\n\nsuite('getEventComments', () => {\n  test('returns events from a comment', () => {\n    const node = parse(`\n        class Foo {\n          /**\n           * This is an event\n           *\n           * @event event-name\n           * @param {Event} event\n           */\n           myMethod() { }\n\n           /**\n            * @event descriptionless-event\n            */\n           anotherMethod() { }\n        }`);\n    const events = [...getEventComments(node).values()];\n    const eventMatches = events.map((ev) => ({\n                                      description: ev.description,\n                                      name: ev.name,\n                                      params: ev.params,\n                                      warnings: ev.warnings\n                                    }));\n\n    assert.deepEqual(eventMatches, [\n      {\n        description: 'descriptionless-event',\n        name: 'descriptionless-event',\n        params: [],\n        warnings: []\n      },\n      {\n        description: 'This is an event',\n        name: 'event-name',\n        params: [{desc: '', name: 'event', type: 'Event'}],\n        warnings: []\n      }\n    ]);\n  });\n});\n\nsuite('objectKeyToString', function() {\n  test('produces expected names', function() {\n    const objectLiteralCode = `\n    ({\n      'foo': 1,\n      bar: 2,\n      [10]: 3,\n      [10 + 20]: 4,\n      ['hi' + ' there']: 5,\n      [identifier]: 6,\n    });\n    `;\n    const statement = babylon.parse(objectLiteralCode).program.body[0];\n    if (!babel.isExpressionStatement(statement)) {\n      throw new Error('');\n    }\n    const expr = statement.expression;\n    if (!babel.isObjectExpression(expr)) {\n      throw new Error('');\n    }\n    assert.deepEqual(\n        [...getSimpleObjectProperties(expr)].map(\n            (prop) => getPropertyName(prop)),\n        ['foo', 'bar', '10', '30', 'hi there', undefined]);\n  });\n});\n"]}