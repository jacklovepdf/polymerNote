{"version":3,"sources":["../src/test/typescript/typescript-analyzer_test.ts"],"names":[],"mappings":"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","file":"typescript-analyzer_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as ts from 'typescript';\n\nimport {AnalysisContext} from '../../core/analysis-context';\nimport {neverCancels} from '../../core/cancel-token';\nimport {PackageRelativeUrl} from '../../index';\nimport {ResolvedUrl} from '../../model/url';\nimport {TypeScriptAnalyzer} from '../../typescript/typescript-analyzer';\nimport {TypeScriptPreparser} from '../../typescript/typescript-preparser';\nimport {InMemoryOverlayUrlLoader} from '../../url-loader/overlay-loader';\nimport {PackageUrlResolver} from '../../url-loader/package-url-resolver';\n\nasync function getTypeScriptAnalyzer(files: Map<PackageRelativeUrl, string>) {\n  const urlLoader = new InMemoryOverlayUrlLoader();\n  const urlResolver = new PackageUrlResolver();\n  for (const [url, contents] of files) {\n    urlLoader.urlContentsMap.set(\n        // tslint:disable-next-line: no-any\n        urlResolver.resolve('' as any, url as any)!,\n        contents);\n  }\n  const analysisContext = new AnalysisContext({\n    parsers: new Map([['ts', new TypeScriptPreparser()]]),\n    urlLoader,\n    urlResolver\n  });\n  // This puts documents into the scanned document cache\n  await Promise.all(Object.keys(files).map(\n      (url) => analysisContext.scan(url as ResolvedUrl, neverCancels)));\n  return new TypeScriptAnalyzer(analysisContext);\n}\n\nsuite('TypeScriptParser', () => {\n  suite('parse()', () => {\n    test('parses classes', async () => {\n      const fileName = 'typescript/test.ts' as PackageRelativeUrl;\n      const typescriptAnalyzer = await getTypeScriptAnalyzer(new Map([[\n        fileName,\n        `\n          class A extends HTMLElement {\n            foo() { return 'bar'; }\n          }`\n      ]]));\n      const program = typescriptAnalyzer.analyze(fileName);\n      const checker = program.getTypeChecker();\n\n      assert.deepEqual(program.getRootFileNames(), [fileName]);\n\n      // Get the HTMLElement type from the DOM module\n      let htmlElement: ts.Type;\n      const domSource = program.getSourceFile('/$lib/DOM.d.ts')!;\n      ts.forEachChild(domSource, (node) => {\n        if (node.kind === ts.SyntaxKind.InterfaceDeclaration) {\n          const innerface = node as ts.InterfaceDeclaration;\n          if (innerface.name.getText() === 'HTMLElement') {\n            htmlElement = checker.getTypeAtLocation(innerface);\n          }\n        }\n      });\n\n      // Get class A and assert that it extends HTMLElement\n      const sourceFile = program.getSourceFile(fileName)!;\n      ts.forEachChild(sourceFile, (node) => {\n        if (node.kind === ts.SyntaxKind.ClassDeclaration) {\n          const class_ = node as ts.ClassDeclaration;\n          if (class_.name && class_.name.getText() === 'A') {\n            const type = checker.getTypeAtLocation(class_) as ts.InterfaceType;\n            const baseTypes = checker.getBaseTypes(type);\n            assert.include(baseTypes, htmlElement);\n            const properties = checker.getPropertiesOfType(type);\n            const ownProperties = properties.filter(\n                (p) => p.getDeclarations()!.some((d) => d.parent === class_));\n            assert.equal(ownProperties.length, 1);\n            assert.equal(ownProperties[0].name, 'foo');\n          }\n        }\n      });\n    });\n  });\n});\n"]}