{"version":3,"sources":["../src/test/typescript/typescript-import-scanner_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,+BAA4B;AAE5B,kDAA6C;AAE7C,0FAAmF;AACnF,gFAA0E;AAC1E,oEAAyE;AACzE,8CAAyC;AAEzC,KAAK,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACpC,IAAI,CAAC,kBAAkB,EAAE,GAAS,EAAE;QAClC,MAAM,SAAS,GAAG,IAAI,yCAAwB,EAAE,CAAC;QACjD,MAAM,QAAQ,GAAG,IAAI,mBAAQ,CACzB,EAAC,OAAO,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,0CAAmB,EAAE,CAAC,CAAC,CAAC,EAAE,SAAS,EAAC,CAAC,CAAC;QACxE,SAAS,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAE,EAAE,EAAE,CAAC,CAAC;QAClE,MAAM,EAAC,QAAQ,EAAC,GACZ,MAAM,uBAAU,CAAC,QAAQ,EAAE,IAAI,mDAAuB,EAAE,EAAE,SAAS,CAAC,CAAC;QACzE,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACnC,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,CAAC,uBAAuB,EAAE,GAAS,EAAE;QACvC,MAAM,MAAM,GAAG;;;;OAIZ,CAAC;QACJ,MAAM,SAAS,GAAG,IAAI,yCAAwB,EAAE,CAAC;QACjD,MAAM,QAAQ,GAAG,IAAI,mBAAQ,CACzB,EAAC,OAAO,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,0CAAmB,EAAE,CAAC,CAAC,CAAC,EAAE,SAAS,EAAC,CAAC,CAAC;QACxE,SAAS,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAE,EAAE,MAAM,CAAC,CAAC;QACtE,MAAM,EAAC,QAAQ,EAAC,GACZ,MAAM,uBAAU,CAAC,QAAQ,EAAE,IAAI,mDAAuB,EAAE,EAAE,SAAS,CAAC,CAAC;QACzE,aAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAgB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;YACpE,CAAC,WAAW,EAAE,QAAQ,CAAC;YACvB,CAAC,WAAW,EAAE,OAAO,CAAC;YACtB,CAAC,WAAW,EAAE,SAAS,CAAC;SACzB,CAAC,CAAC;IACL,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"typescript-import-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {Analyzer} from '../../core/analyzer';\nimport {ScannedImport} from '../../index';\nimport {TypeScriptImportScanner} from '../../typescript/typescript-import-scanner';\nimport {TypeScriptPreparser} from '../../typescript/typescript-preparser';\nimport {InMemoryOverlayUrlLoader} from '../../url-loader/overlay-loader';\nimport {runScanner} from '../test-utils';\n\nsuite('TypeScriptImportScanner', () => {\n  test('finds no imports', async () => {\n    const urlLoader = new InMemoryOverlayUrlLoader();\n    const analyzer = new Analyzer(\n        {parsers: new Map([['ts', new TypeScriptPreparser()]]), urlLoader});\n    urlLoader.urlContentsMap.set(analyzer.resolveUrl('test.ts')!, '');\n    const {features} =\n        await runScanner(analyzer, new TypeScriptImportScanner(), 'test.ts');\n    assert.equal(features.length, 0);\n  });\n\n  test('finds multiple import', async () => {\n    const source = `\n        import * as x from './x.ts';\n        import * as y from '/y.ts';\n        import * as z from '../z.ts';\n      `;\n    const urlLoader = new InMemoryOverlayUrlLoader();\n    const analyzer = new Analyzer(\n        {parsers: new Map([['ts', new TypeScriptPreparser()]]), urlLoader});\n    urlLoader.urlContentsMap.set(analyzer.resolveUrl('test.ts')!, source);\n    const {features} =\n        await runScanner(analyzer, new TypeScriptImportScanner(), 'test.ts');\n    assert.deepEqual(features.map((f: ScannedImport) => [f.type, f.url]), [\n      ['js-import', './x.ts'],\n      ['js-import', '/y.ts'],\n      ['js-import', '../z.ts'],\n    ]);\n  });\n});\n"]}