{"version":3,"sources":["../src/test/polymer/pseudo-element-scanner_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,+BAA4B;AAG5B,iFAA0E;AAC1E,8CAAoE;AAEpE,KAAK,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACjC,IAAI,CAAC,yCAAyC,EAAE,GAAS,EAAE;QACzD,MAAM,IAAI,GAAG,0BAA0B,CAAC;QACxC,MAAM,QAAQ,GAAG;;YAET,IAAI;;;;;gBAKA,CAAC;QACb,MAAM,EAAC,QAAQ,EAAC,GAAG,MAAM,iCAAoB,CACzC,IAAI,6CAAoB,EAAE,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;QAC3D,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,GAAG,CACR,CAAC,CAAwB,EAAE,EAAE,CACzB,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAC7D,CAAC;gBACC,OAAO;gBACP,IAAI;gBACJ,IAAI;gBACJ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,4BAAe,CAAA,iBAAiB,EAAC,CAAC;aACzD,CAAC,CAAC,CAAC;IACV,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"pseudo-element-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {ScannedPolymerElement} from '../../polymer/polymer-element';\nimport {PseudoElementScanner} from '../../polymer/pseudo-element-scanner';\nimport {fileRelativeUrl, runScannerOnContents} from '../test-utils';\n\nsuite('PseudoElementScanner', () => {\n  test('finds pseudo elements in html comments ', async () => {\n    const desc = `This is a pseudo element`;\n    const contents = `<html><head></head><body>\n          <!--\n          ${desc}\n          @pseudoElement x-foo\n          @demo demo/index.html\n          -->\n        </body>\n        </html>`;\n    const {features} = await runScannerOnContents(\n        new PseudoElementScanner(), 'test-doc.html', contents);\n    assert.deepEqual(\n        features.map(\n            (f: ScannedPolymerElement) =>\n                [f.tagName, f.pseudo, f.description.trim(), f.demos]),\n        [[\n          'x-foo',\n          true,\n          desc,\n          [{desc: 'demo', path: fileRelativeUrl`demo/index.html`}]\n        ]]);\n  });\n});\n"]}