{"version":3,"sources":["../src/test/polymer/polymer2-mixin-scanner-old-jsdoc_test.ts"],"names":[],"mappings":"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","file":"polymer2-mixin-scanner-old-jsdoc_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n\nimport {assert} from 'chai';\nimport * as path from 'path';\n\nimport {Analyzer} from '../../core/analyzer';\nimport {ClassScanner} from '../../javascript/class-scanner';\nimport {PolymerElementMixin, ScannedPolymerElementMixin} from '../../polymer/polymer-element-mixin';\nimport {CodeUnderliner, createForDirectory, fixtureDir, runScanner} from '../test-utils';\n\nsuite('Polymer2MixinScanner with old jsdoc annotations', () => {\n  let analyzer: Analyzer;\n  let underliner: CodeUnderliner;\n  suiteSetup(async () => {\n    const testFilesDir = path.resolve(fixtureDir, 'polymer2-old-jsdoc/');\n    ({analyzer, underliner} = await createForDirectory(testFilesDir));\n  });\n\n  async function getScannedMixins(filename: string) {\n    const {features} = await runScanner(analyzer, new ClassScanner(), filename);\n    return <ScannedPolymerElementMixin[]>features.filter(\n        (e) => e instanceof ScannedPolymerElementMixin);\n  }\n\n  async function getMixins(filename: string) {\n    const analysis = await analyzer.analyze([filename]);\n    return Array.from(analysis.getFeatures({kind: 'polymer-element-mixin'}));\n  }\n\n  async function getTestProps(mixin: ScannedPolymerElementMixin|\n                              PolymerElementMixin) {\n    const properties = [];\n    for (const name of mixin.properties.keys()) {\n      properties.push({name});\n    }\n    const attributes = [];\n    for (const name of mixin.attributes.keys()) {\n      attributes.push({name});\n    }\n    const methods = [];\n    for (const {name, params, return: r} of mixin.methods.values()) {\n      let processedParams = undefined;\n      if (params) {\n        processedParams = params.map(({name, type, description}) => {\n          const result:\n              {name: string, type?: string, description?: string} = {name};\n          if (type != null) {\n            result.type = type;\n          }\n          if (description != null) {\n            result.description = description;\n          }\n          return result;\n        });\n      }\n      methods.push({name, return: r, params: processedParams});\n    }\n    const {name, description, summary} = mixin;\n    return {\n      name,\n      description,\n      summary,\n      properties,\n      attributes,\n      methods,\n      underlinedWarnings: await underliner.underline(mixin.warnings)\n    };\n  }\n\n  test('finds mixin function declarations', async () => {\n    const mixins = await getScannedMixins('test-mixin-1.js');\n    const mixinData = await Promise.all(mixins.map(getTestProps));\n    assert.deepEqual(mixinData, [{\n                       name: 'TestMixin',\n                       description: 'A mixin description',\n                       summary: 'A mixin summary',\n                       properties: [{\n                         name: 'foo',\n                       }],\n                       attributes: [{\n                         name: 'foo',\n                       }],\n                       methods: [],\n                       underlinedWarnings: []\n                     }]);\n    const underlinedSource = await underliner.underline(mixins[0].sourceRange);\n    assert.deepEqual(underlinedSource, `\nfunction TestMixin(superclass) {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  return class extends superclass {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    static get properties() {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      return {\n~~~~~~~~~~~~~~\n        foo: {\n~~~~~~~~~~~~~~\n          notify: true,\n~~~~~~~~~~~~~~~~~~~~~~~\n          type: String,\n~~~~~~~~~~~~~~~~~~~~~~~\n        },\n~~~~~~~~~~\n      };\n~~~~~~~~\n    }\n~~~~~\n  }\n~~~\n}\n~`);\n  });\n\n  test('finds mixin arrow function expressions', async () => {\n    const mixins = await getScannedMixins('test-mixin-2.js');\n    const mixinData = await Promise.all(mixins.map(getTestProps));\n    assert.deepEqual(mixinData, [{\n                       name: 'Polymer.TestMixin',\n                       description: 'A mixin description',\n                       summary: 'A mixin summary',\n                       properties: [{\n                         name: 'foo',\n                       }],\n                       attributes: [{\n                         name: 'foo',\n                       }],\n                       methods: [],\n                       underlinedWarnings: []\n                     }]);\n    const underlinedSource = await underliner.underline(mixins[0].sourceRange);\n    assert.deepEqual(underlinedSource, `\nconst TestMixin = (superclass) => class extends superclass {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  static get properties() {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    return {\n~~~~~~~~~~~~\n      foo: {\n~~~~~~~~~~~~\n        notify: true,\n~~~~~~~~~~~~~~~~~~~~~\n        type: String,\n~~~~~~~~~~~~~~~~~~~~~\n      },\n~~~~~~~~\n    };\n~~~~~~\n  }\n~~~\n}\n~`);\n  });\n\n  test('finds mixin function expressions', async () => {\n    const mixins = await getScannedMixins('test-mixin-3.js');\n    const mixinData = await Promise.all(mixins.map(getTestProps));\n    assert.deepEqual(mixinData, [{\n                       name: 'Polymer.TestMixin',\n                       description: '',\n                       summary: '',\n                       properties: [{\n                         name: 'foo',\n                       }],\n                       attributes: [{\n                         name: 'foo',\n                       }],\n                       methods: [],\n                       underlinedWarnings: [],\n                     }]);\n    const underlinedSource = await underliner.underline(mixins[0].sourceRange);\n    assert.deepEqual(underlinedSource, `\nconst TestMixin = function(superclass) {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  return class extends superclass {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    static get properties() {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      return {\n~~~~~~~~~~~~~~\n        foo: {\n~~~~~~~~~~~~~~\n          notify: true,\n~~~~~~~~~~~~~~~~~~~~~~~\n          type: String,\n~~~~~~~~~~~~~~~~~~~~~~~\n        },\n~~~~~~~~~~\n      };\n~~~~~~~~\n    }\n~~~~~\n  }\n~~~\n}\n~`);\n  });\n\n  test(\n      'finds mixin variable declaration with only name, does not use trailing function',\n      async () => {\n        const mixins = await getScannedMixins('test-mixin-4.js');\n        const mixinData = await Promise.all(mixins.map(getTestProps));\n        assert.deepEqual(mixinData, [{\n                           name: 'Polymer.TestMixin',\n                           description: '',\n                           summary: '',\n                           properties: [],\n                           attributes: [],\n                           methods: [],\n                           underlinedWarnings: [],\n                         }]);\n        const underlinedSource =\n            await underliner.underline(mixins[0].sourceRange);\n        assert.deepEqual(underlinedSource, `\nlet TestMixin;\n~~~~~~~~~~~~~~`);\n      });\n\n  test('what to do on a class marked @mixinFunction?', async () => {\n    const mixins = await getScannedMixins('test-mixin-5.js');\n    const mixinData = mixins.map(getTestProps);\n    assert.deepEqual(mixinData, []);\n  });\n\n  test('finds mixin function declaration with only name', async () => {\n    const mixins = await getScannedMixins('test-mixin-6.js');\n    const mixinData = await Promise.all(mixins.map(getTestProps));\n    assert.deepEqual(mixinData, [{\n                       name: 'Polymer.TestMixin',\n                       description: '',\n                       summary: '',\n                       properties: [],\n                       attributes: [],\n                       methods: [],\n                       underlinedWarnings: []\n                     }]);\n    const underlinedSource = await underliner.underline(mixins[0].sourceRange);\n    assert.deepEqual(underlinedSource, `\nfunction TestMixin() {\n~~~~~~~~~~~~~~~~~~~~~~\n}\n~`);\n  });\n\n  test('finds mixin assigned to a namespace', async () => {\n    const mixins = await getScannedMixins('test-mixin-7.js');\n    const mixinData = await Promise.all(mixins.map(getTestProps));\n    assert.deepEqual(mixinData, [{\n                       name: 'Polymer.TestMixin',\n                       description: '',\n                       summary: '',\n                       properties: [{\n                         name: 'foo',\n                       }],\n                       attributes: [{\n                         name: 'foo',\n                       }],\n                       methods: [],\n                       underlinedWarnings: [],\n                     }]);\n    const underlinedSource = await underliner.underline(mixins[0].sourceRange);\n    assert.deepEqual(underlinedSource, `\nPolymer.TestMixin = Polymer.woohoo(function TestMixin(base) {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  /**\n~~~~~\n   * @polymerMixinClass\n~~~~~~~~~~~~~~~~~~~~~~~\n   */\n~~~~~\n  class TestMixin extends base {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    static get properties() {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      return {\n~~~~~~~~~~~~~~\n        foo: {\n~~~~~~~~~~~~~~\n          notify: true,\n~~~~~~~~~~~~~~~~~~~~~~~\n          type: String,\n~~~~~~~~~~~~~~~~~~~~~~~\n        },\n~~~~~~~~~~\n      };\n~~~~~~~~\n    };\n~~~~~~\n  };\n~~~~\n  return TestMixin;\n~~~~~~~~~~~~~~~~~~~\n});\n~~`);\n  });\n\n  test(\n      'properly analyzes nested mixin assignments with memberof tags',\n      async () => {\n        const mixins = await getScannedMixins('test-mixin-8.js');\n        const mixinData = await Promise.all(mixins.map(getTestProps));\n        assert.deepEqual(mixinData, [{\n                           name: 'Polymer.TestMixin',\n                           description: '',\n                           summary: '',\n                           properties: [{\n                             name: 'foo',\n                           }],\n                           attributes: [{\n                             name: 'foo',\n                           }],\n                           methods: [],\n                           underlinedWarnings: [],\n                         }]);\n      });\n\n  test('properly analyzes mixin instance and class methods', async () => {\n    const mixins = await getScannedMixins('test-mixin-9.js');\n    const mixinData = await Promise.all(mixins.map(getTestProps));\n    assert.deepEqual(\n        mixinData, [{\n          name: 'TestMixin',\n          description: 'A mixin description',\n          summary: 'A mixin summary',\n          properties: [{name: 'customInstanceGetter'}, {name: 'foo'}],\n          attributes: [{\n            name: 'foo',\n          }],\n          methods: [\n            {name: 'customInstanceFunction', params: [], return: undefined},\n            {\n              name: 'customInstanceFunctionWithJSDoc',\n              params: [],\n              return: {\n                desc: 'The number 5, always.',\n                type: 'Number',\n              },\n            },\n            {\n              name: 'customInstanceFunctionWithParams',\n              params: [{name: 'a'}, {name: 'b'}, {name: 'c'}],\n              return: undefined,\n            },\n            {\n              name: 'customInstanceFunctionWithParamsAndJSDoc',\n              params: [\n                {\n                  name: 'a',\n                  type: 'Number',\n                  description: 'The first argument',\n                },\n                {\n                  name: 'b',\n                  type: 'Number',\n                },\n                {\n                  name: 'c',\n                  type: 'Number',\n                  description: 'The third argument',\n                }\n              ],\n              return: {\n                desc: 'The number 7, always.',\n                type: 'Number',\n              },\n            },\n            {\n              name: 'customInstanceFunctionWithParamsAndPrivateJSDoc',\n              params: [],\n              return: undefined,\n            },\n          ],\n          underlinedWarnings: [],\n        }]);\n  });\n\n  test('applies mixins to mixins', async () => {\n    const mixins = await getMixins('test-mixin-10.js');\n    const mixinData = await Promise.all(mixins.map(getTestProps));\n    assert.deepEqual(mixinData, [\n      {\n        name: 'Base',\n        description: '',\n        summary: '',\n        attributes: [{name: 'foo'}],\n        methods: [\n          {name: 'baseMethod', params: [], return: {type: 'void'}},\n          {name: 'privateMethod', params: [], return: {type: 'void'}},\n          {name: 'privateOverriddenMethod', params: [], return: {type: 'void'}},\n          {name: 'overrideMethod', params: [], return: {type: 'void'}},\n        ],\n        properties: [{name: 'foo'}],\n        underlinedWarnings: [],\n      },\n      {\n        name: 'Middle',\n        attributes: [{name: 'foo'}],\n        description: '',\n        methods: [\n          {name: 'baseMethod', params: [], return: {type: 'void'}},\n          {name: 'privateMethod', params: [], return: {type: 'void'}},\n          {name: 'privateOverriddenMethod', params: [], return: {type: 'void'}},\n          {name: 'overrideMethod', params: [], return: {type: 'void'}},\n          {name: 'middleMethod', params: [], return: {type: 'void'}},\n        ],\n        properties: [{name: 'foo'}],\n        summary: '',\n        underlinedWarnings: [`\n    privateOverriddenMethod() { }\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`],\n      }\n    ]);\n  });\n});\n"]}