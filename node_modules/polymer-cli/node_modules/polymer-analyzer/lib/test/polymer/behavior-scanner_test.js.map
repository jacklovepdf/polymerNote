{"version":3,"sources":["../src/test/polymer/behavior-scanner_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAGH,+BAA4B;AAE5B,qDAAuD;AACvD,qEAA+D;AAC/D,8CAAyE;AAEzE,KAAK,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC5B,IAAI,SAAuC,CAAC;IAC5C,IAAI,aAAgC,CAAC;IAErC,UAAU,CAAC,GAAS,EAAE;QACpB,MAAM,EAAC,QAAQ,EAAC,GAAG,MAAM,+BAAkB,CAAC,uBAAU,CAAC,CAAC;QACxD,MAAM,EAAC,QAAQ,EAAC,GACZ,MAAM,uBAAU,CAAC,QAAQ,EAAE,IAAI,kCAAe,EAAE,EAAE,iBAAiB,CAAC,CAAC;QACzE,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;QACtB,aAAa;YACU,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,YAAY,0BAAe,CAAC,CAAC;QAC5E,KAAK,MAAM,QAAQ,IAAI,aAAa,EAAE;YACpC,IAAI,QAAQ,CAAC,SAAS,KAAK,SAAS,EAAE;gBACpC,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;aAC/D;YACD,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;SAC7C;IACH,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,CAAC,mCAAmC,EAAE,GAAG,EAAE;QAC7C,aAAM,CAAC,SAAS,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YAC7D,gBAAgB;YAChB,kCAAkC;YAClC,iBAAiB;YACjB,mCAAmC;YACnC,6BAA6B;YAC7B,oBAAoB;YACpB,kBAAkB;YAClB,SAAS;SACV,CAAC,IAAI,EAAE,CAAC,CAAC;IACZ,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACnD,aAAM,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACxC,aAAM,CAAC,KAAK,CACR,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAE,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,EACtE,QAAQ,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,uCAAuC,EAAE,GAAG,EAAE;QACjD,aAAM,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACzC,aAAM,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAE,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAChD,aAAM,CAAC,SAAS,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC,CAAC;QACrD,aAAM,CAAC,KAAK,CACR,SAAS,CAAC,GAAG,CAAC,6BAA6B,CAAE,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAE;aAChE,IAAI,EACT,MAAM,CAAC,CAAC;IACd,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAChD,IAAI,YAAY,CAAC;QACjB,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YAC5D,IAAI,IAAI,CAAC,IAAI,KAAK,GAAG,EAAE;gBACrB,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC;aAC7B;QACH,CAAC,CAAC,CAAC;QACH,aAAM,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,4BAA4B,EAAE;QACjC,aAAM,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC;QAC5C,MAAM,cAAc,GAChB,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAE,CAAC,mBAAmB,CAAC;QAC7D,MAAM,oBAAoB,GACtB,SAAS,CAAC,GAAG,CAAC,6BAA6B,CAAE,CAAC,mBAAmB,CAAC;QACtE,aAAM,CAAC,SAAS,CACZ,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,EACvC,CAAC,gBAAgB,EAAE,iBAAiB,EAAE,6BAA6B,CAAC,CAAC,CAAC;QAC1E,aAAM,CAAC,SAAS,CACZ,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sCAAsC,EAAE;QAC3C,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;QACnE,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;SACpE;QACD,aAAM,CAAC,SAAS,CACZ,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC,CAAC;QACjE,aAAM,CAAC,SAAS,CAAC,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE;YAChD,QAAQ;YACR,QAAQ;YACR,OAAO;YACP,UAAU;YACV,iBAAiB;YACjB,QAAQ;YACR,cAAc;SACf,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,qCAAqC,EAAE;QAC1C,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;QACnE,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;SACpE;QACD,aAAM,CAAC,SAAS,CACZ,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CACjC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAC,CAAC,CAAC,EAChE;YACE,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAC;YAClD,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAC;YACjD,EAAC,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAC;YAC/C,EAAC,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAC;YACpD,EAAC,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAC;YAC1D,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAC;YACjD,EAAC,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAC;SACzD,CAAC,CAAC;IACT,CAAC,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,4DAA4D,CAAC;IAC9E,IAAI,CAAC,QAAQ,EAAE,GAAS,EAAE;QACxB,MAAM,EAAC,QAAQ,EAAC,GAAG,MAAM,+BAAkB,CAAC,uBAAU,CAAC,CAAC;QACxD,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAC/D,MAAM,QAAQ,GAAG,CAAC,GAAG,QAAQ,CAAC,WAAW,CAAC,EAAC,IAAI,EAAE,iBAAiB,EAAC,CAAC,CAAC,CAAC;QACtE,aAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE;YAC/C,qBAAqB;YACrB,qBAAqB;YACrB,uBAAuB;SACxB,CAAC,CAAC;QAEH,8BAA8B;QAC9B,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE;YACrE,CAAC,gBAAgB,CAAC;YAClB,CAAC,kBAAkB,CAAC;YACpB,CAAC,gBAAgB,EAAE,iBAAiB,CAAC;SACtC,CAAC,CAAC;QAEP,8DAA8D;QAC9D,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,EAC1C,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;IACrE,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"behavior-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n\nimport {assert} from 'chai';\n\nimport {ScannedBehavior} from '../../polymer/behavior';\nimport {BehaviorScanner} from '../../polymer/behavior-scanner';\nimport {createForDirectory, fixtureDir, runScanner} from '../test-utils';\n\nsuite('BehaviorScanner', () => {\n  let behaviors: Map<string, ScannedBehavior>;\n  let behaviorsList: ScannedBehavior[];\n\n  suiteSetup(async () => {\n    const {analyzer} = await createForDirectory(fixtureDir);\n    const {features} =\n        await runScanner(analyzer, new BehaviorScanner(), 'js-behaviors.js');\n    behaviors = new Map();\n    behaviorsList =\n        <ScannedBehavior[]>features.filter((e) => e instanceof ScannedBehavior);\n    for (const behavior of behaviorsList) {\n      if (behavior.className === undefined) {\n        throw new Error(`Could not determine className of behavior.`);\n      }\n      behaviors.set(behavior.className, behavior);\n    }\n  });\n\n  test('Finds behavior object assignments', () => {\n    assert.deepEqual(behaviorsList.map((b) => b.className).sort(), [\n      'SimpleBehavior',\n      'Polymer.SimpleNamespacedBehavior',\n      'AwesomeBehavior',\n      'Polymer.AwesomeNamespacedBehavior',\n      'Really.Really.Deep.Behavior',\n      'CustomBehaviorList',\n      'exportedBehavior',\n      'default',\n    ].sort());\n  });\n\n  test('Supports behaviors at local assignments', () => {\n    assert(behaviors.has('SimpleBehavior'));\n    assert.equal(\n        behaviors.get('SimpleBehavior')!.properties.values().next().value.name,\n        'simple');\n  });\n\n  test('Supports behaviors with renamed paths', () => {\n    assert(behaviors.has('AwesomeBehavior'));\n    assert(behaviors.get('AwesomeBehavior')!.properties.has('custom'));\n  });\n\n  test('Supports behaviors On.Property.Paths', () => {\n    assert(behaviors.has('Really.Really.Deep.Behavior'));\n    assert.equal(\n        behaviors.get('Really.Really.Deep.Behavior')!.properties.get('deep')!\n            .name,\n        'deep');\n  });\n\n  test('Supports property array on behaviors', () => {\n    let defaultValue;\n    behaviors.get('AwesomeBehavior')!.properties.forEach((prop) => {\n      if (prop.name === 'a') {\n        defaultValue = prop.default;\n      }\n    });\n    assert.equal(defaultValue, 1);\n  });\n\n  test('Supports chained behaviors', function() {\n    assert(behaviors.has('CustomBehaviorList'));\n    const childBehaviors =\n        behaviors.get('CustomBehaviorList')!.behaviorAssignments;\n    const deepChainedBehaviors =\n        behaviors.get('Really.Really.Deep.Behavior')!.behaviorAssignments;\n    assert.deepEqual(\n        childBehaviors.map((b) => b.identifier),\n        ['SimpleBehavior', 'AwesomeBehavior', 'Really.Really.Deep.Behavior']);\n    assert.deepEqual(\n        deepChainedBehaviors.map((b) => b.identifier), ['Do.Re.Mi.Fa']);\n  });\n\n  test('Does not count methods as properties', function() {\n    const behavior = behaviors.get('Polymer.SimpleNamespacedBehavior');\n    if (!behavior) {\n      throw new Error('Could not find Polymer.SimpleNamespacedBehavior');\n    }\n    assert.deepEqual(\n        [...behavior.methods.keys()], ['method', 'shorthandMethod']);\n    assert.deepEqual([...behavior.properties.keys()], [\n      'simple',\n      'object',\n      'array',\n      'attached',\n      'templateLiteral',\n      'getter',\n      'getterSetter'\n    ]);\n  });\n\n  test('Correctly transforms property types', function() {\n    const behavior = behaviors.get('Polymer.SimpleNamespacedBehavior');\n    if (!behavior) {\n      throw new Error('Could not find Polymer.SimpleNamespacedBehavior');\n    }\n    assert.deepEqual(\n        [...behavior.properties.values()].map(\n            (p) => ({name: p.name, type: p.type, readOnly: p.readOnly})),\n        [\n          {name: 'simple', type: 'boolean', readOnly: false},\n          {name: 'object', type: 'Object', readOnly: false},\n          {name: 'array', type: 'Array', readOnly: false},\n          {name: 'attached', type: undefined, readOnly: false},\n          {name: 'templateLiteral', type: 'string', readOnly: false},\n          {name: 'getter', type: undefined, readOnly: true},\n          {name: 'getterSetter', type: undefined, readOnly: false}\n        ]);\n  });\n\n  const testName = 'Supports behaviors that are just arrays of other behaviors';\n  test(testName, async () => {\n    const {analyzer} = await createForDirectory(fixtureDir);\n    const analysis = await analyzer.analyze(['uses-behaviors.js']);\n    const elements = [...analysis.getFeatures({kind: 'polymer-element'})];\n    assert.deepEqual(elements.map((e) => e.tagName), [\n      'uses-basic-behavior',\n      'uses-array-behavior',\n      'uses-default-behavior'\n    ]);\n\n    // Get the toplevel behaviors.\n    assert.deepEqual(\n        elements.map((e) => e.behaviorAssignments.map((ba) => ba.identifier)), [\n          ['BasicBehavior1'],\n          ['ArrayOfBehaviors'],\n          ['BasicBehavior1', 'DefaultBehavior']\n        ]);\n\n    // Show that ArrayOfBehaviors has been correctly expanded too.\n    assert.deepEqual(\n        elements.map((e) => [...e.methods.keys()]),\n        [['method1'], ['method1', 'method2'], ['method1', 'method3']]);\n  });\n});\n"]}