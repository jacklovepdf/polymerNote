{"version":3,"sources":["../src/test/polymer/css-import-scanner_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAGH,+BAA4B;AAG5B,yEAAkE;AAClE,8CAAmD;AAEnD,KAAK,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAC7B,IAAI,CAAC,mBAAmB,EAAE,GAAS,EAAE;QACnC,MAAM,QAAQ,GAAG;;;;;;;;;;;;;;gBAcL,CAAC;QACb,MAAM,EAAC,QAAQ,EAAC,GAAG,MAAM,iCAAoB,CACzC,IAAI,qCAAgB,EAAE,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;QACnD,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAgB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EACnD,CAAC,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,CAAC,6CAA6C,EAAE,GAAS,EAAE;QAC7D,MAAM,QAAQ,GAAG;;;;;;;gBAOL,CAAC;QACb,MAAM,EAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAC,GAAG,MAAM,iCAAoB,CAC9D,IAAI,qCAAgB,EAAE,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;QACnD,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAgB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EACnD,CAAC,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;QAErC,SAAS,CAAC,cAAc,CAAC,GAAG,CACxB,QAAQ,CAAC,UAAU,CAAC,qBAAqB,CAAE,EAAE,EAAE,CAAC,CAAC;QACrD,MAAM,CAAC,OAAO,CAAC,GACX,CAAC,MAAM,QAAQ,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC;QAC1E,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;QACjD,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC,CAAC;IACxE,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"css-import-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n\nimport {assert} from 'chai';\n\nimport {ScannedImport} from '../../index';\nimport {CssImportScanner} from '../../polymer/css-import-scanner';\nimport {runScannerOnContents} from '../test-utils';\n\nsuite('CssImportScanner', () => {\n  test('finds CSS Imports', async () => {\n    const contents = `<html><head>\n          <link rel=\"import\" href=\"polymer.html\">\n          <link rel=\"import\" type=\"css\" href=\"ignored-outside-dom-module.css\">\n          <script src=\"foo.js\"></script>\n          <link rel=\"stylesheet\" href=\"foo.css\"></link>\n        </head>\n        <body>\n          <dom-module>\n            <link rel=\"import\" type=\"css\" href=\"polymer.css\">\n            <template>\n              <link rel=\"import\" type=\"css\" href=\"ignored-in-template.css\">\n            </template>\n          </dom-module>\n        </body>\n        </html>`;\n    const {features} = await runScannerOnContents(\n        new CssImportScanner(), 'test.html', contents);\n    assert.deepEqual(\n        features.map((f: ScannedImport) => [f.type, f.url]),\n        [['css-import', 'polymer.css']]);\n  });\n\n  test('adjusts CSS Import urls relative to baseUrl', async () => {\n    const contents = `<html><head><base href=\"/aybabtu/\">\n        </head>\n        <body>\n          <dom-module>\n            <link rel=\"import\" type=\"css\" href=\"polymer.css\">\n          </dom-module>\n        </body>\n        </html>`;\n    const {features, analyzer, urlLoader} = await runScannerOnContents(\n        new CssImportScanner(), 'test.html', contents);\n    assert.deepEqual(\n        features.map((f: ScannedImport) => [f.type, f.url]),\n        [['css-import', 'polymer.css']]);\n\n    urlLoader.urlContentsMap.set(\n        analyzer.resolveUrl('aybabtu/polymer.css')!, '');\n    const [import_] =\n        (await analyzer.analyze(['test.html'])).getFeatures({kind: 'import'});\n    assert.equal(import_.originalUrl, 'polymer.css');\n    assert.equal(import_.url, analyzer.resolveUrl('aybabtu/polymer.css'));\n  });\n});\n"]}