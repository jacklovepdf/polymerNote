{"version":3,"sources":["../src/test/polymer/dom-module-scanner_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAGH,+BAA4B;AAE5B,yEAAoF;AACpF,8CAAmE;AAEnE,KAAK,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAC7B,IAAI,CAAC,iBAAiB,EAAE,GAAS,EAAE;QACjC,MAAM,QAAQ,GAAG;;;;;;;;;;;;;gBAaL,CAAC;QAEb,MAAM,EAAC,QAAQ,EAAC,GAAG,MAAM,iCAAoB,CACzC,IAAI,qCAAgB,EAAE,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;QACnD,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAmB,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EACpE,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,GAAG,CACR,CAAC,CAAmB,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,EAC/D,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,CAAC,mCAAmC,EAAE,GAAS,EAAE;QACnD,MAAM,QAAQ,GAAG;;;;;;;;;;gBAUL,CAAC;QACb,MAAM,EAAC,QAAQ,EAAE,QAAQ,EAAC,GAAG,MAAM,iCAAoB,CACnD,IAAI,qCAAgB,EAAE,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;QACnD,MAAM,UAAU,GAAG,IAAI,2BAAc,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,UAAU,GAAG,QAA8B,CAAC;QAClD,aAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAEnC,aAAM,CAAC,SAAS,CACZ,MAAM,UAAU,CAAC,SAAS,CACtB,UAAU,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,EAC3D;YACE;;6BAEmB;YACnB;;yCAE+B;SAChC,CAAC,CAAC;QACP,aAAM,CAAC,SAAS,CAAC,MAAM,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC;;wCAElC,CAAC,CAAC,CAAC;IACzC,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"dom-module-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n\nimport {assert} from 'chai';\n\nimport {DomModuleScanner, ScannedDomModule} from '../../polymer/dom-module-scanner';\nimport {CodeUnderliner, runScannerOnContents} from '../test-utils';\n\nsuite('DomModuleScanner', () => {\n  test('finds local IDs', async () => {\n    const contents = `<html><head></head>\n        <body>\n          <dom-module>\n            <template>\n              <div id=\"foo\"></div>\n              <span id=\"bar\"></div>\n              <div id2=\"nope\"></div>\n              <template>\n                <div id=\"nada\"></div>\n              </template>\n            </template>\n          </dom-module>\n        </body>\n        </html>`;\n\n    const {features} = await runScannerOnContents(\n        new DomModuleScanner(), 'test.html', contents);\n    assert.deepEqual(\n        features.map((f: ScannedDomModule) => f.localIds.map((l) => l.name)),\n        [['foo', 'bar']]);\n    assert.deepEqual(\n        features.map(\n            (f: ScannedDomModule) => f.localIds.map((l) => l.nodeName)),\n        [['div', 'span']]);\n  });\n\n  test('finds databinding expressions IDs', async () => {\n    const contents = `<html><head></head>\n        <body>\n          <dom-module>\n            <template>\n              <div id=\"{{foo}}\"></div>\n              <span id=\"{{bar(baz, boop)}}\"></div>\n              <other-elem prop=\"{{foo bar}}\"></other-elem>\n            </template>\n          </dom-module>\n        </body>\n        </html>`;\n    const {features, analyzer} = await runScannerOnContents(\n        new DomModuleScanner(), 'test.html', contents);\n    const underliner = new CodeUnderliner(analyzer);\n    const domModules = features as ScannedDomModule[];\n    assert.equal(domModules.length, 1);\n\n    assert.deepEqual(\n        await underliner.underline(\n            domModules[0].databindings.map((db) => db.sourceRange)),\n        [\n          `\n              <div id=\"{{foo}}\"></div>\n                         ~~~`,\n          `\n              <span id=\"{{bar(baz, boop)}}\"></div>\n                          ~~~~~~~~~~~~~~`\n        ]);\n    assert.deepEqual(await underliner.underline(domModules[0].warnings), [`\n              <other-elem prop=\"{{foo bar}}\"></other-elem>\n                                      ~`]);\n  });\n});\n"]}