{"version":3,"sources":["../src/test/polymer/polymer-element-scanner_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,sEAAsE;AAEtE,+BAA4B;AAG5B,mFAA4E;AAC5E,8CAAmE;AAEnE,KAAK,CAAC,uBAAuB,EAAE,GAAG,EAAE;IAClC,IAAI,CAAC,wBAAwB,EAAE,GAAS,EAAE;QACxC,MAAM,QAAQ,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAgFX,CAAC;QAEP,MAAM,EAAC,QAAQ,EAAE,eAAe,EAAC,GAAG,MAAM,iCAAoB,CAC1D,IAAI,+CAAqB,EAAE,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAC3D,MAAM,QAAQ,GAAG,eAA0C,CAAC;QAE5D,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,EAC9C,CAAC,uBAAuB,EAAE,uBAAuB,CAAC,CAAC,CAAC;QACxD,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CACrB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,gBAAiB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAC7D,CAAC,CAAC,aAAa,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAClE,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;QAC/D,aAAM,CAAC,SAAS,CACZ,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,kBAAkB,CAAC;aACzC,GAAG,CACA,CAAC,CAAC,EAAE,EAAE,CACF,CAAC,CAAC,CAAC,IAAI;YACN,CAAC,CAAC,kBAAmB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EACpE,CAAC,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;QAEtD,aAAM,CAAC,SAAS,CACZ,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,kBAAkB,CAAC;aACzC,GAAG,CACA,CAAC,CAAC,EAAE,EAAE,CACF,CAAC,CAAC,CAAC,IAAI;YACN,CAAC,CAAC,kBAAmB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EACpE,CAAC,CAAC,GAAG,EAAE,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAEjE,aAAM,CAAC,SAAS,CACZ,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAC1D,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC,CAAC;QAElC,aAAM,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;YAC9C,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;YACH,KAAK;YACL,gBAAgB;YAChB,cAAc;SACf,CAAC,CAAC;QAEH,aAAM,CAAC,SAAS,CACZ,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;aAC1C,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC3D,CAAC;gBACC,GAAG;gBACH;oBACE,kCAAkC;oBAClC,wCAAwC;iBACzC;aACF,CAAC,CAAC,CAAC;QACR,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;QACzD,aAAM,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;YAC3C,oBAAoB;YACpB,sBAAsB;YACtB,6BAA6B;YAC7B,uCAAuC;YACvC,iBAAiB;SAClB,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAE,CAAC;QAE5E,aAAM,CAAC,SAAS,CAAC,WAAW,CAAC,MAAQ,EAAE;YACrC,IAAI,EAAE,SAAS;YACf,IAAI,EAAE,aAAa;SACpB,CAAC,CAAC;QAEH,aAAM,CAAC,SAAS,CACZ,WAAW,CAAC,MAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,EAAE;YAC/D,CAAC,KAAK,EAAE,QAAQ,EAAE,qBAAqB,CAAC;YACxC,CAAC,KAAK,EAAE,QAAQ,EAAE,sBAAsB,CAAC;SAC1C,CAAC,CAAC;QAEP,aAAM,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;YACxD,CAAC,GAAG,EAAE,4BAA4B,CAAC;YACnC,CAAC,GAAG,EAAE,2BAA2B,CAAC;YAClC,CAAC,GAAG,EAAE,2BAA2B,CAAC;YAClC,CAAC,GAAG,EAAE,2BAA2B,CAAC;YAClC,CAAC,GAAG,EAAE,2BAA2B,CAAC;YAClC,CAAC,GAAG,EAAE,2BAA2B,CAAC;YAClC,CAAC,GAAG,EAAE,SAAS,CAAC;YAChB,CAAC,GAAG,EAAE,2BAA2B,CAAC;YAClC,CAAC,GAAG,EAAE,4BAA4B,CAAC;YACnC,CAAC,GAAG,EAAE,4BAA4B,CAAC;YACnC,CAAC,KAAK,EAAE,2BAA2B,CAAC;YACpC,CAAC,gBAAgB,EAAE,QAAQ,CAAC;YAC5B,CAAC,cAAc,EAAE,QAAQ,CAAC;SAC3B,CAAC,CAAC;QAEH,aAAM,CAAC,SAAS,CACZ,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;aACtC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,EACxC;YACE,CAAC,GAAG,EAAE,SAAS,CAAC;YAChB,CAAC,GAAG,EAAE,SAAS,CAAC;YAChB,CAAC,GAAG,EAAE,SAAS,CAAC;YAChB,CAAC,GAAG,EAAE,SAAS,CAAC;YAChB,CAAC,GAAG,EAAE,WAAW,CAAC;YAClB,CAAC,GAAG,EAAE,SAAS,CAAC;YAChB,CAAC,GAAG,EAAE,SAAS,CAAC;YAChB,CAAC,GAAG,EAAE,SAAS,CAAC;YAChB,CAAC,GAAG,EAAE,SAAS,CAAC;YAChB,CAAC,GAAG,EAAE,SAAS,CAAC;YAChB,CAAC,KAAK,EAAE,aAAa,CAAC;SACvB,CAAC,CAAC;QAEP,aAAM,CAAC,SAAS,CACZ,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EACvD,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,gBAAgB,CAAC,CAAC,CAAC;QAEvC,aAAM,CAAC,SAAS,CACZ,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,EACnE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;QAEnC,aAAM,CAAC,SAAS,CACZ,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;QAEzE,aAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE;YACtC,EAAC,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,UAAU,EAAC;YACvC,EAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAC;SACvC,CAAC,CAAC;QAEH,oEAAoE;QACpE,aAAM,CAAC,KAAK,CACR,QAAQ,CAAC,CAAC,CAAC;aACN,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,+BAA+B,CAAC;aAClE,MAAM,EACX,CAAC,CAAC,CAAC;QACP,kDAAkD;QAClD,aAAM,CAAC,KAAK,CACR,QAAQ,CAAC,CAAC,CAAC;aACN,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,+BAA+B,CAAC;aAClE,MAAM,EACX,CAAC,CAAC,CAAC;IACT,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,CAAC,8CAA8C,EAAE,GAAS,EAAE;QAC9D,MAAM,QAAQ,GAAG;;;;;;OAMd,CAAC;QACJ,MAAM,EAAC,QAAQ,EAAE,eAAe,EAAC,GAAG,MAAM,iCAAoB,CAC1D,IAAI,+CAAqB,EAAE,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAC3D,MAAM,QAAQ,GAAG,eAA0C,CAAC;QAE5D,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,kBAAkB,EAAE,YAAY,CAAC,CAAC,CAAC;QACxE,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,EAChC,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAA,CAAC,CAAC;IAEH,MAAM,QAAQ,GACV,qEAAqE,CAAC;IAC1E,IAAI,CAAC,QAAQ,EAAE,GAAS,EAAE;QACxB,MAAM,QAAQ,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;UAyBX,CAAC;QAEP,MAAM,EAAC,QAAQ,EAAE,eAAe,EAAE,QAAQ,EAAC,GAAG,MAAM,iCAAoB,CACpE,IAAI,+CAAqB,EAAE,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAC3D,MAAM,QAAQ,GAAG,eAA0C,CAAC;QAC5D,MAAM,UAAU,GAAG,IAAI,2BAAc,CAAC,QAAQ,CAAC,CAAC;QAEhD,aAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACrC,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAE,CAAC;QAC7B,aAAM,CAAC,SAAS,CACZ,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EACrC,CAAC,YAAY,EAAE,qBAAqB,CAAC,CAAC,CAAC;QAE3C,aAAM,CAAC,SAAS,CACZ,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;aAClC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EACpE;YACE;gBACE;;6BAEiB;gBACjB;;6BAEiB;aAClB;YACD;gBACE;;2BAEe;gBACf;;qCAEyB;aAC1B;SACF,CAAC,CAAC;QACP,aAAM,CAAC,SAAS,CAAC,MAAM,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAC7D;;iBAEW;YACX;;eAES;SACV,CAAC,CAAC;IACL,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,CAAC,iCAAiC,EAAE,GAAS,EAAE;QACjD,mEAAmE;QACnE,iCAAiC;QACjC,MAAM,QAAQ,GAAG;;;;QAIb,CAAC;QAEL,4BAA4B;QAC5B,MAAM,iCAAoB,CACtB,IAAI,+CAAqB,EAAE,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;IAC7D,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"polymer-element-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/// <reference path=\"../../../node_modules/@types/mocha/index.d.ts\" />\n\nimport {assert} from 'chai';\n\nimport {ScannedPolymerElement} from '../../polymer/polymer-element';\nimport {PolymerElementScanner} from '../../polymer/polymer-element-scanner';\nimport {CodeUnderliner, runScannerOnContents} from '../test-utils';\n\nsuite('PolymerElementScanner', () => {\n  test('finds polymer elements', async () => {\n    const contents = `Polymer({\n        is: 'x-foo',\n        properties: {\n          a: {\n            type: Boolean,\n            value: 5\n          },\n          b: {\n            type: String,\n            value: function() {\n              return 'test';\n            }\n          },\n          c: {\n            type: Number,\n            readOnly: true\n          },\n          d: {\n            type: Number,\n            computed: '_computeD(c)'\n          },\n          e: {\n            type: String,\n            notify: true\n          },\n          f: {\n            type: Object,\n            observer: '_observeF'\n          },\n          g: {\n            type: {},\n            computed: '_computeG(a, b)',\n            readOnly: false\n          },\n          h: String,\n          [i]: Boolean, // should not be recognized,\n          ['j']: Boolean,\n          'k': Boolean,\n          all: {\n            type: Object,\n            notify: true,\n            readOnly: false,\n            reflectToAttribute: false,\n            observer: '_observeAll'\n          }\n        },\n        observers: [\n          '_anObserver(foo, bar)',\n          '_anotherObserver(foo)'\n        ],\n        listeners: {\n          'event-a': '_handleA',\n          eventb: '_handleB',\n          'event-c': _handleC,\n          [['event', 'd'].join('-')]: '_handleD'\n        },\n        customPublicMethod: (foo, bar) => { return foo + bar; },\n        _customPrivateMethod: (foo, bar) => { return foo + bar; },\n        /**\n         * This is an instance method with JS Doc\n         * @param {string} foo The first argument.\n         * @param {number} bar The second argument.\n         * @returns {boolean} The return.\n         */\n        customPublicMethodWithJsDoc: (foo, bar) => { return foo + bar; },\n        customPublicMethodWithClassicFunction: function(foo, bar) { return foo + bar; },\n        shorthandMethod(foo, bar) { return foo + bar; },\n\n        /** @return {string} */\n        get getterNoSetter() { },\n\n        /** @return {string} */\n        get getterSetter() { },\n\n        /** @param {string} value */\n        set getterSetter(value) { },\n      });\n      Polymer({\n        is: 'x-bar',\n        listeners: []\n      });`;\n\n    const {features: untypedFeatures} = await runScannerOnContents(\n        new PolymerElementScanner(), 'test-file.js', contents);\n    const features = untypedFeatures as ScannedPolymerElement[];\n\n    assert.deepEqual(\n        features[0].observers.map((o) => o.expression),\n        ['_anObserver(foo, bar)', '_anotherObserver(foo)']);\n    assert.deepEqual(\n        features[0].observers.map(\n            (o) => o.parsedExpression!.properties.map((p) => p.name)),\n        [['_anObserver', 'foo', 'bar'], ['_anotherObserver', 'foo']]);\n    const properties = Array.from(features[0].properties.values());\n    assert.deepEqual(\n        properties.filter((p) => p.observerExpression)\n            .map(\n                (p) =>\n                    [p.name,\n                     p.observerExpression!.properties.map((sp) => sp.name)]),\n        [['f', ['_observeF']], ['all', ['_observeAll']]]);\n\n    assert.deepEqual(\n        properties.filter((p) => p.computedExpression)\n            .map(\n                (p) =>\n                    [p.name,\n                     p.computedExpression!.properties.map((sp) => sp.name)]),\n        [['d', ['_computeD', 'c']], ['g', ['_computeG', 'a', 'b']]]);\n\n    assert.deepEqual(\n        Array.from(features[0].events.values()).map((e) => e.name),\n        ['e-changed', 'all-changed']);\n\n    assert.deepEqual(properties.map((p) => p.name), [\n      'a',\n      'b',\n      'c',\n      'd',\n      'e',\n      'f',\n      'g',\n      'h',\n      'j',\n      'k',\n      'all',\n      'getterNoSetter',\n      'getterSetter',\n    ]);\n\n    assert.deepEqual(\n        properties.filter((p) => p.warnings.length > 0)\n            .map((p) => [p.name, p.warnings.map((w) => w.message)]),\n        [[\n          'g',\n          [\n            'Invalid type in property object.',\n            'Unable to determine type for property.'\n          ]\n        ]]);\n    const methods = Array.from(features[0].methods.values());\n    assert.deepEqual(methods.map((m) => m.name), [\n      'customPublicMethod',\n      '_customPrivateMethod',\n      'customPublicMethodWithJsDoc',\n      'customPublicMethodWithClassicFunction',\n      'shorthandMethod',\n    ]);\n\n    const jsDocMethod = features[0].methods.get('customPublicMethodWithJsDoc')!;\n\n    assert.deepEqual(jsDocMethod.return !, {\n      type: 'boolean',\n      desc: 'The return.',\n    });\n\n    assert.deepEqual(\n        jsDocMethod.params!.map((p) => [p.name, p.type, p.description]), [\n          ['foo', 'string', 'The first argument.'],\n          ['bar', 'number', 'The second argument.'],\n        ]);\n\n    assert.deepEqual(properties.map((p) => [p.name, p.type]), [\n      ['a', 'boolean | null | undefined'],\n      ['b', 'string | null | undefined'],\n      ['c', 'number | null | undefined'],\n      ['d', 'number | null | undefined'],\n      ['e', 'string | null | undefined'],\n      ['f', 'Object | null | undefined'],\n      ['g', undefined],\n      ['h', 'string | null | undefined'],\n      ['j', 'boolean | null | undefined'],\n      ['k', 'boolean | null | undefined'],\n      ['all', 'Object | null | undefined'],\n      ['getterNoSetter', 'string'],\n      ['getterSetter', 'string'],\n    ]);\n\n    assert.deepEqual(\n        Array.from(features[0].attributes.values())\n            .map((p) => [p.name, p.changeEvent]),\n        [\n          ['a', undefined],\n          ['b', undefined],\n          ['c', undefined],\n          ['d', undefined],\n          ['e', 'e-changed'],\n          ['f', undefined],\n          ['g', undefined],\n          ['h', undefined],\n          ['j', undefined],\n          ['k', undefined],\n          ['all', 'all-changed']\n        ]);\n\n    assert.deepEqual(\n        properties.filter((p) => p.readOnly).map((p) => p.name),\n        ['c', 'd', 'g', 'getterNoSetter']);\n\n    assert.deepEqual(\n        properties.filter((p) => p.default).map((p) => [p.name, p.default]),\n        [['a', '5'], ['b', '\"test\"']]);\n\n    assert.deepEqual(\n        properties.filter((p) => p.notify).map((p) => p.name), ['e', 'all']);\n\n    assert.deepEqual(features[0].listeners, [\n      {event: 'event-a', handler: '_handleA'},\n      {event: 'eventb', handler: '_handleB'}\n    ]);\n\n    // Skip not statically analizable entries without emitting a warning\n    assert.equal(\n        features[0]\n            .warnings.filter((w) => w.code === 'invalid-listeners-declaration')\n            .length,\n        0);\n    // Emit warning for non-object `listeners` literal\n    assert.equal(\n        features[1]\n            .warnings.filter((w) => w.code === 'invalid-listeners-declaration')\n            .length,\n        1);\n  });\n\n  test('finds declared and assigned call expressions', async () => {\n    const contents = `\n          const MyOtherElement = Polymer({\n            is: 'my-other-element'\n          });\n\n          window.MyElement = Polymer({is: 'my-element'});\n      `;\n    const {features: untypedFeatures} = await runScannerOnContents(\n        new PolymerElementScanner(), 'test-file.js', contents);\n    const features = untypedFeatures as ScannedPolymerElement[];\n\n    assert.deepEqual(\n        features.map((f) => f.tagName), ['my-other-element', 'my-element']);\n    assert.deepEqual(\n        features.map((f) => f.className),\n        ['MyOtherElement', 'window.MyElement']);\n  });\n\n  const testName =\n      'Produces correct warnings for bad observers and computed properties';\n  test(testName, async () => {\n    const contents = `\n      Polymer({\n        is: 'x-foo',\n        properties: {\n          parseError: {\n            type: String,\n            computed: 'let let let',\n            observer: 'let let let',\n          },\n          badKindOfExpression: {\n            type: String,\n            computed: 'foo',\n            observer: 'foo(bar, baz)'\n          }\n        },\n        observers: [\n          'let let let parseError',\n          'foo'\n        ],\n        method() {\n          const shouldIgnore = {\n            ignore: 'please',\n            meToo: true\n          }\n        }\n      });`;\n\n    const {features: untypedFeatures, analyzer} = await runScannerOnContents(\n        new PolymerElementScanner(), 'test-file.js', contents);\n    const features = untypedFeatures as ScannedPolymerElement[];\n    const underliner = new CodeUnderliner(analyzer);\n\n    assert.deepEqual(features.length, 1);\n    const element = features[0]!;\n    assert.deepEqual(\n        Array.from(element.properties.keys()),\n        ['parseError', 'badKindOfExpression']);\n\n    assert.deepEqual(\n        await Promise.all(Array.from(element.properties.values())\n                              .map((p) => underliner.underline(p.warnings))),\n        [\n          [\n            `\n            computed: 'let let let',\n                           ~`,\n            `\n            observer: 'let let let',\n                           ~`\n          ],\n          [\n            `\n            computed: 'foo',\n                       ~~~`,\n            `\n            observer: 'foo(bar, baz)'\n                       ~~~~~~~~~~~~~`\n          ]\n        ]);\n    assert.deepEqual(await underliner.underline(element.warnings), [\n      `\n          'let let let parseError',\n               ~`,\n      `\n          'foo'\n           ~~~`\n    ]);\n  });\n\n  test('Polymer 2 class observers crash', async () => {\n    // When Polymer 2 adopted a static getter for observers, it crashed\n    // the Polymer 1 element scanner.\n    const contents = `class TestElement extends Polymer.Element {\n        static get observers() {\n          return foo.bar;\n        }\n      }`;\n\n    // Scanning should not throw\n    await runScannerOnContents(\n        new PolymerElementScanner(), 'test-file.js', contents);\n  });\n});\n"]}