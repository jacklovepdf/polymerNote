{"version":3,"sources":["../src/test/url-loader/url-resolver_test.ts"],"names":[],"mappings":"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","file":"url-resolver_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {FileRelativeUrl, PackageRelativeUrl, ResolvedUrl} from '../../index';\nimport {UrlResolver} from '../../url-loader/url-resolver';\n\nclass SimplestUrlResolver extends UrlResolver {\n  resolve(\n      firstUrl: ResolvedUrl|PackageRelativeUrl, secondUrl?: FileRelativeUrl) {\n    const [baseUrl = '/test/' as ResolvedUrl, url] =\n        this.getBaseAndUnresolved(firstUrl, secondUrl);\n    return this.simpleUrlResolve(baseUrl, url, 'https');\n  }\n\n  relative(to: ResolvedUrl): PackageRelativeUrl;\n  relative(from: ResolvedUrl, to: ResolvedUrl, kind?: string): FileRelativeUrl;\n  relative(fromOrTo: ResolvedUrl, maybeTo?: ResolvedUrl, _kind?: string):\n      FileRelativeUrl|PackageRelativeUrl {\n    let from, to;\n    if (maybeTo !== undefined) {\n      from = fromOrTo;\n      to = maybeTo;\n    } else {\n      throw new Error(\n          'simplest url resolver.relative must be called with two arguments');\n    }\n    const result = this.simpleUrlRelative(from, to);\n    if (maybeTo === undefined) {\n      return this.brandAsPackageRelative(result);\n    }\n    return result;\n  }\n}\n\nsuite('UrlResolver', () => {\n  suite('resolve', () => {\n    const resolver = new SimplestUrlResolver();\n    function resolve(baseUrl: string, unresolvedUrl: string) {\n      return resolver.resolve(\n          baseUrl as ResolvedUrl, unresolvedUrl as FileRelativeUrl);\n    }\n    test('can resolve a url when relative url contains no pathname', () => {\n      assert.equal(resolve('/foo.html?fiz#buz', ''), '/foo.html?fiz');\n      assert.equal(resolve('/foo.html', '#fiz'), '/foo.html#fiz');\n      assert.equal(resolve('/foo.html#buz', '#fiz'), '/foo.html#fiz');\n      assert.equal(resolve('/foo.html', '?fiz'), '/foo.html?fiz');\n      assert.equal(resolve('/foo.html?buz', '?fiz'), '/foo.html?fiz');\n      assert.equal(resolve('/foo.html?bar#buz', '?fiz'), `/foo.html?fiz`);\n    });\n  });\n\n  suite('relative', () => {\n    const resolver = new SimplestUrlResolver();\n    function relative(from: string, to: string) {\n      const fromResolved = resolver.resolve(from as PackageRelativeUrl);\n      const toResolved = resolver.resolve(to as PackageRelativeUrl);\n      return resolver.relative(fromResolved, toResolved);\n    }\n\n    test('can get relative urls between urls', () => {\n      assert.equal(relative('/', '/'), '');\n      assert.equal(relative('/', '/bar/'), 'bar/');\n      assert.equal(relative('/foo/', '/foo/'), '');\n      assert.equal(relative('/foo/', '/bar/'), '../bar/');\n      assert.equal(relative('foo/', '/'), '../../');  // 'foo/' ~> '/test/foo/'\n      assert.equal(relative('foo.html', 'foo.html'), '');\n      assert.equal(relative('foo/', 'bar/'), '../bar/');\n      assert.equal(relative('foo.html', 'bar.html'), 'bar.html');\n      assert.equal(relative('sub/foo.html', 'bar.html'), '../bar.html');\n      assert.equal(\n          relative('sub1/foo.html', 'sub2/bar.html'), '../sub2/bar.html');\n      assert.equal(relative('foo.html', 'sub/bar.html'), 'sub/bar.html');\n      assert.equal(relative('./foo.html', './sub/bar.html'), 'sub/bar.html');\n      assert.equal(relative('./foo.html', './bar.html'), 'bar.html');\n      assert.equal(relative('./foo/', 'sub/bar.html'), '../sub/bar.html');\n      assert.equal(relative('./foo/bonk.html', 'sub/bar/'), '../sub/bar/');\n    });\n\n    test('preserves target url querystrings and fragments', () => {\n      assert.equal(relative('foo.html', 'foo.html?fiz=buz'), '?fiz=buz');\n      assert.equal(\n          relative('foo.html', 'bar.html?fiz=buz'), 'bar.html?fiz=buz');\n      assert.equal(relative('foo.html?fiz=buz', 'foo.html'), '');\n      assert.equal(relative('foo.html', 'foo.html#fiz'), '#fiz');\n    });\n\n    test('will keep absolute urls absolute', () => {\n      assert.equal(\n          relative('foo/', 'http://example.com'), 'http://example.com/');\n      assert.equal(\n          relative('foo/', 'https://example.com'), 'https://example.com/');\n      assert.equal(\n          relative('foo/', 'file://host/path/to/file'),\n          'file://host/path/to/file');\n    });\n\n    test('sibling urls work properly', () => {\n      assert.equal(relative('foo.html', '../bar/bar.html'), '../bar/bar.html');\n      assert.equal(\n          relative('foo/foo.html', '../bar/bar.html'), '../../bar/bar.html');\n      assert.equal(\n          relative('../foo/foo.html', '../bar/bar.html'), '../bar/bar.html');\n    });\n  });\n});\n"]}