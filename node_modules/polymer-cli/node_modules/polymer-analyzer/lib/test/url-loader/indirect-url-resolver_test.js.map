{"version":3,"sources":["../src/test/url-loader/indirect-url-resolver_test.ts"],"names":[],"mappings":"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","file":"indirect-url-resolver_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {Analyzer} from '../../core/analyzer';\nimport {FsUrlResolver} from '../../url-loader/fs-url-resolver';\nimport {IndirectUrlResolver} from '../../url-loader/indirect-url-resolver';\nimport {InMemoryOverlayUrlLoader} from '../../url-loader/overlay-loader';\nimport {fileRelativeUrl, packageRelativeUrl, resolvedUrl, rootedFileUrl} from '../test-utils';\n\nsuite('IndirectUrlResolver', function() {\n  const mapping = new Map<string, string>([\n    ['/foo/foo.html', 'sub/package/foo/foo.html'],\n    ['/foo/foo.css', 'sub/package/foo/foo.css'],\n    ['/bar/bar.html', 'different/x/y/bar.html'],\n    ['/bar/bar.css', 'different/x/y/bar.css'],\n  ]);\n  const indirectResolver =\n      new IndirectUrlResolver('/root', '/root/sub/package', mapping);\n\n  test('resolve', async () => {\n    // Package relative urls are resolved relative to the package\n    assert.deepEqual(\n        indirectResolver.resolve(packageRelativeUrl`foo.html`),\n        rootedFileUrl`root/sub/package/foo.html`);\n\n    // Full URLs are left alone\n    assert.deepEqual(\n        indirectResolver.resolve(rootedFileUrl`root/sub/package/bar.html`),\n        rootedFileUrl`root/sub/package/bar.html`);\n\n    // Relative urls with a base url are resolved relative to url space\n    assert.deepEqual(\n        indirectResolver.resolve(\n            rootedFileUrl`root/sub/package/foo/foo.html`,\n            fileRelativeUrl`../bar/bar.html`),\n        rootedFileUrl`root/different/x/y/bar.html`);\n\n    // Protocol-relative urls are resolved with default https: protocol\n    assert.deepEqual(\n        indirectResolver.resolve(packageRelativeUrl`//foo.com/bar.html`),\n        resolvedUrl`https://foo.com/bar.html`);\n\n    // Protocol-relative urls are resolved with provided protocol\n    assert.deepEqual(\n        (new IndirectUrlResolver(\n             '/root', '/root/sub/package', mapping, 'potato'))\n            .resolve(packageRelativeUrl`//foo.com/bar.html`),\n        resolvedUrl`potato://foo.com/bar.html`);\n  });\n\n  test('relative', async () => {\n    // From a mapped url to a mapped known url.\n    assert.deepEqual(\n        indirectResolver.relative(\n            rootedFileUrl`root/different/x/y/bar.html`,\n            rootedFileUrl`root/sub/package/foo/foo.css`),\n        `../foo/foo.css`);\n\n    // From a mapped url to an unmapped url.\n    assert.deepEqual(\n        indirectResolver.relative(\n            rootedFileUrl`root/different/x/y/bar.html`,\n            rootedFileUrl`root/different/x/y/bar.js`),\n        `bar.js`);\n\n    // From an unmapped url to an unmapped url.\n    assert.deepEqual(\n        indirectResolver.relative(\n            rootedFileUrl`root/another/baz.html`,\n            rootedFileUrl`root/more/bonk.html`),\n        `../more/bonk.html`);\n  });\n\n  suite('integration', () => {\n    const testName = `handles resolving urls with a full mapping from deep ` +\n        `subdirs into a flatter runtime url space`;\n    test(testName, async () => {\n      const fsUrlResolver = new FsUrlResolver('/root');\n      const overlayLoader = new InMemoryOverlayUrlLoader();\n      overlayLoader.urlContentsMap.set(\n          fsUrlResolver.resolve(packageRelativeUrl`sub/package/foo/foo.html`)!,\n          `\n        <link rel=\"import\" href=\"../bar/bar.html\">\n        <link rel=\"stylesheet\" href=\"foo.css\">\n      `);\n      overlayLoader.urlContentsMap.set(\n          fsUrlResolver.resolve(packageRelativeUrl`sub/package/foo/foo.css`)!,\n          ``);\n      overlayLoader.urlContentsMap.set(\n          fsUrlResolver.resolve(packageRelativeUrl`different/x/y/bar.html`)!, `\n        <link rel=\"stylesheet\" href=\"./bar.css\">\n      `);\n      overlayLoader.urlContentsMap.set(\n          fsUrlResolver.resolve(packageRelativeUrl`different/x/y/bar.css`)!,\n          ``);\n      const analyzer = new Analyzer(\n          {urlLoader: overlayLoader, urlResolver: indirectResolver});\n      const analysis = await analyzer.analyze(['foo/foo.html']);\n      assert.deepEqual(\n          analysis.getWarnings().map(\n              (w) => w.toString({verbosity: 'code-only'})),\n          []);\n      const documents = analysis.getFeatures({kind: 'document'});\n      assert.deepEqual([...documents].map((d) => d.url), [\n        rootedFileUrl`root/sub/package/foo/foo.html`,\n        rootedFileUrl`root/different/x/y/bar.html`,\n        rootedFileUrl`root/different/x/y/bar.css`,\n        rootedFileUrl`root/sub/package/foo/foo.css`\n      ]);\n      const imports = analysis.getFeatures({kind: 'import'});\n      assert.deepEqual(\n          [...imports].map((i) => i.originalUrl),\n          ['../bar/bar.html', './bar.css', 'foo.css']);\n      assert.deepEqual([...imports].map((i) => i.url), [\n        rootedFileUrl`root/different/x/y/bar.html`,\n        rootedFileUrl`root/different/x/y/bar.css`,\n        rootedFileUrl`root/sub/package/foo/foo.css`\n      ]);\n    });\n  });\n});\n"]}