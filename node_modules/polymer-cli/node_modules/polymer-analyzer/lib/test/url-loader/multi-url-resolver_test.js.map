{"version":3,"sources":["../src/test/url-loader/multi-url-resolver_test.ts"],"names":[],"mappings":"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","file":"multi-url-resolver_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {FileRelativeUrl, PackageRelativeUrl, ResolvedUrl} from '../../model/url';\nimport {MultiUrlResolver} from '../../url-loader/multi-url-resolver';\nimport {UrlResolver} from '../../url-loader/url-resolver';\nimport {fileRelativeUrl, packageRelativeUrl, resolvedUrl} from '../test-utils';\n\nclass MockResolver extends UrlResolver {\n  packageUrl = resolvedUrl``;\n  resolveCount: number = 0;\n  relativeCount: number = 0;\n  constructor(private _resolution: string|null) {\n    super();\n  }\n\n  resolve(\n      firstUrl: ResolvedUrl|PackageRelativeUrl,\n      secondUrl?: FileRelativeUrl): ResolvedUrl|undefined {\n    const url = secondUrl || firstUrl;\n    ++this.resolveCount;\n    if (this._resolution && url === this._resolution) {\n      return this.brandAsResolved(this._resolution);\n    }\n    return undefined;\n  }\n\n  relative(to: ResolvedUrl): PackageRelativeUrl;\n  relative(from: ResolvedUrl, to: ResolvedUrl, kind?: string): FileRelativeUrl;\n  relative(fromOrTo: ResolvedUrl, maybeTo?: ResolvedUrl, _kind?: string):\n      FileRelativeUrl|PackageRelativeUrl {\n    const [from, to] = (maybeTo !== undefined) ? [fromOrTo, maybeTo] :\n                                                 [this.packageUrl, fromOrTo];\n    ++this.relativeCount;\n    const result = this.simpleUrlRelative(from, to);\n    if (maybeTo === undefined) {\n      return this.brandAsPackageRelative(result);\n    }\n    return result;\n  }\n}\n\nconst mockResolverArray = (resolutions: Array<string|null>) => {\n  return resolutions.map((resolution): MockResolver => {\n    return new MockResolver(resolution);\n  });\n};\n\n\nsuite('MultiUrlResolver', function() {\n  suite('resolve', () => {\n    test('only the first resolution is returned', () => {\n      const resolvers =\n          mockResolverArray(['file1.html', 'file2.html', 'file3.html']);\n      const resolver = new MultiUrlResolver(resolvers);\n      assert.equal(\n          resolver.resolve(packageRelativeUrl`file2.html`),\n          resolvedUrl`file2.html`);\n      // Verify only the first two resolvers are called\n      assert.equal(resolvers[0].resolveCount, 1);\n      assert.equal(resolvers[1].resolveCount, 1);\n      assert.equal(resolvers[2].resolveCount, 0);\n    });\n\n    test('keeps trying until it finds a good resolver', () => {\n      const resolvers = mockResolverArray([null, null, 'test.html']);\n      const resolver = new MultiUrlResolver(resolvers);\n      assert.equal(\n          resolver.resolve(resolvedUrl``, fileRelativeUrl`test.html`),\n          resolvedUrl`test.html`);\n      // Verify all resolvers are called\n      assert.equal(resolvers[0].resolveCount, 1);\n      assert.equal(resolvers[1].resolveCount, 1);\n      assert.equal(resolvers[2].resolveCount, 1);\n    });\n\n    test(`returns undefined if no resolver works`, () => {\n      const resolvers = mockResolverArray([null, null, null]);\n      const resolver = new MultiUrlResolver(resolvers);\n      assert.equal(\n          resolver.resolve(resolvedUrl``, fileRelativeUrl`test.html`),\n          undefined);\n      // Verify all resolvers are called.\n      assert.equal(resolvers[0].resolveCount, 1);\n      assert.equal(resolvers[1].resolveCount, 1);\n      assert.equal(resolvers[2].resolveCount, 1);\n    });\n  });\n\n  suite('relative', () => {\n    test('delegate the relative function based on resolve', () => {\n      const resolvers =\n          mockResolverArray(['file1.html', 'file2.html', 'file3.html']);\n      const resolver = new MultiUrlResolver(resolvers);\n      assert.equal(\n          resolver.relative(resolvedUrl`file2.html`),\n          packageRelativeUrl`file2.html`);\n      // Verify the first two resolvers are called.\n      assert.equal(resolvers[0].resolveCount, 1);\n      assert.equal(resolvers[1].resolveCount, 1);\n      assert.equal(resolvers[2].resolveCount, 0);\n      // Verify only the second resolver's `relative` is invoked.\n      assert.equal(resolvers[0].relativeCount, 0);\n      assert.equal(resolvers[1].relativeCount, 1);\n      assert.equal(resolvers[2].relativeCount, 0);\n    });\n  });\n});\n"]}