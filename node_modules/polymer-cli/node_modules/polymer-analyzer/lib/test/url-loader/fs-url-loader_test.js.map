{"version":3,"sources":["../src/test/url-loader/fs-url-loader_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,+BAA4B;AAC5B,6BAA6B;AAC7B,2CAA6B;AAG7B,kEAA2D;AAC3D,8CAA0C;AAE1C,KAAK,CAAC,aAAa,EAAE;IACnB,KAAK,CAAC,SAAS,EAAE,GAAG,EAAE;QACpB,IAAI,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC5D,aAAM,CAAC,MAAM,CAAC,IAAI,2BAAW,CAAC,KAAK,CAAC,CAAC,OAAO,CACxC,oBAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,EAAiB,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC9D,aAAM,CAAC,OAAO,CAAC,IAAI,2BAAW,CAAC,KAAK,CAAC,CAAC,OAAO,CACzC,oBAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,EAAiB,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACvD,aAAM,CAAC,OAAO,CAAC,IAAI,2BAAW,CAAC,OAAO,CAAC,CAAC,OAAO,CAC3C,wBAAW,CAAA,yBAAyB,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;YACpD,aAAM,CAAC,OAAO,CACV,IAAI,2BAAW,EAAE,CAAC,OAAO,CAAC,wBAAW,CAAA,oBAAoB,CAAC,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC5C,aAAM,CAAC,OAAO,CACV,IAAI,2BAAW,EAAE,CAAC,OAAO,CAAC,wBAAW,CAAA,yBAAyB,CAAC,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"fs-url-loader_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as path from 'path';\nimport Uri from 'vscode-uri';\n\nimport {ResolvedUrl} from '../../model/url';\nimport {FsUrlLoader} from '../../url-loader/fs-url-loader';\nimport {resolvedUrl} from '../test-utils';\n\nsuite('FsUrlLoader', function() {\n  suite('canLoad', () => {\n    test('canLoad is true for a local file URL inside root', () => {\n      assert.isTrue(new FsUrlLoader('/a/').canLoad(\n          Uri.file(path.resolve('/a/foo.html')).toString() as ResolvedUrl));\n    });\n\n    test('canLoad is false for a local file URL outside root', () => {\n      assert.isFalse(new FsUrlLoader('/a/').canLoad(\n          Uri.file(path.resolve('/b/foo.html')).toString() as ResolvedUrl));\n    });\n\n    test('canLoad is false for a file url with a host', () => {\n      assert.isFalse(new FsUrlLoader('/foo/').canLoad(\n          resolvedUrl`file://foo/foo/foo.html`));\n    });\n\n    test('canLoad is false for a relative path URL', () => {\n      assert.isFalse(\n          new FsUrlLoader().canLoad(resolvedUrl`../../foo/foo.html`));\n    });\n\n    test('canLoad is false for an http URL', () => {\n      assert.isFalse(\n          new FsUrlLoader().canLoad(resolvedUrl`http://abc.xyz/foo.html`));\n    });\n  });\n});\n"]}