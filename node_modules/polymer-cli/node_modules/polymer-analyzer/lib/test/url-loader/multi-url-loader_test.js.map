{"version":3,"sources":["../src/test/url-loader/multi-url-loader_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,+BAA4B;AAE5B,wEAAiE;AAEjE,8CAAyD;AAEzD;IAGE,YAAoB,KAAkB;QAAlB,UAAK,GAAL,KAAK,CAAa;QAFtC,iBAAY,GAAG,CAAC,CAAC;QACjB,cAAS,GAAG,CAAC,CAAC;IAEd,CAAC;IAED,OAAO,CAAC,IAAY;QAClB,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,OAAO,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC;IAC5B,CAAC;IAEK,IAAI,CAAC,GAAW;;YACpB,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;gBACtB,MAAM,IAAI,KAAK,CAAC,iBAAiB,GAAG,+BAA+B,CAAC,CAAC;aACtE;YACD,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;KAAA;CACF;AAED,MAAM,eAAe,GAAG,CAAC,KAAyB,EAAE,EAAE,CAClD,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAc,EAAE,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;AAE1D,KAAK,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC3B,KAAK,CAAC,SAAS,EAAE,GAAG,EAAE;QACpB,IAAI,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACvD,MAAM,OAAO,GAAG,eAAe,CAAC,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YAC1D,MAAM,MAAM,GAAG,IAAI,iCAAc,CAAC,OAAO,CAAC,CAAC;YAC3C,aAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,wBAAW,CAAA,WAAW,CAAC,CAAC,CAAC;YACtD,yCAAyC;YACzC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YACzC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YACzC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACtD,MAAM,OAAO,GAAG,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;YAC1D,MAAM,MAAM,GAAG,IAAI,iCAAc,CAAC,OAAO,CAAC,CAAC;YAC3C,aAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,wBAAW,CAAA,WAAW,CAAC,CAAC,CAAC;YACtD,gCAAgC;YAChC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YACzC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YACzC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACnD,MAAM,OAAO,GAAG,eAAe,CAAC,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;YACtE,MAAM,MAAM,GAAG,IAAI,iCAAc,CAAC,OAAO,CAAC,CAAC;YAC3C,aAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,wBAAW,CAAA,WAAW,CAAC,CAAC,CAAC;YACtD,yCAAyC;YACzC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YACzC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YACzC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACrD,MAAM,OAAO,GAAG,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YACpD,MAAM,MAAM,GAAG,IAAI,iCAAc,CAAC,OAAO,CAAC,CAAC;YAC3C,aAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,wBAAW,CAAA,WAAW,CAAC,CAAC,CAAC;YACvD,yCAAyC;YACzC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YACzC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YACzC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE;QACjB,IAAI,CAAC,oCAAoC,EAAE,GAAS,EAAE;YACpD,MAAM,OAAO,GAAG,eAAe,CAAC,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;YACtE,MAAM,MAAM,GAAG,IAAI,iCAAc,CAAC,OAAO,CAAC,CAAC;YAC3C,aAAM,CAAC,KAAK,CAAC,MAAM,MAAM,CAAC,IAAI,CAAC,wBAAW,CAAA,WAAW,CAAC,EAAE,UAAU,CAAC,CAAC;YACpE,yCAAyC;YACzC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YACzC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YACzC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAA,CAAC,CAAC;QAEH,IAAI,CAAC,kDAAkD,EAAE,GAAS,EAAE;YAClE,MAAM,OAAO,GAAG,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;YAC1D,MAAM,MAAM,GAAG,IAAI,iCAAc,CAAC,OAAO,CAAC,CAAC;YAC3C,aAAM,CAAC,KAAK,CAAC,MAAM,MAAM,CAAC,IAAI,CAAC,wBAAW,CAAA,WAAW,CAAC,EAAE,UAAU,CAAC,CAAC;YACpE,sCAAsC;YACtC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;YACtC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;YACtC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;QACxC,CAAC,CAAA,CAAC,CAAC;QAEH,IAAI,CAAC,mDAAmD,EAAE,GAAS,EAAE;YACnE,MAAM,OAAO,GAAG,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YACpD,MAAM,MAAM,GAAG,IAAI,iCAAc,CAAC,OAAO,CAAC,CAAC;YAC3C,MAAM,KAAK,GAAG,MAAM,0BAAa,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAW,CAAA,WAAW,CAAC,CAAC,CAAC;YACvE,aAAM,CAAC,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAChC,aAAM,CAAC,OAAO,CAAC,KAAM,CAAC,OAAQ,EAAE,0BAA0B,CAAC,CAAC;YAC5D,0CAA0C;YAC1C,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;YACtC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;YACtC,aAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;QACxC,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"multi-url-loader_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {MultiUrlLoader} from '../../url-loader/multi-url-loader';\nimport {UrlLoader} from '../../url-loader/url-loader';\nimport {invertPromise, resolvedUrl} from '../test-utils';\n\nclass MockLoader implements UrlLoader {\n  canLoadCount = 0;\n  loadCount = 0;\n  constructor(private _load: string|null) {\n  }\n\n  canLoad(_url: string): boolean {\n    this.canLoadCount++;\n    return this._load != null;\n  }\n\n  async load(url: string): Promise<string> {\n    if (this._load == null) {\n      throw new Error(`tried to load ${url} with loader that can\\'t load`);\n    }\n    this.loadCount++;\n    return this._load;\n  }\n}\n\nconst mockLoaderArray = (loads: Array<string|null>) =>\n    loads.map((load): MockLoader => new MockLoader(load));\n\nsuite('MultiUrlLoader', () => {\n  suite('canLoad', () => {\n    test('canLoad is true if the first loader is true', () => {\n      const loaders = mockLoaderArray(['loader 1', null, null]);\n      const loader = new MultiUrlLoader(loaders);\n      assert.isTrue(loader.canLoad(resolvedUrl`test.html`));\n      // Verify only the first loader is called\n      assert.equal(loaders[0].canLoadCount, 1);\n      assert.equal(loaders[1].canLoadCount, 0);\n      assert.equal(loaders[2].canLoadCount, 0);\n    });\n\n    test('canLoad is true if the last loader is true', () => {\n      const loaders = mockLoaderArray([null, null, 'loader 3']);\n      const loader = new MultiUrlLoader(loaders);\n      assert.isTrue(loader.canLoad(resolvedUrl`test.html`));\n      // Verify all loaders are called\n      assert.equal(loaders[0].canLoadCount, 1);\n      assert.equal(loaders[1].canLoadCount, 1);\n      assert.equal(loaders[2].canLoadCount, 1);\n    });\n\n    test('canLoad is true if all loaders are true', () => {\n      const loaders = mockLoaderArray(['loader 1', 'loader 2', 'loader 3']);\n      const loader = new MultiUrlLoader(loaders);\n      assert.isTrue(loader.canLoad(resolvedUrl`test.html`));\n      // Verify only the first loader is called\n      assert.equal(loaders[0].canLoadCount, 1);\n      assert.equal(loaders[1].canLoadCount, 0);\n      assert.equal(loaders[2].canLoadCount, 0);\n    });\n\n    test('canLoad is false if all loaders are false', () => {\n      const loaders = mockLoaderArray([null, null, null]);\n      const loader = new MultiUrlLoader(loaders);\n      assert.isFalse(loader.canLoad(resolvedUrl`test.html`));\n      // Verify only the first loader is called\n      assert.equal(loaders[0].canLoadCount, 1);\n      assert.equal(loaders[1].canLoadCount, 1);\n      assert.equal(loaders[2].canLoadCount, 1);\n    });\n  });\n\n  suite('load', () => {\n    test('returns only the first loaded file', async () => {\n      const loaders = mockLoaderArray(['loader 1', 'loader 2', 'loader 3']);\n      const loader = new MultiUrlLoader(loaders);\n      assert.equal(await loader.load(resolvedUrl`test.html`), 'loader 1');\n      // Verify only the first loader is called\n      assert.equal(loaders[0].canLoadCount, 1);\n      assert.equal(loaders[1].canLoadCount, 0);\n      assert.equal(loaders[2].canLoadCount, 0);\n    });\n\n    test('returns the file from first loader that can load', async () => {\n      const loaders = mockLoaderArray([null, null, 'loader 3']);\n      const loader = new MultiUrlLoader(loaders);\n      assert.equal(await loader.load(resolvedUrl`test.html`), 'loader 3');\n      // Verify only the last load is called\n      assert.equal(loaders[0].loadCount, 0);\n      assert.equal(loaders[1].loadCount, 0);\n      assert.equal(loaders[2].loadCount, 1);\n    });\n\n    test('throws an error if no loader can be found to load', async () => {\n      const loaders = mockLoaderArray([null, null, null]);\n      const loader = new MultiUrlLoader(loaders);\n      const error = await invertPromise(loader.load(resolvedUrl`test.html`));\n      assert.instanceOf(error, Error);\n      assert.include(error!.message!, 'Unable to load test.html');\n      // Verify load is not called on any loader\n      assert.equal(loaders[0].loadCount, 0);\n      assert.equal(loaders[1].loadCount, 0);\n      assert.equal(loaders[2].loadCount, 0);\n    });\n  });\n});\n"]}