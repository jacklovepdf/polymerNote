{"version":3,"sources":["../src/test/url-loader/redirect-resolver_test.ts"],"names":[],"mappings":"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","file":"redirect-resolver_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {RedirectResolver} from '../../url-loader/redirect-resolver';\nimport {packageRelativeUrl, resolvedUrl} from '../test-utils';\n\n\nsuite('RedirectResolver', function() {\n  suite('resolve', () => {\n    test('if prefix matches, url is rewritten', () => {\n      let resolver =\n          new RedirectResolver(resolvedUrl``, 'proto://site/', 'some/path/');\n      assert.equal(\n          resolver.resolve(packageRelativeUrl`proto://site/something.html`),\n          resolvedUrl`some/path/something.html`);\n      resolver = new RedirectResolver(resolvedUrl``, '/site/', 'some/path/');\n      assert.equal(\n          resolver.resolve(packageRelativeUrl`/site/something.html`),\n          resolvedUrl`some/path/something.html`);\n    });\n\n    test(`if prefix doesn't match, returns undefined`, () => {\n      const resolver =\n          new RedirectResolver(resolvedUrl``, 'proto://site/', 'some/path/');\n      assert.equal(\n          resolver.resolve(packageRelativeUrl`protoz://site/something.html`),\n          undefined);\n    });\n\n    test(`if url matches redirection target, returns url`, () => {\n      const resolver =\n          new RedirectResolver(resolvedUrl`/a/`, 'proto://site/', '/b/');\n      const resolved =\n          resolver.resolve(packageRelativeUrl`proto://site/page.html`)!;\n      assert.equal(resolved, resolvedUrl`/b/page.html`);\n      assert.equal(resolver.resolve(resolved), resolved);\n    });\n  });\n\n  suite('relative', () => {\n    test('if `to` is not in redirect-to, return as-is', () => {\n      const resolver = new RedirectResolver(\n          resolvedUrl`file:///src/a/`,\n          resolvedUrl`proto://site/`,\n          resolvedUrl`file:///src/b/`);\n      const relative = resolver.relative(resolvedUrl`file:///src/a/page.html`)!;\n      assert.equal(relative, packageRelativeUrl`page.html`);\n      assert.equal(\n          resolver.relative(resolvedUrl`file:///src/a/page.html`),\n          packageRelativeUrl`page.html`);\n    });\n\n    test('if `from` is not in redirect-to, un-redirect the `to`', () => {\n      const resolver = new RedirectResolver(\n          resolvedUrl`file:///src/a/`,\n          resolvedUrl`proto://site/`,\n          resolvedUrl`file:///src/b/`);\n      const relative = resolver.relative(resolvedUrl`file:///src/b/page.html`)!;\n      assert.equal(relative, packageRelativeUrl`proto://site/page.html`);\n      assert.equal(\n          resolver.relative(resolvedUrl`proto://site/page.html`),\n          packageRelativeUrl`proto://site/page.html`);\n    });\n  });\n});\n"]}