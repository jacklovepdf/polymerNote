{"version":3,"sources":["../src/test/test-utils.ts"],"names":[],"mappings":"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","file":"test-utils.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isCancel} from 'cancel-token';\nimport {assert} from 'chai';\nimport * as path from 'path';\nimport URI from 'vscode-uri';\n\nimport {Analyzer} from '../core/analyzer';\nimport {neverCancels} from '../core/cancel-token';\nimport {FileRelativeUrl, PackageRelativeUrl, ParsedDocument, ResolvedUrl, ScannedFeature, UrlResolver} from '../index';\nimport {makeParseLoader, SourceRange, Warning} from '../model/model';\nimport {scan} from '../scanning/scan';\nimport {Scanner} from '../scanning/scanner';\nimport {FsUrlLoader} from '../url-loader/fs-url-loader';\nimport {InMemoryOverlayUrlLoader} from '../url-loader/overlay-loader';\nimport {PackageUrlResolver} from '../url-loader/package-url-resolver';\nimport {UrlLoader} from '../url-loader/url-loader';\nimport {underlineCode} from '../warning/code-printer';\n\nexport class UnexpectedResolutionError<V = {} | null | undefined> extends\n    Error {\n  resolvedValue: V;\n  constructor(message: string, resolvedValue: V) {\n    super(message);\n    this.resolvedValue = resolvedValue;\n  }\n}\n\nexport async function invertPromise(promise: Promise<{}|null|undefined>):\n    Promise<Partial<Error>|null|undefined> {\n  let value: {}|null|undefined;\n  try {\n    value = await promise;\n  } catch (e) {\n    return e;\n  }\n  throw new UnexpectedResolutionError('Inverted Promise resolved', value);\n}\n\nexport type Reference = Warning|SourceRange|undefined;\n\n/**\n * Used for asserting that warnings or source ranges correspond to the right\n * parts of the source code.\n *\n * Non-test code probably wants WarningPrinter instead.\n */\nexport class CodeUnderliner {\n  private _parsedDocumentGetter: (url: string) => Promise<ParsedDocument>;\n  constructor(urlLoader: UrlLoader, urlResolver?: UrlResolver) {\n    const analyzer = new Analyzer({urlLoader, urlResolver});\n    this._parsedDocumentGetter = makeParseLoader(analyzer);\n  }\n\n  static withMapping(url: ResolvedUrl, contents: string) {\n    const urlLoader = new InMemoryOverlayUrlLoader();\n    urlLoader.urlContentsMap.set(url, contents);\n    return new CodeUnderliner(urlLoader, new class extends UrlResolver {\n      resolve(\n          firstUrl: ResolvedUrl|PackageRelativeUrl,\n          secondUrl?: FileRelativeUrl) {\n        return this.brandAsResolved(secondUrl || firstUrl);\n      }\n\n      relative(to: ResolvedUrl): PackageRelativeUrl;\n      relative(\n          from: ResolvedUrl, to: ResolvedUrl, kind?: string): FileRelativeUrl;\n      relative(): FileRelativeUrl|PackageRelativeUrl {\n        throw new Error('does not do relative');\n      }\n    }());\n  }\n\n  /**\n   * Converts one or more warnings/source ranges into underlined text.\n   *                                                  ~~~~~~~~~~ ~~~~\n   *\n   * This has a loose set of types that it will accept in order to make\n   * writing tests simple and legible.\n   */\n  async underline(reference: Reference): Promise<string>;\n  async underline(references: ReadonlyArray<Reference>):\n      Promise<ReadonlyArray<string>>;\n  async underline(reference: Reference|ReadonlyArray<Reference>):\n      Promise<string|ReadonlyArray<string>> {\n    if (reference === undefined) {\n      return 'No source range given.';\n    }\n\n    if ('length' in reference) {\n      return Promise.all(reference.map((ref) => this.underline(ref)));\n    }\n\n    if (isWarning(reference)) {\n      return '\\n' + reference.toString({verbosity: 'code-only', color: false});\n    }\n    // We have a reference without its parsed document. Go get it.\n    const parsedDocument = await this._parsedDocumentGetter(reference.file);\n    return '\\n' + underlineCode(reference, parsedDocument);\n  }\n}\n\nfunction isWarning(wOrS: Warning|SourceRange): wOrS is Warning {\n  return 'code' in wOrS;\n}\n\n/**\n * Run the given scanner on the given package relative url.\n *\n * The url must be loadable with the given analyzer.\n */\nexport async function runScanner(\n    analyzer: Analyzer,\n    scanner: Scanner<ParsedDocument, {}|null|undefined, {}>,\n    url: string): Promise<{features: ScannedFeature[], warnings: Warning[]}> {\n  const context = await analyzer['_analysisComplete'];\n  const resolvedUrl = analyzer.resolveUrl(url)!;\n  const parsedDocumentResult =\n      await context['_parse'](resolvedUrl, neverCancels);\n  if (parsedDocumentResult.successful === false) {\n    throw new Error(\n        `Error parsing document: ${parsedDocumentResult.error.message}`);\n  }\n  return scan(parsedDocumentResult.value, [scanner]);\n}\n\n/**\n * Run the given scanner on some file contents as a string.\n *\n * Note that the url's file extension is relevant, because it will affect how\n * the file is parsed.\n */\nexport async function runScannerOnContents(\n    scanner: Scanner<ParsedDocument, {}|null|undefined, {}>,\n    url: string,\n    contents: string) {\n  const overlayLoader = new InMemoryOverlayUrlLoader();\n  const analyzer = new Analyzer({urlLoader: overlayLoader});\n  overlayLoader.urlContentsMap.set(analyzer.resolveUrl(url)!, contents);\n  const {features, warnings} = await runScanner(analyzer, scanner, url);\n  return {features, warnings, analyzer, urlLoader: overlayLoader};\n}\n\nexport const noOpTag =\n    (strings: TemplateStringsArray, ...values: string[]): string =>\n        values.reduce(\n            (r: string, v: string, i) => r + String(v) + strings[i + 1],\n            strings[0]);\n\nexport function fileRelativeUrl(\n    strings: TemplateStringsArray, ...values: string[]): FileRelativeUrl {\n  return noOpTag(strings, ...values) as FileRelativeUrl;\n}\n\nexport function packageRelativeUrl(\n    strings: TemplateStringsArray, ...values: string[]): PackageRelativeUrl {\n  return noOpTag(strings, ...values) as PackageRelativeUrl;\n}\n\nexport function resolvedUrl(\n    strings: TemplateStringsArray, ...values: string[]): ResolvedUrl {\n  return noOpTag(strings, ...values) as ResolvedUrl;\n}\n\n/**\n * On posix systems file urls look like:\n *      file:///path/to/foo\n * On windows they look like:\n *      file:///c%3A/path/to/foo\n *\n * This will produce an OS-correct file url. Pretty much only useful for testing\n * url resolvers.\n */\nexport function rootedFileUrl(\n    strings: TemplateStringsArray, ...values: string[]): ResolvedUrl {\n  const root = URI.file(path.resolve('/')).toString();\n  const text = noOpTag(strings, ...values) as FileRelativeUrl;\n  return (root + text) as ResolvedUrl;\n}\n\nexport const fixtureDir = path.join(__dirname, '../../src/test/static');\nexport async function assertIsCancelled(promise: Promise<{}|null|undefined>):\n    Promise<void> {\n  const rejection = await invertPromise(promise);\n  assert.isTrue(isCancel(rejection), `Expected ${rejection} to be a Cancel.`);\n}\n\n/**\n * Returns an analyzer with configuration inferred for the given directory.\n *\n * Currently this just creates a simple analyzer with a Fs loader rooted\n * at the given directory, but in the future it may take configuration from\n * files including polymer.json or similar.\n */\nexport async function createForDirectory(dirname: string) {\n  const urlLoader = new FsUrlLoader(dirname);\n  const urlResolver = new PackageUrlResolver({packageDir: dirname});\n  const analyzer = new Analyzer({urlLoader, urlResolver});\n  const underliner = new CodeUnderliner(analyzer);\n  return {urlLoader, urlResolver, analyzer, underliner};\n}\n"]}