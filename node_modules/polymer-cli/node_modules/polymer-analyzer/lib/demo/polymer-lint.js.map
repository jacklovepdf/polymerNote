{"version":3,"sources":["../src/demo/polymer-lint.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,oCAAqE;AACrE,mDAAsD;AAEtD;;GAEG;AACH;;QACE,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;QAC9B,MAAM,EAAC,QAAQ,EAAC,GAAG,MAAM,+BAAkB,CAAC,OAAO,CAAC,CAAC;QACrD,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9D,MAAM,cAAc,GAAG,IAAI,sBAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC1D,MAAM,cAAc,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC7C,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC5E,IAAI,aAAa,KAAK,gBAAQ,CAAC,KAAK,EAAE;YACpC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACjB;IACH,CAAC;CAAA;AAED,qBACI,QAAkB,EAAE,SAAiB;;QACvC,MAAM,MAAM,GAAG,CAAC,MAAM,QAAQ,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAC5E,IAAI,MAAM,CAAC,UAAU,EAAE;YACrB,OAAO,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAC,CAAC,CAAC;SACpD;aAAM,IAAI,MAAM,CAAC,KAAK,KAAK,SAAS,EAAE;YACrC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACvB;aAAM;YACL,OAAO,EAAE,CAAC;SACX;IACH,CAAC;CAAA;AAED,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;IACnB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,CAAC;IAC/C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC","file":"polymer-lint.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Analyzer, Severity, Warning, WarningPrinter} from '../index';\nimport {createForDirectory} from '../test/test-utils';\n\n/**\n * A basic demo of a linter CLI using the Analyzer API.\n */\nasync function main() {\n  const basedir = process.cwd();\n  const {analyzer} = await createForDirectory(basedir);\n  const warnings = await getWarnings(analyzer, process.argv[2]);\n  const warningPrinter = new WarningPrinter(process.stderr);\n  await warningPrinter.printWarnings(warnings);\n  const worstSeverity = Math.min.apply(Math, warnings.map((w) => w.severity));\n  if (worstSeverity === Severity.ERROR) {\n    process.exit(1);\n  }\n}\n\nasync function getWarnings(\n    analyzer: Analyzer, localPath: string): Promise<Warning[]> {\n  const result = (await analyzer.analyze([localPath])).getDocument(localPath);\n  if (result.successful) {\n    return result.value.getWarnings({imported: false});\n  } else if (result.error !== undefined) {\n    return [result.error];\n  } else {\n    return [];\n  }\n}\n\nmain().catch((err) => {\n  console.error(err.stack || err.message || err);\n  process.exit(1);\n});\n"]}