{"version":3,"sources":["../src/html/html-style-scanner.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,4CAA4C;AAC5C,mCAA6C;AAE7C,0CAAmI;AAMnI,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;AAE1B,MAAM,cAAc,GAAG,CAAC,CAAC,GAAG,CACxB,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,EACrB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;AAExE,MAAM,WAAW,GAAG,CAAC,CAAC,GAAG,CACrB,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,EACpB,CAAC,CAAC,0BAA0B,CAAC,KAAK,EAAE,YAAY,CAAC,EACjD,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AAEvB,MAAM,WAAW,GAAG,CAAC,CAAC,EAAE,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;AAEtD;IACQ,IAAI,CACN,QAA4B,EAC5B,KAA8C;;YAChD,MAAM,QAAQ,GAA4C,EAAE,CAAC;YAE7D,MAAM,OAAO,GAAG,CAAO,IAAa,EAAE,EAAE;gBACtC,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE;oBACrB,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC9B,IAAI,OAAO,KAAK,MAAM,EAAE;wBACtB,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAqB,CAAC;wBACjE,QAAQ,CAAC,IAAI,CAAC,IAAI,qBAAa,CAC3B,YAAY,EACZ,IAAI,EACJ,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAE,EAClC,QAAQ,CAAC,4BAA4B,CAAC,IAAI,EAAE,MAAM,CAAE,EACpD,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,kBAAkB,EAAE,QAAQ,EAAC,EACtD,IAAI,CAAC,CAAC,CAAC;qBACZ;yBAAM;wBACL,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;wBAC3C,MAAM,cAAc,GAChB,6CAAqC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;wBAC1D,MAAM,WAAW,GAAG,8BAAsB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;wBACvD,QAAQ,CAAC,IAAI,CAAC,IAAI,6BAAqB,CACnC,KAAK,EACL,QAAQ,EACR,cAAc,EACd,WAAW,EACX,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAE,EAClC,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,kBAAkB,EAAE,QAAQ,EAAC,CAAC,CAAC,CAAC;qBAC9D;iBACF;gBACD,0BAA0B;gBAC1B,IAAI,IAAI,CAAC,OAAO,KAAK,UAAU,EAAE;oBAC/B,MAAM,OAAO,GAAG,qBAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;oBAC9D,IAAI,OAAO,EAAE;wBACX,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;4BACxC,OAAO,CAAC,CAAC,CAAC,CAAC;yBACZ;qBACF;iBACF;YACH,CAAC,CAAA,CAAC;YAEF,MAAM,KAAK,CAAC,OAAO,CAAC,CAAC;YAErB,OAAO,EAAC,QAAQ,EAAC,CAAC;QACpB,CAAC;KAAA;CACF;AA/CD,4CA+CC","file":"html-style-scanner.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as dom5 from 'dom5/lib/index-next';\nimport {ASTNode, treeAdapters} from 'parse5';\n\nimport {getAttachedCommentText, getLocationOffsetOfStartOfTextContent, ScannedImport, ScannedInlineDocument} from '../model/model';\nimport {FileRelativeUrl} from '../model/url';\n\nimport {HtmlVisitor, ParsedHtmlDocument} from './html-document';\nimport {HtmlScanner} from './html-scanner';\n\nconst p = dom5.predicates;\n\nconst isStyleElement = p.AND(\n    p.hasTagName('style'),\n    p.OR(p.NOT(p.hasAttr('type')), p.hasAttrValue('type', 'text/css')));\n\nconst isStyleLink = p.AND(\n    p.hasTagName('link'),\n    p.hasSpaceSeparatedAttrValue('rel', 'stylesheet'),\n    p.hasAttr('href'));\n\nconst isStyleNode = p.OR(isStyleElement, isStyleLink);\n\nexport class HtmlStyleScanner implements HtmlScanner {\n  async scan(\n      document: ParsedHtmlDocument,\n      visit: (visitor: HtmlVisitor) => Promise<void>) {\n    const features: (ScannedImport|ScannedInlineDocument)[] = [];\n\n    const visitor = async (node: ASTNode) => {\n      if (isStyleNode(node)) {\n        const tagName = node.nodeName;\n        if (tagName === 'link') {\n          const href = dom5.getAttribute(node, 'href')! as FileRelativeUrl;\n          features.push(new ScannedImport(\n              'html-style',\n              href,\n              document.sourceRangeForNode(node)!,\n              document.sourceRangeForAttributeValue(node, 'href')!,\n              {language: 'html', node, containingDocument: document},\n              true));\n        } else {\n          const contents = dom5.getTextContent(node);\n          const locationOffset =\n              getLocationOffsetOfStartOfTextContent(node, document);\n          const commentText = getAttachedCommentText(node) || '';\n          features.push(new ScannedInlineDocument(\n              'css',\n              contents,\n              locationOffset,\n              commentText,\n              document.sourceRangeForNode(node)!,\n              {language: 'html', node, containingDocument: document}));\n        }\n      }\n      // Descend into templates.\n      if (node.tagName === 'template') {\n        const content = treeAdapters.default.getTemplateContent(node);\n        if (content) {\n          for (const n of dom5.depthFirst(content)) {\n            visitor(n);\n          }\n        }\n      }\n    };\n\n    await visit(visitor);\n\n    return {features};\n  }\n}\n"]}