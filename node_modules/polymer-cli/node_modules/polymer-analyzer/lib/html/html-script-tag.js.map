{"version":3,"sources":["../src/html/html-script-tag.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,0CAA+J;AAE/J;;;;;GAKG;AACH,qBAA6B,SAAQ,cAAM;IAGzC,YACI,GAAgB,EAAE,WAA4B,EAAE,IAAY,EAC5D,QAA4B,EAAE,WAAkC,EAChE,cAAqC,EAAE,GAAkC,EACzE,QAAmB,EAAE,IAAa,EAAE,QAAiB;QACvD,KAAK,CACD,GAAG,EACH,WAAW,EACX,IAAI,EACJ,QAAQ,EACR,WAAW,EACX,cAAc,EACd,GAAG,EACH,QAAQ,EACR,IAAI,CAAC,CAAC;QAhBH,SAAI,GAAG,aAAa,CAAC;QAiB5B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;CACF;AApBD,0CAoBC;AAED,4BAAoC,SAAQ,qBAAa;IAGvD,YACI,GAAoB,EAAE,WAAwB,EAC9C,cAA2B,EAAE,GAAwB,EACrD,QAAiB;QACnB,KAAK,CAAC,aAAa,EAAE,GAAG,EAAE,WAAW,EAAE,cAAc,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;QACnE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,OAAO,CAAC,QAAkB;QACxB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,gEAAgE;YAChE,yDAAyD;YACzD,OAAO,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;SAChC;QACD,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QACxD,IAAI,IAAI,CAAC,GAAG,KAAK,SAAS,IAAI,WAAW,KAAK,SAAS,EAAE;YACvD,wEAAwE;YACxE,2BAA2B;YAC3B,OAAO,SAAS,CAAC;SAClB;QAED,yEAAyE;QACzE,wBAAwB;QAExB,4EAA4E;QAC5E,qEAAqE;QACrE,2CAA2C;QAC3C,qEAAqE;QACrE,0EAA0E;QAC1E,wDAAwD;QACxD,EAAE;QACF,6DAA6D;QAE7D,MAAM,eAAe,GACjB,QAAQ,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;QAC/D,IAAI,gBAAoC,CAAC;QACzC,IAAI,eAAe,KAAK,SAAS,EAAE;YACjC,4BAA4B;YAC5B,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;YACtC,gBAAgB,GAAG,SAAS,CAAC;SAC9B;aAAM;YACL,gBAAgB;gBACZ,IAAI,gBAAQ,CAAC,eAAe,EAAE,QAAQ,CAAC,gBAAgB,CAAC,CAAC;YAE7D,oEAAoE;YACpE,mEAAmE;YACnE,iEAAiE;YACjE,2DAA2D;YAC3D,+DAA+D;YAC/D,gEAAgE;YAChE,sEAAsE;YACtE,8BAA8B;YAC9B,MAAM,aAAa,GAAG,IAAI,6BAAqB,CAAC,QAAQ,CAAC,CAAC;YAC1D,gBAAgB,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;YAC5C,gBAAgB,CAAC,OAAO,EAAE,CAAC;SAC5B;QAED,OAAO,IAAI,CAAC,eAAe,CACvB,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC;IACzD,CAAC;IAES,eAAe,CACrB,WAAwB,EAAE,WAA4B,EACtD,gBAAoC,EAAE,mBAA6B;QACrE,OAAO,IAAI,eAAe,CACtB,WAAW,EACX,WAAW,EACX,IAAI,CAAC,IAAI,EACT,gBAAgB,EAChB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrB,CAAC;CACF;AA/ED,wDA+EC","file":"html-script-tag.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AstNodeWithLanguage, Document, DocumentBackreference, FileRelativeUrl, Import, ResolvedUrl, ScannedImport, SourceRange, Warning} from '../model/model';\n\n/**\n * <script> tags are represented in two different ways: as inline documents,\n * or as imports, depending on whether the tag has a `src` attribute. This class\n * represents a script tag with a `src` attribute as an import, so that the\n * analyzer loads and parses the referenced document.\n */\nexport class ScriptTagImport extends Import {\n  readonly type = 'html-script';\n  readonly isModule: boolean;\n  constructor(\n      url: ResolvedUrl, originalUrl: FileRelativeUrl, type: string,\n      document: Document|undefined, sourceRange: SourceRange|undefined,\n      urlSourceRange: SourceRange|undefined, ast: AstNodeWithLanguage|undefined,\n      warnings: Warning[], lazy: boolean, isModule: boolean) {\n    super(\n        url,\n        originalUrl,\n        type,\n        document,\n        sourceRange,\n        urlSourceRange,\n        ast,\n        warnings,\n        lazy);\n    this.isModule = isModule;\n  }\n}\n\nexport class ScannedScriptTagImport extends ScannedImport {\n  // True iff this is a type=\"module\" script tag import.\n  readonly isModule: boolean;\n  constructor(\n      url: FileRelativeUrl, sourceRange: SourceRange,\n      urlSourceRange: SourceRange, ast: AstNodeWithLanguage,\n      isModule: boolean) {\n    super('html-script', url, sourceRange, urlSourceRange, ast, false);\n    this.isModule = isModule;\n  }\n\n  resolve(document: Document) {\n    if (this.isModule) {\n      // Module script imports are just normal imports, they shouldn't\n      // depend on globals that any HTML context might involve.\n      return super.resolve(document);\n    }\n    const resolvedUrl = this.getLoadableUrlOrWarn(document);\n    if (this.url === undefined || resolvedUrl === undefined) {\n      // Warning will already have been added to the document if necessary, so\n      // we can just return here.\n      return undefined;\n    }\n\n    // TODO(justinfagnani): warn if the same URL is loaded from more than one\n    // non-module script tag\n\n    // TODO(justinfagnani): Use the analyzer cache, since this is duplicating an\n    // analysis of the external script, but the document the analyzer has\n    // doesn't have its container as a feature.\n    // A better design might be to have the import itself be in charge of\n    // producing document objects. This will fit better with JS modules, where\n    // the type attribute drives how the document is parsed.\n    //\n    // See https://github.com/Polymer/polymer-analyzer/issues/615\n\n    const scannedDocument =\n        document._analysisContext._getScannedDocument(resolvedUrl);\n    let importedDocument: Document|undefined;\n    if (scannedDocument === undefined) {\n      // not found or syntax error\n      this.addCouldNotLoadWarning(document);\n      importedDocument = undefined;\n    } else {\n      importedDocument =\n          new Document(scannedDocument, document._analysisContext);\n\n      // Scripts regularly make use of global variables or functions (e.g.\n      // `Polymer()`, `$('#some-id')`, etc) that are defined in libraries\n      // which are loaded via prior script tags or HTML imports.  Since\n      // JavaScript defined within `<script>` tags or loaded by a\n      // `<script src=...>` share scope with other scripts previously\n      // loaded by the page, this synthetic import is added to support\n      // queries for features of the HTML document which should be \"visible\"\n      // to the JavaScript document.\n      const backReference = new DocumentBackreference(document);\n      importedDocument._addFeature(backReference);\n      importedDocument.resolve();\n    }\n\n    return this.constructImport(\n        resolvedUrl, this.url, importedDocument, document);\n  }\n\n  protected constructImport(\n      resolvedUrl: ResolvedUrl, relativeUrl: FileRelativeUrl,\n      importedDocument: Document|undefined, _containingDocument: Document) {\n    return new ScriptTagImport(\n        resolvedUrl,\n        relativeUrl,\n        this.type,\n        importedDocument,\n        this.sourceRange,\n        this.urlSourceRange,\n        this.astNode,\n        this.warnings,\n        this.lazy,\n        this.isModule);\n  }\n}\n"]}