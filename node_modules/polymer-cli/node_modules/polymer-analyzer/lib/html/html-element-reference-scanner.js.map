{"version":3,"sources":["../src/html/html-element-reference-scanner.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,4CAA4C;AAC5C,mCAA6C;AAC7C,kEAAmE;AAInE,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;AAEvE;;;;;GAKG;AACH;IACE,OAAO,CAAC,IAAa;QACnB,OAAO,CAAC,CAAC,IAAI,CAAC;IAChB,CAAC;IAEK,IAAI,CACN,QAA4B,EAC5B,KAA8C;;YAChD,MAAM,QAAQ,GAA8B,EAAE,CAAC;YAE/C,MAAM,OAAO,GAAG,CAAC,IAAa,EAAE,EAAE;gBAChC,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACtC,MAAM,OAAO,GAAG,IAAI,2CAAuB,CACvC,IAAI,CAAC,OAAO,EACZ,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAE,EAClC,EAAC,QAAQ,EAAE,MAAM,EAAE,kBAAkB,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;oBAE5D,IAAI,IAAI,CAAC,KAAK,EAAE;wBACd,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;4BAC7B,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE;gCAChC,IAAI,EAAE,IAAI,CAAC,IAAI;gCACf,KAAK,EAAE,IAAI,CAAC,KAAK;gCACjB,WAAW,EAAE,QAAQ,CAAC,uBAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAE;gCAC/D,eAAe,EACX,QAAQ,CAAC,2BAA2B,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAE;gCAC1D,gBAAgB,EACZ,QAAQ,CAAC,4BAA4B,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC;6BAC3D,CAAC,CAAC;yBACJ;qBACF;oBAED,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACxB;gBAED,0BAA0B;gBAC1B,IAAI,IAAI,CAAC,OAAO,KAAK,UAAU,EAAE;oBAC/B,MAAM,OAAO,GAAG,qBAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;oBAC9D,IAAI,OAAO,EAAE;wBACX,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;4BACxC,OAAO,CAAC,CAAC,CAAC,CAAC;yBACZ;qBACF;iBACF;YACH,CAAC,CAAC;YAEF,MAAM,KAAK,CAAC,OAAO,CAAC,CAAC;YAErB,OAAO,EAAC,QAAQ,EAAE,QAAQ,EAAC,CAAC;QAC9B,CAAC;KAAA;CACF;AAjDD,kEAiDC;AAED;;;;GAIG;AACH,uCAA+C,SAC3C,2BAA2B;IAC7B,OAAO,CAAC,IAAa;QACnB,OAAO,eAAe,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,KAAK,YAAY,CAAC;IACjE,CAAC;CACF;AALD,8EAKC","file":"html-element-reference-scanner.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as dom5 from 'dom5/lib/index-next';\nimport {ASTNode, treeAdapters} from 'parse5';\nimport {ScannedElementReference} from '../model/element-reference';\nimport {HtmlVisitor, ParsedHtmlDocument} from './html-document';\nimport {HtmlScanner} from './html-scanner';\n\nconst isCustomElement = dom5.predicates.hasMatchingTagName(/(.+-)+.+/);\n\n/**\n * Scans for HTML element references/uses in a given document.\n * All elements will be detected, including anything in <head>.\n * This scanner will not be loaded by default, but the custom\n * element extension of it will be.\n */\nexport class HtmlElementReferenceScanner implements HtmlScanner {\n  matches(node: ASTNode): boolean {\n    return !!node;\n  }\n\n  async scan(\n      document: ParsedHtmlDocument,\n      visit: (visitor: HtmlVisitor) => Promise<void>) {\n    const elements: ScannedElementReference[] = [];\n\n    const visitor = (node: ASTNode) => {\n      if (node.tagName && this.matches(node)) {\n        const element = new ScannedElementReference(\n            node.tagName,\n            document.sourceRangeForNode(node)!,\n            {language: 'html', containingDocument: document, node});\n\n        if (node.attrs) {\n          for (const attr of node.attrs) {\n            element.attributes.set(attr.name, {\n              name: attr.name,\n              value: attr.value,\n              sourceRange: document.sourceRangeForAttribute(node, attr.name)!,\n              nameSourceRange:\n                  document.sourceRangeForAttributeName(node, attr.name)!,\n              valueSourceRange:\n                  document.sourceRangeForAttributeValue(node, attr.name)\n            });\n          }\n        }\n\n        elements.push(element);\n      }\n\n      // Descend into templates.\n      if (node.tagName === 'template') {\n        const content = treeAdapters.default.getTemplateContent(node);\n        if (content) {\n          for (const n of dom5.depthFirst(content)) {\n            visitor(n);\n          }\n        }\n      }\n    };\n\n    await visit(visitor);\n\n    return {features: elements};\n  }\n}\n\n/**\n * Scans for custom element references/uses.\n * All custom elements will be detected except <dom-module>.\n * This is a default scanner.\n */\nexport class HtmlCustomElementReferenceScanner extends\n    HtmlElementReferenceScanner {\n  matches(node: ASTNode): boolean {\n    return isCustomElement(node) && node.nodeName !== 'dom-module';\n  }\n}\n"]}