{"version":3,"sources":["../src/html/html-parser.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,+BAAmD;AACnD,4CAA4C;AAC5C,mCAA0C;AAO1C,mDAAmD;AAEnD;IACE;;;;;OAKG;IACH,KAAK,CACD,QAAgB,EAAE,GAAgB,EAAE,WAAwB,EAC5D,UAA0B;QAC5B,MAAM,GAAG,GAAG,cAAS,CAAC,QAAQ,EAAE,EAAC,YAAY,EAAE,IAAI,EAAC,CAAC,CAAC;QAEtD,2EAA2E;QAC3E,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CACtB,GAAG,EACH,iBAAC,CAAC,GAAG,CACD,iBAAC,CAAC,aAAa,CAAC,iBAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EACrC,iBAAC,CAAC,UAAU,CAAC,MAAM,CAAC,EACpB,iBAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAE5B,MAAM,QAAQ,GAAG,CAAC,CAAC,UAAU,CAAC;QAC9B,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;QAE9B,IAAI,OAAO,GACP,UAAU,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;QAChE,IAAI,OAAO,EAAE;YACX,MAAM,WAAW,GAAG,mBAAY,CAAC,OAAO,EAAE,MAAM,CAAqB,CAAC;YACtE,MAAM,mBAAmB,GACrB,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;YACrD,IAAI,mBAAmB,KAAK,SAAS,EAAE;gBACrC,OAAO,GAAG,mBAAmB,CAAC;aAC/B;SACF;QAED,OAAO,IAAI,kCAAkB,CAAC;YAC5B,GAAG;YACH,OAAO;YACP,QAAQ;YACR,GAAG;YACH,cAAc,EAAE,UAAU,CAAC,cAAc;YACzC,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,QAAQ;SACT,CAAC,CAAC;IACL,CAAC;CACF;AA5CD,gCA4CC","file":"html-parser.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {getAttribute, predicates as p} from 'dom5';\nimport * as dom5 from 'dom5/lib/index-next';\nimport {parse as parseHtml} from 'parse5';\n\nimport {InlineDocInfo} from '../model/model';\nimport {FileRelativeUrl, ResolvedUrl} from '../model/url';\nimport {Parser} from '../parser/parser';\nimport {UrlResolver} from '../url-loader/url-resolver';\n\nimport {ParsedHtmlDocument} from './html-document';\n\nexport class HtmlParser implements Parser<ParsedHtmlDocument> {\n  /**\n   * Parse html into ASTs.\n   *\n   * @param {string} htmlString an HTML document.\n   * @param {string} href is the path of the document.\n   */\n  parse(\n      contents: string, url: ResolvedUrl, urlResolver: UrlResolver,\n      inlineInfo?: InlineDocInfo): ParsedHtmlDocument {\n    const ast = parseHtml(contents, {locationInfo: true});\n\n    // There should be at most one <base> tag and it must be inside <head> tag.\n    const baseTag = dom5.query(\n        ast,\n        p.AND(\n            p.parentMatches(p.hasTagName('head')),\n            p.hasTagName('base'),\n            p.hasAttr('href')));\n\n    const isInline = !!inlineInfo;\n    inlineInfo = inlineInfo || {};\n\n    let baseUrl: ResolvedUrl =\n        inlineInfo.baseUrl !== undefined ? inlineInfo.baseUrl : url;\n    if (baseTag) {\n      const baseTagHref = getAttribute(baseTag, 'href')! as FileRelativeUrl;\n      const resolvedBaseTagHref =\n          urlResolver.resolve(url, baseTagHref, undefined);\n      if (resolvedBaseTagHref !== undefined) {\n        baseUrl = resolvedBaseTagHref;\n      }\n    }\n\n    return new ParsedHtmlDocument({\n      url,\n      baseUrl,\n      contents,\n      ast,\n      locationOffset: inlineInfo.locationOffset,\n      astNode: inlineInfo.astNode,\n      isInline,\n    });\n  }\n}\n"]}