{"version":3,"sources":["../src/html/html-import-scanner.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,4CAA4C;AAE5C,0CAA6C;AAM7C,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;AAE1B,MAAM,OAAO,GAAG,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AACrC,MAAM,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;AAExD,MAAM,gBAAgB,GAAG,CAAC,CAAC,GAAG,CAC1B,OAAO,EACP,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EACjB,CAAC,CAAC,0BAA0B,CAAC,KAAK,EAAE,QAAQ,CAAC,EAC7C,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,0BAA0B,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC,EACzD,UAAU,EACV,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;AAEtD,MAAM,gBAAgB,GAAG,CAAC,CAAC,GAAG,CAC1B,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,EACpB,CAAC,CAAC,0BAA0B,CAAC,KAAK,EAAE,aAAa,CAAC,EAClD,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EACjB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,0BAA0B,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,EACpD,UAAU,EACV,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;AAEtD;;GAEG;AACH;IACE,YAAoB,UAAmD;QAAnD,eAAU,GAAV,UAAU,CAAyC;IACvE,CAAC;IAEK,IAAI,CACN,QAA4B,EAC5B,KAA8C;;YAChD,MAAM,OAAO,GAAoB,EAAE,CAAC;YAEpC,MAAM,IAAI,GAAG,aAAa,CAAC;YAC3B,MAAM,KAAK,CAAC,CAAC,IAAI,EAAE,EAAE;gBACnB,IAAI,IAAa,CAAC;gBAClB,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE;oBAC1B,IAAI,GAAG,KAAK,CAAC;iBACd;qBAAM,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE;oBACjC,IAAI,GAAG,IAAI,CAAC;iBACb;qBAAM;oBACL,OAAO;iBACR;gBACD,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAqB,CAAC;gBACjE,OAAO,CAAC,IAAI,CAAC,IAAI,qBAAa,CAC1B,IAAI,EACJ,IAAI,EACJ,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAE,EAClC,QAAQ,CAAC,4BAA4B,CAAC,IAAI,EAAE,MAAM,CAAE,EACpD,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,kBAAkB,EAAE,QAAQ,EAAC,EACtD,IAAI,CAAC,CAAC,CAAC;YACb,CAAC,CAAC,CAAC;YACH,IAAI,IAAI,CAAC,UAAU,EAAE;gBACnB,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAChD,IAAI,KAAK,EAAE;oBACT,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;wBACxB,OAAO,CAAC,IAAI,CAAC,IAAI,qBAAa,CAC1B,IAAI;wBACJ,gCAAgC;wBAChC,IAAiC,EACjC,SAAS,EACT,SAAS,EACT,SAAS,EACT,IAAI,CAAC,CAAC,CAAC;qBACZ;iBACF;aACF;YACD,OAAO,EAAC,QAAQ,EAAE,OAAO,EAAC,CAAC;QAC7B,CAAC;KAAA;CACF;AA7CD,8CA6CC","file":"html-import-scanner.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as dom5 from 'dom5/lib/index-next';\n\nimport {ScannedImport} from '../model/model';\nimport {FileRelativeUrl, PackageRelativeUrl, ResolvedUrl} from '../model/url';\n\nimport {HtmlVisitor, ParsedHtmlDocument} from './html-document';\nimport {HtmlScanner} from './html-scanner';\n\nconst p = dom5.predicates;\n\nconst linkTag = p.hasTagName('link');\nconst notCssLink = p.NOT(p.hasAttrValue('type', 'css'));\n\nconst isHtmlImportNode = p.AND(\n    linkTag,\n    p.hasAttr('href'),\n    p.hasSpaceSeparatedAttrValue('rel', 'import'),\n    p.NOT(p.hasSpaceSeparatedAttrValue('rel', 'lazy-import')),\n    notCssLink,\n    p.NOT(p.parentMatches(p.hasTagName('template'))));\n\nconst isLazyImportNode = p.AND(\n    p.hasTagName('link'),\n    p.hasSpaceSeparatedAttrValue('rel', 'lazy-import'),\n    p.hasAttr('href'),\n    p.NOT(p.hasSpaceSeparatedAttrValue('rel', 'import')),\n    notCssLink,\n    p.NOT(p.parentMatches(p.hasTagName('template'))));\n\n/**\n * Scans for <link rel=\"import\"> and <link rel=\"lazy-import\">\n */\nexport class HtmlImportScanner implements HtmlScanner {\n  constructor(private _lazyEdges?: Map<ResolvedUrl, PackageRelativeUrl[]>) {\n  }\n\n  async scan(\n      document: ParsedHtmlDocument,\n      visit: (visitor: HtmlVisitor) => Promise<void>) {\n    const imports: ScannedImport[] = [];\n\n    const type = 'html-import';\n    await visit((node) => {\n      let lazy: boolean;\n      if (isHtmlImportNode(node)) {\n        lazy = false;\n      } else if (isLazyImportNode(node)) {\n        lazy = true;\n      } else {\n        return;\n      }\n      const href = dom5.getAttribute(node, 'href')! as FileRelativeUrl;\n      imports.push(new ScannedImport(\n          type,\n          href,\n          document.sourceRangeForNode(node)!,\n          document.sourceRangeForAttributeValue(node, 'href')!,\n          {language: 'html', node, containingDocument: document},\n          lazy));\n    });\n    if (this._lazyEdges) {\n      const edges = this._lazyEdges.get(document.url);\n      if (edges) {\n        for (const edge of edges) {\n          imports.push(new ScannedImport(\n              type,\n              // This cast is very suspicious.\n              edge as string as FileRelativeUrl,\n              undefined,\n              undefined,\n              undefined,\n              true));\n        }\n      }\n    }\n    return {features: imports};\n  }\n}\n"]}