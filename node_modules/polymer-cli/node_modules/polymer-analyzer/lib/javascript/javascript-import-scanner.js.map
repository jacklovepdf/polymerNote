{"version":3,"sources":["../src/javascript/javascript-import-scanner.ts"],"names":[],"mappings":"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","file":"javascript-import-scanner.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as babel from '@babel/types';\nimport {parseURL, URL} from 'whatwg-url';\n\nimport {Document, FileRelativeUrl, Import, JsAstNode, ResolvedUrl, ScannedImport, Severity, Warning} from '../model/model';\n\nimport {Visitor} from './estree-visitor';\nimport * as esutil from './esutil';\nimport {JavaScriptDocument} from './javascript-document';\nimport {JavaScriptScanner} from './javascript-scanner';\nimport {resolve} from './resolve-specifier-node';\n\nimport isWindows = require('is-windows');\nimport {SourceRange} from '../model/model';\nimport {DeclaredWithStatement} from '../model/document';\n\nconst isPathSpecifier = (s: string) => /^\\.{0,2}\\//.test(s);\n\nexport interface JavaScriptImportScannerOptions {\n  /**\n   * Algorithm to use for resolving module specifiers in import\n   * and export statements when converting them to URLs.\n   * A value of 'node' uses Node.js resolution to find modules.\n   *\n   * If this argument is not given, module specifiers must be web-compatible\n   * urls.\n   */\n  moduleResolution?: 'node';\n}\n\nexport type ImportNode = babel.ImportDeclaration|babel.CallExpression|\n                         babel.ExportAllDeclaration|\n                         babel.ExportNamedDeclaration;\n\nexport class ScannedJavascriptImport extends ScannedImport {\n  readonly type!: 'js-import';\n\n  // The original text of the specifier. Unlike `this.url`, this may not\n  // be a URL, but may be a bare module specifier, like 'jquery'.\n  readonly specifier: string;\n\n  readonly statementAst: babel.Statement|undefined;\n  readonly astNode: JsAstNode<ImportNode>;\n\n  constructor(\n      url: FileRelativeUrl|undefined, sourceRange: SourceRange|undefined,\n      urlSourceRange: SourceRange|undefined, ast: JsAstNode<ImportNode>,\n      lazy: boolean, originalSpecifier: string,\n      statementAst: babel.Statement|undefined) {\n    super('js-import', url, sourceRange, urlSourceRange, ast, lazy);\n    this.specifier = originalSpecifier;\n    this.statementAst = statementAst;\n    this.astNode = ast;\n  }\n\n  protected constructImport(\n      resolvedUrl: ResolvedUrl, relativeUrl: FileRelativeUrl,\n      importedDocument: Document|undefined, _containingDocument: Document) {\n    return new JavascriptImport(\n        resolvedUrl,\n        relativeUrl,\n        this.type,\n        importedDocument,\n        this.sourceRange,\n        this.urlSourceRange,\n        this.astNode,\n        this.warnings,\n        this.lazy,\n        this.specifier,\n        this.statementAst);\n  }\n}\n\ndeclare module '../model/queryable' {\n  interface FeatureKindMap {\n    'js-import': JavascriptImport;\n  }\n}\nexport class JavascriptImport extends Import implements DeclaredWithStatement {\n  /**\n   * The original text of the specifier. Unlike `this.url`, this may not\n   * be a URL, but may be a bare module specifier, like 'jquery'.\n   */\n  readonly specifier: string;\n  readonly statementAst: babel.Statement|undefined;\n  readonly astNode: JsAstNode<ImportNode>;\n\n  constructor(\n      url: ResolvedUrl, originalUrl: FileRelativeUrl, type: string,\n      document: Document|undefined, sourceRange: SourceRange|undefined,\n      urlSourceRange: SourceRange|undefined, ast: JsAstNode<ImportNode>,\n      warnings: Warning[], lazy: boolean, specifier: string,\n      statementAst: babel.Statement|undefined) {\n    super(\n        url,\n        originalUrl,\n        type,\n        document,\n        sourceRange,\n        urlSourceRange,\n        ast,\n        warnings,\n        lazy);\n    this.specifier = specifier;\n    this.statementAst = statementAst;\n    this.astNode = ast;\n  }\n}\n\nexport class JavaScriptImportScanner implements JavaScriptScanner {\n  moduleResolution?: 'node';\n  constructor(options?: JavaScriptImportScannerOptions) {\n    this.moduleResolution = options && options.moduleResolution;\n  }\n\n  async scan(\n      document: JavaScriptDocument,\n      visit: (visitor: Visitor) => Promise<void>) {\n    const imports: ScannedJavascriptImport[] = [];\n    const warnings: Warning[] = [];\n    const scanner = this;\n\n    await visit({\n      enterCallExpression(node, _, path) {\n        // TODO(usergenic): There's no babel.Import type or babel.isImport()\n        // function right now, we have to just check the type property\n        // here until there is; please change to use babel.isImport(node.callee)\n        // once it is a thing.\n        if (node.callee.type as string !== 'Import') {\n          return;\n        }\n        if (node.arguments.length !== 1) {\n          warnings.push(new Warning({\n            message: 'Malformed import',\n            sourceRange: document.sourceRangeForNode(node)!,\n            severity: Severity.WARNING,\n            code: 'malformed-import',\n            parsedDocument: document,\n          }));\n          return;\n        }\n        const arg = node.arguments[0];\n        if (arg.type !== 'StringLiteral') {\n          warnings.push(new Warning({\n            message:\n                'Cannot analyze dynamic imports with non-literal arguments',\n            sourceRange: document.sourceRangeForNode(node)!,\n            severity: Severity.WARNING,\n            code: 'non-literal-import',\n            parsedDocument: document,\n          }));\n          return;\n        }\n        const specifier = arg.value as string;\n        imports.push(new ScannedJavascriptImport(\n            scanner._resolveSpecifier(specifier, document, node, warnings),\n            document.sourceRangeForNode(node)!,\n            document.sourceRangeForNode(node.callee)!,\n            {language: 'js', node, containingDocument: document},\n            true,\n            specifier,\n            esutil.getCanonicalStatement(path)));\n      },\n\n      enterImportDeclaration(node, _, path) {\n        const specifier = node.source.value;\n        imports.push(new ScannedJavascriptImport(\n            scanner._resolveSpecifier(specifier, document, node, warnings),\n            document.sourceRangeForNode(node)!,\n            document.sourceRangeForNode(node.source)!,\n            {language: 'js', node, containingDocument: document},\n            false,\n            specifier,\n            esutil.getCanonicalStatement(path)));\n      },\n\n      enterExportAllDeclaration(node, _parent, path) {\n        const specifier = node.source.value;\n        imports.push(new ScannedJavascriptImport(\n            scanner._resolveSpecifier(specifier, document, node, warnings),\n            document.sourceRangeForNode(node)!,\n            document.sourceRangeForNode(node.source)!,\n            {language: 'js', node, containingDocument: document},\n            false,\n            specifier,\n            esutil.getCanonicalStatement(path)));\n      },\n\n      enterExportNamedDeclaration(node, _parent, path) {\n        if (node.source == null) {\n          return;\n        }\n        const specifier = node.source.value;\n        imports.push(new ScannedJavascriptImport(\n            scanner._resolveSpecifier(specifier, document, node, warnings),\n            document.sourceRangeForNode(node)!,\n            document.sourceRangeForNode(node.source)!,\n            {language: 'js', node, containingDocument: document},\n            false,\n            specifier,\n            esutil.getCanonicalStatement(path)));\n      }\n\n    });\n    return {features: imports, warnings};\n  }\n\n  private _resolveSpecifier(\n      specifier: string, document: JavaScriptDocument, node: babel.Node,\n      warnings: Warning[]): FileRelativeUrl|undefined {\n    if (parseURL(specifier) !== null) {\n      return specifier as FileRelativeUrl;\n    }\n    const documentURL = new URL(document.baseUrl);\n    if (documentURL.protocol !== 'file:') {\n      warnings.push(new Warning({\n        message: 'Cannot resolve module specifier in non-local document',\n        sourceRange: document.sourceRangeForNode(node)!,\n        severity: Severity.WARNING,\n        code: 'cant-resolve-module-specifier',\n        parsedDocument: document,\n      }));\n      return undefined;\n    }\n\n    let documentPath = decodeURIComponent(documentURL.pathname);\n    if (isWindows() && documentPath.startsWith('/')) {\n      documentPath = documentPath.substring(1);\n    }\n\n    if (this.moduleResolution === 'node') {\n      try {\n        // TODO (justinfagnani): we need to pass packageName and componentDir,\n        // or maybe the UrlResolver, to get correct relative URLs for\n        // named imports from the root package to its dependencies\n        return resolve(specifier, documentPath);\n      } catch (e) {\n        // If the specifier was a name, we'll emit a warning below.\n      }\n    }\n\n    if (isPathSpecifier(specifier)) {\n      return specifier as FileRelativeUrl;\n    }\n\n    warnings.push(new Warning({\n      message: 'Cannot resolve module specifier with resolution algorithm: ' +\n          (this.moduleResolution || 'none'),\n      sourceRange: document.sourceRangeForNode(node)!,\n      severity: Severity.WARNING,\n      code: 'cant-resolve-module-specifier',\n      parsedDocument: document,\n    }));\n    return undefined;\n  }\n}\n"]}