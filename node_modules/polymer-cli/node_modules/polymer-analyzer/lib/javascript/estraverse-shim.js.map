{"version":3,"sources":["../src/javascript/estraverse-shim.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH;;;;;;;GAOG;AAEH,8CAA4C;AAE5C,sCAAsC;AAGtC;;;GAGG;AACH,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,8BAAa,CAAA;IACb,gCAAe,CAAA;IACf,kCAAiB,CAAA;AACnB,CAAC,EAJW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAIxB;AAED;;;;;;;GAOG;AACH,kBAAyB,GAAe,EAAE,OAAgB;IACxD,kBAAa,CAAC,GAAG,EAAE;QACjB,KAAK,CAAC,IAAI;YACR,oBAAoB,CAChB,CAAC,OAAO,EAAE,QAAQ,IAAI,CAAC,IAAI,EAAmB,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QACtE,CAAC;QAED,IAAI,CAAC,IAAI;YACP,oBAAoB,CAChB,CAAC,OAAO,EAAE,QAAQ,IAAI,CAAC,IAAI,EAAmB,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QACtE,CAAC;QACD,OAAO,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC;KAC5B,CAAC,CAAC;AACL,CAAC;AAbD,4BAaC;AAED;;;;;GAKG;AACH,8BACI,WAAiC,EACjC,IAA0B,EAC1B,OAAgB;IAClB,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;QACpC,IAAI,OAAO,OAAO,CAAC,UAAU,CAAC,KAAK,UAAU,EAAE;YAC7C,qDAAqD;YACrD,MAAM,MAAM,GAAI,OAAO,CAAC,UAAU,CAAkC,CAC/D,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YACnC,QAAQ,MAAM,EAAE;gBACd,KAAK,aAAa,CAAC,KAAK;oBACtB,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;gBACrB,KAAK,aAAa,CAAC,IAAI;oBACrB,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;gBACrB,KAAK,aAAa,CAAC,MAAM;oBACvB,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;aACxB;SACF;KACF;AACH,CAAC","file":"estraverse-shim.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * TODO(usergenic): Immediately deprecate this. This `estraverse-shim` module\n * exists solely to make the transition from `espree/estree` JavaScript parser\n * to `babylon/babel` and tooling a gradual/piecemeal affair.  It is intended as\n * a temporary shim that will eventually be removed once all dependent\n * scanners/visitors and utility functions which use the old `estraverse` style\n * methods are converted to `babel-traverse` etc.\n */\n\nimport babelTraverse from '@babel/traverse';\nimport {NodePath} from '@babel/traverse';\nimport * as babel from '@babel/types';\nimport {Visitor, VisitorCallback} from './estree-visitor';\n\n/**\n * These enum options mimic the estraverse enums that are returned by their\n * `enterX`/`leaveX` visitor methods to advise flow of the visitor.\n */\nexport enum VisitorOption {\n  Skip = 'skip',\n  Break = 'break',\n  Remove = 'remove',\n}\n\n/**\n * This method mirrors the API of `estraverse`'s `traverse` function.  It uses\n * `babel-traverse` to perform a traversal of an AST, but does so with `noScope:\n * true` which turns off the scoping logic and enables it to traverse from any\n * node; whereasc `babel-traverse`'s scopes require traversal from the root\n * node, the `File` type, which we don't yet even store on our JavaScript\n * documents.\n */\nexport function traverse(ast: babel.Node, visitor: Visitor): void {\n  babelTraverse(ast, {\n    enter(path) {\n      dispatchVisitMethods(\n          ['enter', `enter${path.type}` as keyof Visitor], path, visitor);\n    },\n\n    exit(path) {\n      dispatchVisitMethods(\n          ['leave', `leave${path.type}` as keyof Visitor], path, visitor);\n    },\n    noScope: !babel.isFile(ast),\n  });\n}\n\n/**\n * Calls into visitor methods for visited node types using `estraverse` API of\n * providing the node and the parent node, and translates the `VisitorOption`\n * return value into directives on the `path` object used by `babel-traverse` to\n * advise visitor control flow, i.e. `stop`, `skip`, and `remove`.\n */\nfunction dispatchVisitMethods(\n    methodNames: Array<keyof Visitor>,\n    path: NodePath<babel.Node>,\n    visitor: Visitor): void {\n  for (const methodName of methodNames) {\n    if (typeof visitor[methodName] === 'function') {\n      // TODO(rictic): can maybe remove this cast in TS 2.8\n      const result = (visitor[methodName] as VisitorCallback<babel.Node>)!\n          (path.node, path.parent, path);\n      switch (result) {\n        case VisitorOption.Break:\n          return path.stop();\n        case VisitorOption.Skip:\n          return path.skip();\n        case VisitorOption.Remove:\n          return path.remove();\n      }\n    }\n  }\n}\n"]}