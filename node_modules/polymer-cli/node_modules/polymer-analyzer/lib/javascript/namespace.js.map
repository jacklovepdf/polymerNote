{"version":3,"sources":["../src/javascript/namespace.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAMH;;GAEG;AACH;IAUE,YACI,IAAY,EAAE,WAAmB,EAAE,OAAe,EAAE,OAAkB,EACtE,UAAwC,EAAE,KAAsB,EAChE,WAAwB;QAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAED,OAAO,CAAC,SAAmB;QACzB,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;CACF;AA3BD,4CA2BC;AAQD;IAWE,YAAY,gBAAkC;QAFrC,eAAU,GAAG,IAAI,GAAG,EAAoB,CAAC;QAGhD,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAC,IAAI,CAAC;QAClC,IAAI,CAAC,WAAW,GAAG,gBAAgB,CAAC,WAAW,CAAC;QAChD,IAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC,OAAO,CAAC;QACxC,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACxC,IAAI,CAAC,WAAW,GAAG,gBAAgB,CAAC,WAAW,CAAC;QAChD,IAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC,OAAO,CAAC;QACxC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QAEtD,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,gBAAgB,CAAC,UAAU,EAAE;YACrD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;SAChC;IACH,CAAC;IAED,QAAQ;QACN,OAAO,iBAAiB,IAAI,CAAC,IAAI,GAAG,CAAC;IACvC,CAAC;CACF;AA7BD,8BA6BC","file":"namespace.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Document, Feature, JsAstNode, Property, Resolvable, ScannedProperty, SourceRange, Warning} from '../model/model';\n\nimport {Annotation as JsDocAnnotation} from './jsdoc';\n\n/**\n * The metadata for a JavaScript namespace.\n */\nexport class ScannedNamespace implements Resolvable {\n  name: string;\n  description?: string;\n  summary?: string;\n  jsdoc?: JsDocAnnotation;\n  sourceRange: SourceRange;\n  astNode: JsAstNode;\n  warnings: Warning[];\n  properties: Map<string, ScannedProperty>;\n\n  constructor(\n      name: string, description: string, summary: string, astNode: JsAstNode,\n      properties: Map<string, ScannedProperty>, jsdoc: JsDocAnnotation,\n      sourceRange: SourceRange) {\n    this.name = name;\n    this.description = description;\n    this.summary = summary;\n    this.jsdoc = jsdoc;\n    this.sourceRange = sourceRange;\n    this.astNode = astNode;\n    this.warnings = [];\n    this.properties = properties;\n  }\n\n  resolve(_document: Document) {\n    return new Namespace(this);\n  }\n}\n\ndeclare module '../model/queryable' {\n  interface FeatureKindMap {\n    'namespace': Namespace;\n  }\n}\n\nexport class Namespace implements Feature {\n  name: string;\n  description?: string;\n  summary?: string;\n  kinds: Set<string>;\n  identifiers: Set<string>;\n  sourceRange: SourceRange;\n  astNode: JsAstNode;\n  warnings: Warning[];\n  readonly properties = new Map<string, Property>();\n\n  constructor(scannedNamespace: ScannedNamespace) {\n    this.name = scannedNamespace.name;\n    this.description = scannedNamespace.description;\n    this.summary = scannedNamespace.summary;\n    this.kinds = new Set(['namespace']);\n    this.identifiers = new Set([this.name]);\n    this.sourceRange = scannedNamespace.sourceRange;\n    this.astNode = scannedNamespace.astNode;\n    this.warnings = Array.from(scannedNamespace.warnings);\n\n    for (const [key, prop] of scannedNamespace.properties) {\n      this.properties.set(key, prop);\n    }\n  }\n\n  toString() {\n    return `<Namespace id=${this.name}>`;\n  }\n}\n"]}