{"version":3,"sources":["../src/core/cancel-token.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,+CAAyC;AAkB5B,QAAA,YAAY,GAAuB,0BAAW,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC","file":"cancel-token.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {CancelToken} from 'cancel-token';\n\n/**\n * The analyzer only uses one method from CancelTokens, and it's likely to be\n * the least contentious, so even if other parts change on the way to\n * standardization,\n * this probably won't.\n */\nexport interface MinimalCancelToken {\n  /**\n   * If the token has been cancelled then this method throws a Cancel, otherwise\n   * it returns undefined.\n   *\n   * A Cancel is an object constructed by a constructor named 'Cancel'.\n   */\n  throwIfRequested(): void;\n}\n\nexport const neverCancels: MinimalCancelToken = CancelToken.source().token;\n"]}