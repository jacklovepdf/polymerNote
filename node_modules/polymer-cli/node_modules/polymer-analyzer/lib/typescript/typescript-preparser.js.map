{"version":3,"sources":["../src/typescript/typescript-preparser.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,iCAAiC;AAEjC,0CAA8G;AAK9G,+DAA+D;AAE/D;;;;;;;;;;;;GAYG;AACH;IACE,KAAK,CACD,QAAgB,EAAE,GAAgB,EAAE,YAAyB,EAC7D,UAA0B;QAC5B,MAAM,QAAQ,GAAG,CAAC,CAAC,UAAU,CAAC;QAC9B,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;QAC9B,MAAM,UAAU,GACZ,EAAE,CAAC,gBAAgB,CAAC,GAAG,EAAE,QAAQ,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACrE,wEAAwE;QACxE,gBAAgB;QAChB,MAAM,8BAA8B,GAChC,UAAkD,CAAC;QACvD,MAAM,WAAW,GAAG,8BAA8B,CAAC,gBAAgB,IAAI,EAAE,CAAC;QAC1E,MAAM,UAAU,GACZ,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,EAAE,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QACxE,MAAM,MAAM,GAAG,IAAI,8CAAwB,CAAC;YAC1C,GAAG;YACH,QAAQ;YACR,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,GAAG,EAAE,UAAU;YACf,cAAc,EAAE,UAAU,CAAC,cAAc;YACzC,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,QAAQ;SACT,CAAC,CAAC;QACH,IAAI,UAAU,EAAE;YACd,IAAI,UAAU,CAAC,KAAK,IAAI,UAAU,CAAC,MAAM,EAAE;gBACzC,MAAM,KAAK,GACP,UAAU,CAAC,6BAA6B,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;gBAC/D,MAAM,GAAG,GAAG,UAAU,CAAC,6BAA6B,CAChD,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;gBAC1C,MAAM,IAAI,gCAAwB,CAAC,IAAI,eAAO,CAAC;oBAC7C,IAAI,EAAE,aAAa;oBACnB,QAAQ,EAAE,gBAAQ,CAAC,KAAK;oBACxB,OAAO,EACH,EAAE,CAAC,4BAA4B,CAAC,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC;oBACjE,WAAW,EAAE,0BAAkB,CAC3B;wBACE,IAAI,EAAE,GAAG;wBACT,KAAK,EAAE,EAAC,MAAM,EAAE,KAAK,CAAC,SAAS,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAC;wBAClD,GAAG,EAAE,EAAC,MAAM,EAAE,GAAG,CAAC,SAAS,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAC;qBAC7C,EACD,UAAU,CAAC,cAAc,CAAE;oBAC/B,cAAc,EAAE,MAAM;iBACvB,CAAC,CAAC,CAAC;aACL;YACD,MAAM,IAAI,KAAK,CACX,EAAE,CAAC,4BAA4B,CAAC,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;SACpE;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AAlDD,kDAkDC","file":"typescript-preparser.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as ts from 'typescript';\n\nimport {correctSourceRange, InlineDocInfo, Severity, Warning, WarningCarryingException} from '../model/model';\nimport {ResolvedUrl} from '../model/url';\nimport {Parser} from '../parser/parser';\nimport {UrlResolver} from '../url-loader/url-resolver';\n\nimport {ParsedTypeScriptDocument} from './typescript-document';\n\n/**\n * A TypeScript parser that only parses a single file, not imported files.\n * This parser is suitable for parsing ES6 as well.\n *\n * This parser uses a TypeScript CompilerHost that resolves all imported\n * modules to null, and resolve the standard library to an empty file.\n * Type checking against the result will be riddled with errors, but the\n * parsed AST can be used to find imports.\n *\n * This parser may eventually be replaced with a lightweight parser that\n * can find import statements, but due to the addition of the import()\n * function, it could be that a full parse is needed anyway.\n */\nexport class TypeScriptPreparser implements Parser<ParsedTypeScriptDocument> {\n  parse(\n      contents: string, url: ResolvedUrl, _urlResolver: UrlResolver,\n      inlineInfo?: InlineDocInfo): ParsedTypeScriptDocument {\n    const isInline = !!inlineInfo;\n    inlineInfo = inlineInfo || {};\n    const sourceFile =\n        ts.createSourceFile(url, contents, ts.ScriptTarget.ES2016, true);\n    // TODO(justinfagnani): where does `parseDiagnostics` come from? Private\n    //     property?\n    const sourceFileMaybeWithDiagnostics =\n        sourceFile as {parseDiagnostics?: ts.Diagnostic[]};\n    const diagnostics = sourceFileMaybeWithDiagnostics.parseDiagnostics || [];\n    const parseError =\n        diagnostics.find((d) => d.category === ts.DiagnosticCategory.Error);\n    const result = new ParsedTypeScriptDocument({\n      url,\n      contents,\n      baseUrl: inlineInfo.baseUrl,\n      ast: sourceFile,\n      locationOffset: inlineInfo.locationOffset,\n      astNode: inlineInfo.astNode,\n      isInline,\n    });\n    if (parseError) {\n      if (parseError.start && parseError.length) {\n        const start =\n            sourceFile.getLineAndCharacterOfPosition(parseError.start);\n        const end = sourceFile.getLineAndCharacterOfPosition(\n            parseError.start + parseError.length);\n        throw new WarningCarryingException(new Warning({\n          code: 'parse-error',\n          severity: Severity.ERROR,\n          message:\n              ts.flattenDiagnosticMessageText(parseError.messageText, '\\n'),\n          sourceRange: correctSourceRange(\n              {\n                file: url,\n                start: {column: start.character, line: start.line},\n                end: {column: end.character, line: end.line}\n              },\n              inlineInfo.locationOffset)!,\n          parsedDocument: result,\n        }));\n      }\n      throw new Error(\n          ts.flattenDiagnosticMessageText(parseError.messageText, '\\n'));\n    }\n    return result;\n  }\n}\n"]}