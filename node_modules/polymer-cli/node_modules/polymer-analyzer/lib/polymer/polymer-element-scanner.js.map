{"version":3,"sources":["../src/polymer/polymer-element-scanner.ts"],"names":[],"mappings":"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","file":"polymer-element-scanner.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {NodePath} from '@babel/traverse';\nimport * as babel from '@babel/types';\n\nimport {getIdentifierName} from '../javascript/ast-value';\nimport {Visitor} from '../javascript/estree-visitor';\nimport * as esutil from '../javascript/esutil';\nimport {JavaScriptDocument} from '../javascript/javascript-document';\nimport {JavaScriptScanner} from '../javascript/javascript-scanner';\nimport * as jsdoc from '../javascript/jsdoc';\nimport {Severity, Warning} from '../model/model';\n\nimport {declarationPropertyHandlers, PropertyHandlers} from './declaration-property-handlers';\nimport {ScannedPolymerElement} from './polymer-element';\n\nexport class PolymerElementScanner implements JavaScriptScanner {\n  async scan(\n      document: JavaScriptDocument,\n      visit: (visitor: Visitor) => Promise<void>) {\n    const visitor = new ElementVisitor(document);\n    await visit(visitor);\n    return {features: visitor.features, warnings: visitor.warnings};\n  }\n}\n\n/**\n * Handles Polymer({}) calls.\n */\nclass ElementVisitor implements Visitor {\n  readonly features: ScannedPolymerElement[] = [];\n  readonly warnings: Warning[] = [];\n  readonly document: JavaScriptDocument;\n  constructor(document: JavaScriptDocument) {\n    this.document = document;\n  }\n\n  enterCallExpression(\n      node: babel.CallExpression, parent: babel.Node, path: NodePath) {\n    const callee = node.callee;\n    if (!babel.isIdentifier(callee) || callee.name !== 'Polymer') {\n      return;\n    }\n    const rawDescription = esutil.getAttachedComment(parent);\n    let className: undefined|string = undefined;\n    if (babel.isAssignmentExpression(parent)) {\n      className = getIdentifierName(parent.left);\n    } else if (babel.isVariableDeclarator(parent)) {\n      className = getIdentifierName(parent.id);\n    }\n    const jsDoc = jsdoc.parseJsdoc(rawDescription || '');\n    const element = new ScannedPolymerElement({\n      className,\n      astNode: {node, language: 'js', containingDocument: this.document},\n      statementAst: esutil.getCanonicalStatement(path),\n      description: jsDoc.description,\n      events: esutil.getEventComments(parent),\n      sourceRange: this.document.sourceRangeForNode(node.arguments[0]),\n      privacy: esutil.getOrInferPrivacy('', jsDoc),\n      abstract: jsdoc.hasTag(jsDoc, 'abstract'),\n      attributes: new Map(),\n      properties: [],\n      behaviors: [],\n      extends: undefined,\n      jsdoc: jsDoc,\n      listeners: [],\n      methods: new Map(),\n      staticMethods: new Map(),\n      mixins: [],\n      observers: [],\n      superClass: undefined,\n      tagName: undefined\n    });\n    element.description = (element.description || '').trim();\n    const propertyHandlers =\n        declarationPropertyHandlers(element, this.document, path);\n\n    const argument = node.arguments[0];\n    if (babel.isObjectExpression(argument)) {\n      this.handleObjectExpression(argument, propertyHandlers, element);\n    }\n\n    this.features.push(element);\n  }\n\n  private handleObjectExpression(\n      node: babel.ObjectExpression, propertyHandlers: PropertyHandlers,\n      element: ScannedPolymerElement) {\n    for (const prop of esutil.getSimpleObjectProperties(node)) {\n      const name = esutil.getPropertyName(prop);\n      if (!name) {\n        element.warnings.push(new Warning({\n          message: `Can't determine name for property key from expression ` +\n              `with type ${prop.key.type}.`,\n          code: 'cant-determine-property-name',\n          severity: Severity.WARNING,\n          sourceRange: this.document.sourceRangeForNode(prop.key)!,\n          parsedDocument: this.document\n        }));\n        continue;\n      }\n      if (name in propertyHandlers) {\n        propertyHandlers[name](prop.value);\n      } else if (\n          (babel.isMethod(prop) && prop.kind === 'method') ||\n          babel.isFunction(prop.value)) {\n        const method = esutil.toScannedMethod(\n            prop, this.document.sourceRangeForNode(prop)!, this.document);\n        element.addMethod(method);\n      }\n    }\n\n    for (const prop of esutil\n             .extractPropertiesFromClassOrObjectBody(node, this.document)\n             .values()) {\n      if (prop.name in propertyHandlers) {\n        continue;\n      }\n      element.addProperty({\n        ...prop,\n        isConfiguration: esutil.configurationProperties.has(prop.name),\n      });\n    }\n  }\n}\n"]}