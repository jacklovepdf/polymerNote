{"version":3,"sources":["../src/polymer/js-utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,sCAAsC;AAEtC,iDAAqI;AAErI,6CAA6C;AAC7C,0CAA8D;AAI9D;;GAEG;AACH,kCACI,IAA+D,EAC/D,WAAwB,EACxB,QAA4B;IAC9B,MAAM,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC,2BAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IACrE,MAAM,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IACnD,MAAM,SAAS,GAAG,wBAAe,CAAC,IAAI,CAAC,CAAC;IAExC,MAAM,QAAQ,GAAc,EAAE,CAAC;IAC/B,IAAI,CAAC,SAAS,EAAE;QACd,QAAQ,CAAC,IAAI,CAAC,IAAI,eAAO,CAAC;YACxB,IAAI,EAAE,mBAAmB;YACzB,OAAO,EACH,gEAAgE;gBAChE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE;YACtB,WAAW,EAAE,WAAW;YACxB,QAAQ,EAAE,gBAAQ,CAAC,OAAO;YAC1B,cAAc,EAAE,QAAQ;SACzB,CAAC,CAAC,CAAC;QACJ,OAAO;KACR;IAED,MAAM,KAAK,GAAG,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;IAE/D,MAAM,UAAU,GAAG,uBAAc,CAAC,KAAK,EAAE,WAAW,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;IAC7E,IAAI,IAAI,CAAC;IACT,IAAI,UAAU,CAAC,UAAU,EAAE;QACzB,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC;KACzB;SAAM;QACL,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAChC,IAAI,GAAG,QAAQ,CAAC;KACjB;IAED,MAAM,IAAI,GAAG,SAAS,IAAI,EAAE,CAAC;IAC7B,MAAM,MAAM,GAA2B;QACrC,IAAI;QACJ,IAAI;QACJ,WAAW;QACX,WAAW;QACX,QAAQ;QACR,OAAO,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,kBAAkB,EAAE,QAAQ,EAAC;QAC7D,eAAe,EAAE,gCAAuB,CAAC,GAAG,CAAC,IAAI,CAAC;QAClD,KAAK,EAAE,WAAW;QAClB,OAAO,EAAE,0BAAiB,CAAC,IAAI,EAAE,WAAW,CAAC;KAC9C,CAAC;IAEF,OAAO,MAAM,CAAC;AAChB,CAAC;AA/CD,4DA+CC","file":"js-utils.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as babel from '@babel/types';\n\nimport {configurationProperties, getAttachedComment, getClosureType, getOrInferPrivacy, getPropertyName} from '../javascript/esutil';\nimport {JavaScriptDocument} from '../javascript/javascript-document';\nimport * as jsdoc from '../javascript/jsdoc';\nimport {Severity, SourceRange, Warning} from '../model/model';\n\nimport {ScannedPolymerProperty} from './polymer-element';\n\n/**\n * Create a ScannedProperty object from an estree Property AST node.\n */\nexport function toScannedPolymerProperty(\n    node: babel.ObjectMethod|babel.ObjectProperty|babel.ClassMethod,\n    sourceRange: SourceRange,\n    document: JavaScriptDocument): ScannedPolymerProperty|undefined {\n  const parsedJsdoc = jsdoc.parseJsdoc(getAttachedComment(node) || '');\n  const description = parsedJsdoc.description.trim();\n  const maybeName = getPropertyName(node);\n\n  const warnings: Warning[] = [];\n  if (!maybeName) {\n    warnings.push(new Warning({\n      code: 'unknown-prop-name',\n      message:\n          `Could not determine name of property from expression of type: ` +\n          `${node.key.type}`,\n      sourceRange: sourceRange,\n      severity: Severity.WARNING,\n      parsedDocument: document\n    }));\n    return;\n  }\n\n  const value = babel.isObjectProperty(node) ? node.value : node;\n\n  const typeResult = getClosureType(value, parsedJsdoc, sourceRange, document);\n  let type;\n  if (typeResult.successful) {\n    type = typeResult.value;\n  } else {\n    warnings.push(typeResult.error);\n    type = 'Object';\n  }\n\n  const name = maybeName || '';\n  const result: ScannedPolymerProperty = {\n    name,\n    type,\n    description,\n    sourceRange,\n    warnings,\n    astNode: {node, language: 'js', containingDocument: document},\n    isConfiguration: configurationProperties.has(name),\n    jsdoc: parsedJsdoc,\n    privacy: getOrInferPrivacy(name, parsedJsdoc)\n  };\n\n  return result;\n}\n"]}