{"version":3,"sources":["../src/url-loader/multi-url-resolver.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAIH,iDAA2C;AAE3C;;GAEG;AACH,sBAA8B,SAAQ,0BAAW;IAC/C,YAAoB,UAAsC;QACxD,KAAK,EAAE,CAAC;QADU,eAAU,GAAV,UAAU,CAA4B;IAE1D,CAAC;IAED;;OAEG;IACH,OAAO,CACH,QAAwC,EAAE,SAA2B,EACrE,OAAuB;QACzB,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE;YACtC,MAAM,QAAQ,GAAG,SAAS,KAAK,SAAS,CAAC,CAAC;gBACtC,QAAQ,CAAC,OAAO,CAAC,QAA8B,CAAC,CAAC,CAAC;gBAClD,QAAQ,CAAC,OAAO,CACZ,QAAuB,EAAE,SAA4B,EAAE,OAAO,CAAC,CAAC;YACxE,IAAI,QAAQ,KAAK,SAAS,EAAE;gBAC1B,OAAO,QAAQ,CAAC;aACjB;SACF;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAQD,QAAQ,CAAC,QAAqB,EAAE,OAAqB,EAAE,IAAa;QAElE,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,GACZ,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC1E,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE;YACtC,IAAI,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,EAAE,CAAC,CAAC,KAAK,SAAS,EAAE;gBACnE,SAAS;aACV;YACD,IAAI,IAAI,KAAK,SAAS,EAAE;gBACtB,OAAO,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;aAC9B;iBAAM;gBACL,OAAO,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;aAC1C;SACF;QACD,MAAM,IAAI,KAAK,CACX,8DAA8D,CAAC,CAAC;IACtE,CAAC;CACF;AA9CD,4CA8CC","file":"multi-url-resolver.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {FileRelativeUrl, PackageRelativeUrl, ResolvedUrl, ScannedImport} from '../model/model';\n\nimport {UrlResolver} from './url-resolver';\n\n/**\n * Resolves a URL using multiple resolvers.\n */\nexport class MultiUrlResolver extends UrlResolver {\n  constructor(private _resolvers: ReadonlyArray<UrlResolver>) {\n    super();\n  }\n\n  /**\n   * Returns the first resolved URL (which is not undefined.)\n   */\n  resolve(\n      firstUrl: ResolvedUrl|PackageRelativeUrl, secondUrl?: FileRelativeUrl,\n      import_?: ScannedImport): ResolvedUrl|undefined {\n    for (const resolver of this._resolvers) {\n      const resolved = secondUrl === undefined ?\n          resolver.resolve(firstUrl as PackageRelativeUrl) :\n          resolver.resolve(\n              firstUrl as ResolvedUrl, secondUrl as FileRelativeUrl, import_);\n      if (resolved !== undefined) {\n        return resolved;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Delegates to relative method on the first resolver which can resolve the\n   * destination URL.\n   */\n  relative(to: ResolvedUrl): PackageRelativeUrl;\n  relative(from: ResolvedUrl, to: ResolvedUrl, kind?: string): FileRelativeUrl;\n  relative(fromOrTo: ResolvedUrl, maybeTo?: ResolvedUrl, kind?: string):\n      FileRelativeUrl|PackageRelativeUrl {\n    const [from, to] =\n        (maybeTo === undefined) ? [undefined, fromOrTo] : [fromOrTo, maybeTo];\n    for (const resolver of this._resolvers) {\n      if (resolver.resolve(this.brandAsPackageRelative(to)) === undefined) {\n        continue;\n      }\n      if (from === undefined) {\n        return resolver.relative(to);\n      } else {\n        return resolver.relative(from, to, kind);\n      }\n    }\n    throw new Error(\n        `Could not get relative url, with no configured url resolvers`);\n  }\n}\n"]}