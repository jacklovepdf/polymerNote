{"version":3,"sources":["../src/url-loader/fetch-url-loader.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,6BAA0C;AAa1C;;GAEG;AACH;IAGE,YAAY,OAAe;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,QAAQ,CAAC,GAAW;QAClB,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,aAAU,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IAC5D,CAAC;IAED,OAAO,CAAC,CAAS;QACf,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,CAAC,GAAW;QACd,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;YACxD,IAAI,QAAQ,CAAC,EAAE,EAAE;gBACf,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;aACxB;iBAAM;gBACL,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,OAAe,EAAE,EAAE;oBAC9C,MAAM,IAAI,KAAK,CAAC,oBAAoB,OAAO,EAAE,CAAC,CAAC;gBACjD,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AA1BD,wCA0BC","file":"fetch-url-loader.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {resolve as resolveUrl} from 'url';\n\n\nimport {UrlLoader} from './url-loader';\n\n// TODO: use better declarations for this and/or a fetch polyfill.\ndeclare const window: {fetch(resolvedUrl: string): Promise<Response>};\n\ninterface Response {\n  ok: boolean;\n  text(): Promise<string>;\n}\n\n/**\n * Resolves requests via the the DOM fetch API.\n */\nexport class FetchUrlLoader implements UrlLoader {\n  baseUrl: string;\n\n  constructor(baseUrl: string) {\n    this.baseUrl = baseUrl;\n  }\n\n  _resolve(url: string) {\n    return this.baseUrl ? resolveUrl(this.baseUrl, url) : url;\n  }\n\n  canLoad(_: string): boolean {\n    return true;\n  }\n\n  load(url: string): Promise<string> {\n    return window.fetch(this._resolve(url)).then((response) => {\n      if (response.ok) {\n        return response.text();\n      } else {\n        return response.text().then((content: string) => {\n          throw new Error(`Response not ok: ${content}`);\n        });\n      }\n    });\n  }\n}\n"]}