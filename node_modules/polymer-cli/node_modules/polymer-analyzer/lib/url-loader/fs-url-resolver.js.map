{"version":3,"sources":["../src/url-loader/fs-url-resolver.ts"],"names":[],"mappings":"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","file":"fs-url-resolver.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as pathlib from 'path';\nimport {posix as posix} from 'path';\nimport {format as urlLibFormat, Url} from 'url';\nimport Uri from 'vscode-uri';\n\nimport {parseUrl} from '../core/utils';\nimport {FileRelativeUrl, PackageRelativeUrl, ScannedImport} from '../index';\nimport {ResolvedUrl} from '../model/url';\n\nimport {UrlResolver} from './url-resolver';\n\nconst isWindows = process.platform === 'win32';\n\n/**\n * Resolves package-relative urls to a configured root directory.\n *\n * For file-relative URLs it does the normal URL resolution algorithm relative\n * to the base url.\n *\n * It does no remapping of urls in source to urls on the filesystem, but a\n * subclass can override modifyFsPath for this purpose.\n */\nexport class FsUrlResolver extends UrlResolver {\n  // The root directory that we resolve package relative URLs to.\n  protected readonly packageDir: string;\n  // file:// URL format of `packageDir`.\n  protected readonly packageUrl: ResolvedUrl;\n  constructor(\n      packageDir: string|undefined,\n      // If provided, any URL which matches `host` will attempt to resolve\n      // to a `file` protocol URL regardless of the protocol represented in the\n      // URL to-be-resolved.\n      private readonly host?: string,\n      // When attempting to resolve a protocol-relative URL (that is a URL which\n      // begins `//`), the default protocol to resolve to if the resolver can\n      // not produce a `file` URL.\n      protected readonly protocol: string = 'https') {\n    super();\n    this.packageDir =\n        normalizeFsPath(pathlib.resolve(packageDir || process.cwd()));\n    this.packageUrl =\n        this.brandAsResolved(Uri.file(this.packageDir).toString());\n    if (!this.packageUrl.endsWith('/')) {\n      this.packageUrl = this.brandAsResolved(this.packageUrl + '/');\n    }\n  }\n\n  resolve(\n      firstHref: ResolvedUrl|PackageRelativeUrl, secondHref?: FileRelativeUrl,\n      _import?: ScannedImport): ResolvedUrl|undefined {\n    const [baseUrl = this.packageUrl, unresolvedHref] =\n        this.getBaseAndUnresolved(firstHref, secondHref);\n    const resolvedHref =\n        this.simpleUrlResolve(baseUrl, unresolvedHref, this.protocol);\n    if (resolvedHref === undefined) {\n      return undefined;\n    }\n    const url = parseUrl(resolvedHref);\n    if (this.shouldHandleAsFileUrl(url)) {\n      return this.handleFileUrl(url, unresolvedHref);\n    }\n    return this.brandAsResolved(resolvedHref);\n  }\n\n  protected shouldHandleAsFileUrl(url: Url) {\n    const isLocalFileUrl =\n        url.protocol === 'file:' && (!url.host || url.host === 'localhost');\n    const isOurHost = url.host === this.host;\n    return isLocalFileUrl || isOurHost;\n  }\n\n  /**\n   * Take the given URL which is either a file:// url or a url with the\n   * configured hostname, and treat its pathname as though it points to a file\n   * on the local filesystem, producing a file:/// url.\n   *\n   * Also corrects sibling URLs like `../foo` to point to\n   * `./${component_dir}/foo`\n   */\n  private handleFileUrl(url: Url, unresolvedHref: string) {\n    let pathname: string;\n    const unresolvedUrl = parseUrl(unresolvedHref);\n    if (unresolvedUrl.pathname && unresolvedUrl.pathname.startsWith('/') &&\n        unresolvedUrl.protocol !== 'file:') {\n      // Absolute urls point to the package root.\n      let unresolvedPathname: string;\n      try {\n        unresolvedPathname =\n            posix.normalize(decodeURIComponent(unresolvedUrl.pathname));\n      } catch (e) {\n        return undefined;  // undecodable url\n      }\n      pathname = pathlib.join(this.packageDir, unresolvedPathname);\n    } else {\n      // Otherwise, consider the url that has already been resolved\n      // against the baseUrl\n      try {\n        pathname = posix.normalize(decodeURIComponent(url.pathname || ''));\n      } catch (e) {\n        return undefined;  // undecodable url\n      }\n    }\n\n    const path = this.modifyFsPath(this.filesystemPathForPathname(pathname));\n\n    // TODO(rictic): investigate moving to whatwg URLs internally:\n    //     https://github.com/Polymer/polymer-analyzer/issues/804\n    // Re-encode URI, since it is expected we are emitting a relative URL.\n    const resolvedUrl = parseUrl(Uri.file(path).toString());\n    resolvedUrl.search = url.search;\n    resolvedUrl.hash = url.hash;\n    return this.brandAsResolved(urlLibFormat(resolvedUrl));\n  }\n\n  /**\n   * Overridable method, for subclasses that want to redirect some filesystem\n   * paths.\n   *\n   * @param fsPath An absolute path on the file system. Note that it will be\n   *     OS-specific.\n   * @return An absolute path on the file system that we should resolve to.\n   */\n  protected modifyFsPath(fsPath: string) {\n    return fsPath;\n  }\n\n  relative(to: ResolvedUrl): PackageRelativeUrl;\n  relative(from: ResolvedUrl, to: ResolvedUrl, _kind?: string): FileRelativeUrl;\n  relative(fromOrTo: ResolvedUrl, maybeTo?: ResolvedUrl, _kind?: string):\n      FileRelativeUrl|PackageRelativeUrl {\n    const [from, to] = (maybeTo !== undefined) ? [fromOrTo, maybeTo] :\n                                                 [this.packageUrl, fromOrTo];\n    return this.simpleUrlRelative(from, to);\n  }\n\n  protected filesystemPathForPathname(decodedPathname: string) {\n    return normalizeFsPath(Uri.file(decodedPathname).fsPath);\n  }\n}\n\n/**\n * Normalizes slashes, `..`, `.`, and on Windows the capitalization of the\n * drive letter.\n */\nfunction normalizeFsPath(fsPath: string) {\n  fsPath = pathlib.normalize(fsPath);\n  if (isWindows && /^[a-z]:/.test(fsPath)) {\n    // Upper case the drive letter\n    fsPath = fsPath[0].toUpperCase() + fsPath.slice(1);\n  }\n  return fsPath;\n}\n"]}