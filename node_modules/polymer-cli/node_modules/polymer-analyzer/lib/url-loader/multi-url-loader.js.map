{"version":3,"sources":["../src/url-loader/multi-url-loader.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAOH;;GAEG;AACH;IACE,YAAoB,QAAqB;QAArB,aAAQ,GAAR,QAAQ,CAAa;QACvC,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;YAC7B,IAAI,MAAM,CAAC,aAAa,KAAK,SAAS,EAAE;gBACtC,IAAI,CAAC,aAAa,GAAG,CAAC,IAAiB,EAAE,IAAc,EAAE,EAAE;oBACzD,OAAO,MAAM,CAAC,aAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAC3C,CAAC,CAAC;gBACF,MAAM;aACP;SACF;IACH,CAAC;IAED,OAAO,CAAC,GAAgB;QACtB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7D,CAAC;IAEK,IAAI,CAAC,GAAgB;;YACzB,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAClC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;oBACvB,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBACzB;aACF;YACD,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,kBAAkB,GAAG,EAAE,CAAC,CAAC,CAAC;QAC5D,CAAC;KAAA;CAIF;AA3BD,wCA2BC","file":"multi-url-loader.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {PackageRelativeUrl} from '../index';\nimport {ResolvedUrl} from '../model/url';\n\nimport {UrlLoader} from './url-loader';\n\n/**\n * Resolves requests via one of a sequence of loaders.\n */\nexport class MultiUrlLoader implements UrlLoader {\n  constructor(private _loaders: UrlLoader[]) {\n    for (const loader of _loaders) {\n      if (loader.readDirectory !== undefined) {\n        this.readDirectory = (path: ResolvedUrl, deep?: boolean) => {\n          return loader.readDirectory!(path, deep);\n        };\n        break;\n      }\n    }\n  }\n\n  canLoad(url: ResolvedUrl): boolean {\n    return this._loaders.some((loader) => loader.canLoad(url));\n  }\n\n  async load(url: ResolvedUrl): Promise<string> {\n    for (const loader of this._loaders) {\n      if (loader.canLoad(url)) {\n        return loader.load(url);\n      }\n    }\n    return Promise.reject(new Error(`Unable to load ${url}`));\n  }\n\n  readDirectory?\n      (path: ResolvedUrl, deep?: boolean): Promise<PackageRelativeUrl[]>;\n}\n"]}