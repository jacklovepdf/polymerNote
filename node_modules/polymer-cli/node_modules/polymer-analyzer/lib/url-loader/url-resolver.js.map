{"version":3,"sources":["../src/url-loader/url-resolver.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,6BAA6B;AAC7B,6BAA2C;AAE3C,yCAAmD;AAInD;;;;;;;GAOG;AACH;IAeY,oBAAoB,CAC1B,IAAoC,EAAE,IAAsB;QAE9D,OAAO,IAAI,KAAK,SAAS,CAAC,CAAC;YACvB,CAAC,SAAS,EAAE,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChD,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;IACnE,CAAC;IAES,gBAAgB,CACtB,OAAoB,EAAE,GAAuC,EAC7D,eAAuB;QACzB,OAAO,IAAI,CAAC,eAAe,CAAC,kBAAU,CAAC,OAAO,EAAE,GAAG,EAAE,eAAe,CAAC,CAAC,CAAC;IACzE,CAAC;IAES,iBAAiB,CAAC,IAAiB,EAAE,EAAe;QAE5D,MAAM,OAAO,GAAG,gBAAQ,CAAC,IAAI,CAAC,CAAC;QAC/B,MAAM,KAAK,GAAG,gBAAQ,CAAC,EAAE,CAAC,CAAC;QAC3B,kEAAkE;QAClE,wCAAwC;QACxC,IAAI,OAAO,KAAK,CAAC,QAAQ,KAAK,QAAQ;YAC9B,OAAO,CAAC,QAAQ,KAAK,KAAK,CAAC,QAAQ;YACvC,OAAO,KAAK,CAAC,OAAO,KAAK,SAAS;gBAC9B,OAAO,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO;YACrC,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,IAAI,OAAO,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;YAC7D,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,IAAI,OAAO,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE;YACjE,OAAO,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;SACrC;QACD,IAAI,QAAQ,CAAC;QACb,MAAM,EAAC,MAAM,EAAE,IAAI,EAAC,GAAG,KAAK,CAAC;QAC7B,IAAI,OAAO,CAAC,QAAQ,KAAK,KAAK,CAAC,QAAQ,EAAE;YACvC,QAAQ,GAAG,EAAE,CAAC;SACf;aAAM;YACL,MAAM,OAAO,GAAG,OAAO,OAAO,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC;gBAClD,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;gBACxC,EAAE,CAAC;YACP,MAAM,KAAK,GAAG,OAAO,KAAK,CAAC,QAAQ,KAAK,QAAQ;gBACxC,OAAO,KAAK,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC;gBACxC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAChB,EAAE,CAAC;YACP,uDAAuD;YACvD,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC;YACnC,wEAAwE;YACxE,oEAAoE;YAEpE,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;SACrE;QACD,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;IAC1E,CAAC;IAES,mBAAmB,CAAC,GAAW;QACvC,OAAO,GAAsB,CAAC;IAChC,CAAC;IAES,sBAAsB,CAAC,GAAW;QAC1C,OAAO,GAAyB,CAAC;IACnC,CAAC;IAES,eAAe,CAAC,GAAW;QACnC,OAAO,GAAkB,CAAC;IAC5B,CAAC;CACF;AA5ED,kCA4EC","file":"url-resolver.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as path from 'path';\nimport {format as urlLibFormat} from 'url';\n\nimport {parseUrl, resolveUrl} from '../core/utils';\nimport {PackageRelativeUrl, ScannedImport} from '../index';\nimport {FileRelativeUrl, ResolvedUrl} from '../model/url';\n\n/**\n * Resolves the given URL to the concrete URL that a resource can\n * be loaded from.\n *\n * This can be useful to resolve name to paths, such as resolving 'polymer' to\n * '../polymer/polymer.html', or component paths, like '../polymer/polymer.html'\n * to '/bower_components/polymer/polymer.html'.\n */\nexport abstract class UrlResolver {\n  /**\n   * Resoves `url` to a new location.\n   *\n   * Returns `undefined` if the given url cannot be resolved.\n   */\n  abstract resolve(url: PackageRelativeUrl): ResolvedUrl|undefined;\n  abstract resolve(\n      baseUrl: ResolvedUrl, url: FileRelativeUrl,\n      scannedImport?: ScannedImport): ResolvedUrl|undefined;\n\n  abstract relative(to: ResolvedUrl): PackageRelativeUrl;\n  abstract relative(from: ResolvedUrl, to: ResolvedUrl, kind?: string):\n      FileRelativeUrl;\n\n  protected getBaseAndUnresolved(\n      url1: PackageRelativeUrl|ResolvedUrl, url2?: FileRelativeUrl):\n      [ResolvedUrl|undefined, FileRelativeUrl|PackageRelativeUrl] {\n    return url2 === undefined ?\n        [undefined, this.brandAsPackageRelative(url1)] :\n        [this.brandAsResolved(url1), this.brandAsFileRelative(url2)];\n  }\n\n  protected simpleUrlResolve(\n      baseUrl: ResolvedUrl, url: FileRelativeUrl|PackageRelativeUrl,\n      defaultProtocol: string): ResolvedUrl {\n    return this.brandAsResolved(resolveUrl(baseUrl, url, defaultProtocol));\n  }\n\n  protected simpleUrlRelative(from: ResolvedUrl, to: ResolvedUrl):\n      FileRelativeUrl {\n    const fromUrl = parseUrl(from);\n    const toUrl = parseUrl(to);\n    // Return the `to` as-is if there are conflicting components which\n    // prohibit calculating a relative form.\n    if (typeof toUrl.protocol === 'string' &&\n            fromUrl.protocol !== toUrl.protocol ||\n        typeof toUrl.slashes === 'boolean' &&\n            fromUrl.slashes !== toUrl.slashes ||\n        typeof toUrl.host === 'string' && fromUrl.host !== toUrl.host ||\n        typeof toUrl.auth === 'string' && fromUrl.auth !== toUrl.auth) {\n      return this.brandAsFileRelative(to);\n    }\n    let pathname;\n    const {search, hash} = toUrl;\n    if (fromUrl.pathname === toUrl.pathname) {\n      pathname = '';\n    } else {\n      const fromDir = typeof fromUrl.pathname === 'string' ?\n          fromUrl.pathname.replace(/[^/]+$/, '') :\n          '';\n      const toDir = typeof toUrl.pathname === 'string' &&\n              typeof toUrl.pathname === 'string' ?\n          toUrl.pathname :\n          '';\n      // In a browserify environment, there isn't path.posix.\n      const pathlib = path.posix || path;\n      // Note, below, the _ character is appended to the `toDir` so that paths\n      // with trailing slash will retain the trailing slash in the result.\n\n      pathname = pathlib.relative(fromDir, toDir + '_').replace(/_$/, '');\n    }\n    return this.brandAsFileRelative(urlLibFormat({pathname, search, hash}));\n  }\n\n  protected brandAsFileRelative(url: string): FileRelativeUrl {\n    return url as FileRelativeUrl;\n  }\n\n  protected brandAsPackageRelative(url: string): PackageRelativeUrl {\n    return url as PackageRelativeUrl;\n  }\n\n  protected brandAsResolved(url: string): ResolvedUrl {\n    return url as ResolvedUrl;\n  }\n}\n"]}