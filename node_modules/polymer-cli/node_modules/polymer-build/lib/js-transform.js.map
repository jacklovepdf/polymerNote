{"version":3,"sources":["../src/js-transform.ts"],"names":[],"mappings":"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","file":"js-transform.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as babelCore from '@babel/core';\nimport * as babylon from 'babylon';\nimport {JsCompileTarget, ModuleResolutionStrategy} from 'polymer-project-config';\nimport * as uuid from 'uuid/v1';\n\nimport {resolveBareSpecifiers} from './babel-plugin-bare-specifiers';\nimport {dynamicImportAmd} from './babel-plugin-dynamic-import-amd';\nimport {rewriteImportMeta} from './babel-plugin-import-meta';\nimport * as externalJs from './external-js';\n\n// TODO(aomarks) Switch to babel-preset-env. But how do we get just syntax\n// plugins without turning on transformation, for the case where we are\n// minifying but not compiling?\n\n// Syntax and transform plugins for ES2015. This is roughly equivalent to\n// @babel/preset-es2015, with modules removed and\n// @babel/plugin-transform-classes pinned to v7.0.0-beta.35 to avoid\n// https://github.com/babel/babel/issues/7506 . As mentioned in the bug, native\n// constructors are wrapped with a ES5 'class' which has a constructor that does\n// nothing; however, the custom elements polyfill needs the polyfilled\n// constructor to be called so that it can supply the element being upgraded as\n// the object to use for `this`.\nconst babelTransformEs2015 = [\n  require('@babel/plugin-transform-template-literals'),\n  require('@babel/plugin-transform-literals'),\n  require('@babel/plugin-transform-function-name'),\n  require('@babel/plugin-transform-arrow-functions'),\n  require('@babel/plugin-transform-block-scoped-functions'),\n  require('@babel/plugin-transform-classes'),\n  require('@babel/plugin-transform-object-super'),\n  require('@babel/plugin-transform-shorthand-properties'),\n  require('@babel/plugin-transform-duplicate-keys'),\n  require('@babel/plugin-transform-computed-properties'),\n  require('@babel/plugin-transform-for-of'),\n  require('@babel/plugin-transform-sticky-regex'),\n  require('@babel/plugin-transform-unicode-regex'),\n  require('@babel/plugin-transform-spread'),\n  require('@babel/plugin-transform-parameters'),\n  require('@babel/plugin-transform-destructuring'),\n  require('@babel/plugin-transform-block-scoping'),\n  require('@babel/plugin-transform-typeof-symbol'),\n  require('@babel/plugin-transform-instanceof'),\n  [\n    require('@babel/plugin-transform-regenerator'),\n    {async: false, asyncGenerators: false}\n  ],\n];\n\nconst babelTransformEs2016 = [\n  require('@babel/plugin-transform-exponentiation-operator'),\n];\n\nconst babelTransformEs2017 = [\n  require('@babel/plugin-transform-async-to-generator'),\n];\n\nconst babelTransformEs2018 = [\n  require('@babel/plugin-proposal-object-rest-spread'),\n  require('@babel/plugin-proposal-async-generator-functions'),\n];\n\n// Loading this plugin removes inlined Babel helpers.\nconst babelExternalHelpersPlugin = require('@babel/plugin-external-helpers');\n\nconst babelTransformModulesAmd = [\n  dynamicImportAmd,\n  rewriteImportMeta,\n  require('@babel/plugin-transform-modules-amd'),\n];\n\n// We enumerate syntax plugins that would automatically be loaded by our\n// transform plugins because we need to support the configuration where we\n// minify but don't compile, and don't want Babel to error when it encounters\n// syntax that we support when compiling.\nconst babelSyntaxPlugins = [\n  // ES2017 and below syntax plugins are included by default.\n  // ES2018 (partial)\n  require('@babel/plugin-syntax-object-rest-spread'),\n  require('@babel/plugin-syntax-async-generators'),\n  // Future\n  // require('@babel/plugin-syntax-export-extensions'),\n  require('@babel/plugin-syntax-dynamic-import'),\n  require('@babel/plugin-syntax-import-meta'),\n];\n\nconst babelPresetMinify = require('babel-preset-minify')({}, {\n  // Disable the minify-constant-folding plugin because it has a bug relating to\n  // invalid substitution of constant values into export specifiers:\n  // https://github.com/babel/minify/issues/820\n  evaluate: false,\n\n  // TODO(aomarks) Find out why we disabled this plugin.\n  simplifyComparisons: false,\n\n  // Disable the simplify plugin because it can eat some statements preceeding\n  // loops. https://github.com/babel/minify/issues/824\n  simplify: false,\n\n  // This is breaking ES6 output. https://github.com/Polymer/tools/issues/261\n  mangle: false,\n});\n\n/**\n * Options for jsTransform.\n */\nexport interface JsTransformOptions {\n  // Whether to compile JavaScript to ES5.\n  compile?: boolean|JsCompileTarget;\n\n  // If true, do not include Babel helper functions in the output. Otherwise,\n  // any Babel helper functions that were required by this transform (e.g. ES5\n  // compilation or AMD module transformation) will be automatically included\n  // inline with this output. If you set this option, you must provide those\n  // required Babel helpers by some other means.\n  externalHelpers?: boolean;\n\n  // Whether to minify JavaScript.\n  minify?: boolean;\n\n  // What kind of ES module resolution/remapping to apply.\n  moduleResolution?: ModuleResolutionStrategy;\n\n  // The path of the file being transformed, used for module resolution.\n  // Must be an absolute filesystem path.\n  filePath?: string;\n\n  // The package name of the file being transformed, required when\n  // `isComponentRequest` is true.\n  packageName?: string;\n\n  // For Polyserve or other servers with similar component directory mounting\n  // behavior. Whether this is a request for a package in node_modules/.\n  isComponentRequest?: boolean;\n\n  // The component directory to use when rewriting bare specifiers to relative\n  // paths. A resolved path that begins with the component directory will be\n  // rewritten to be relative to the root.\n  componentDir?: string;\n\n  // The root directory of the package containing the component directory.\n  // Must be an absolute filesystem path.\n  rootDir?: string;\n\n  // Whether to replace ES modules with AMD modules. If `auto`, run the\n  // transform if the script contains any ES module import/export syntax.\n  transformModulesToAmd?: boolean|'auto';\n\n  // If transformModulesToAmd is true, setting this option will update the\n  // generated AMD module to be 1) defined with an auto-generated name (instead\n  // of with no name), and 2) if > 0, to depend on the previously auto-generated\n  // module. This can be used to generate a dependency chain between module\n  // scripts.\n  moduleScriptIdx?: number;\n\n  // If true, parsing of invalid JavaScript will not throw an exception.\n  // Instead, a console error will be logged, and the original JavaScript will\n  // be returned with no changes. Use with caution!\n  softSyntaxError?: boolean;\n}\n\n/**\n * Transform some JavaScript according to the given options.\n */\nexport function jsTransform(js: string, options: JsTransformOptions): string {\n  // Even with no transform plugins, parsing and serializing with Babel will\n  // make some minor formatting changes to the code. Skip Babel altogether\n  // if we have no meaningful changes to make.\n  let doBabelTransform = false;\n\n  // Note that Babel plugins run in this order:\n  // 1) plugins, first to last\n  // 2) presets, last to first\n  const plugins = [...babelSyntaxPlugins];\n  const presets = [];\n\n  if (options.externalHelpers) {\n    plugins.push(babelExternalHelpersPlugin);\n  }\n  if (options.minify) {\n    doBabelTransform = true;\n    // Minify last, so push first.\n    presets.push(babelPresetMinify);\n  }\n  if (options.compile === true || options.compile === 'es5') {\n    doBabelTransform = true;\n    plugins.push(...babelTransformEs2015);\n    plugins.push(...babelTransformEs2016);\n    plugins.push(...babelTransformEs2017);\n    plugins.push(...babelTransformEs2018);\n  } else if (options.compile === 'es2015') {\n    doBabelTransform = true;\n    plugins.push(...babelTransformEs2016);\n    plugins.push(...babelTransformEs2017);\n    plugins.push(...babelTransformEs2018);\n  } else if (options.compile === 'es2016') {\n    doBabelTransform = true;\n    plugins.push(...babelTransformEs2017);\n    plugins.push(...babelTransformEs2018);\n  } else if (options.compile === 'es2017') {\n    doBabelTransform = true;\n    plugins.push(...babelTransformEs2018);\n  }\n  if (options.moduleResolution === 'node') {\n    if (!options.filePath) {\n      throw new Error(\n          'Cannot perform node module resolution without filePath.');\n    }\n    doBabelTransform = true;\n    plugins.push(resolveBareSpecifiers(\n        options.filePath,\n        !!options.isComponentRequest,\n        options.packageName,\n        options.componentDir,\n        options.rootDir));\n  }\n\n  // When the AMD option is \"auto\", these options will change based on whether\n  // we have a module or not (unless they are already definitely true).\n  let transformModulesToAmd = options.transformModulesToAmd;\n  if (transformModulesToAmd === true) {\n    doBabelTransform = true;\n  }\n\n  const maybeDoBabelTransform =\n      doBabelTransform || transformModulesToAmd === 'auto';\n\n  if (maybeDoBabelTransform) {\n    let ast;\n    try {\n      ast = babylon.parse(js, {\n        // TODO(aomarks) Remove any when typings are updated for babylon 7.\n        // tslint:disable-next-line: no-any\n        sourceType: transformModulesToAmd === 'auto' ? 'unambiguous' as any :\n                                                       'module',\n        plugins: [\n          'asyncGenerators',\n          'dynamicImport',\n          // tslint:disable-next-line: no-any\n          'importMeta' as any,\n          'objectRestSpread',\n        ],\n      });\n    } catch (e) {\n      if (options.softSyntaxError && e.constructor.name === 'SyntaxError') {\n        console.error(\n            'ERROR [polymer-build]: failed to parse JavaScript' +\n                (options.filePath ? ` (${options.filePath}):` : ':'),\n            e);\n        return js;\n      } else {\n        throw e;\n      }\n    }\n\n    if (transformModulesToAmd === 'auto' &&\n        ast.program.sourceType === 'module') {\n      transformModulesToAmd = true;\n    }\n\n    if (transformModulesToAmd) {\n      doBabelTransform = true;\n      plugins.push(...babelTransformModulesAmd);\n    }\n\n    if (doBabelTransform) {\n      const result = babelCore.transformFromAst(ast, js, {presets, plugins});\n      if (result.code === undefined) {\n        throw new Error(\n            'Babel transform failed: resulting code was undefined.');\n      }\n      js = result.code;\n\n      if (!options.externalHelpers && options.compile === 'es5' &&\n          js.includes('regeneratorRuntime')) {\n        js = externalJs.getRegeneratorRuntime() + js;\n      }\n    }\n  }\n\n  js = replaceTemplateObjectNames(js);\n\n  return js;\n}\n\n/**\n * Modifies variables names of tagged template literals (`\"_templateObject\"`)\n * from a given string so that they're all unique.\n *\n * This is needed to workaround a potential naming collision when individually\n * transpiled scripts are bundled. See #950.\n */\nfunction replaceTemplateObjectNames(js: string): string {\n  // Breakdown of regular expression to match \"_templateObject\" variables\n  //\n  // Pattern                | Meaning\n  // -------------------------------------------------------------------\n  // (                      | Group1\n  // _templateObject        | Match \"_templateObject\"\n  // \\d*                    | Match 0 or more digits\n  // \\b                     | Match word boundary\n  // )                      | End Group1\n  const searchValueRegex = /(_templateObject\\d*\\b)/g;\n\n  // The replacement pattern appends an underscore and UUID to the matches:\n  //\n  // Pattern                | Meaning\n  // -------------------------------------------------------------------\n  // $1                     | Insert matching Group1 (from above)\n  // _                      | Insert \"_\"\n  // ${uniqueId}            | Insert previously generated UUID\n  const uniqueId = uuid().replace(/-/g, '');\n  const replaceValue = `$1_${uniqueId}`;\n\n  // Example output:\n  // _templateObject  -> _templateObject_200817b1154811e887be8b38cea68555\n  // _templateObject2 -> _templateObject2_5e44de8015d111e89b203116b5c54903\n\n  return js.replace(searchValueRegex, replaceValue);\n}\n"]}