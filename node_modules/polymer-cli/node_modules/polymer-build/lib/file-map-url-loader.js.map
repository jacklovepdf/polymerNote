{"version":3,"sources":["../src/file-map-url-loader.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAIH,uCAA0C;AAI1C;;;GAGG;AACH;IAIE,YAAY,KAA6B,EAAE,cAA0B;QACnE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAED,mDAAmD;IACnD,OAAO,CAAC,GAAgB;QACtB,OAAO,CAAC,CAAC,CACL,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;YACnB,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED,qEAAqE;IACrE,4BAA4B;IACtB,IAAI,CAAC,GAAgB;;YACzB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAEjC,IAAI,IAAI,IAAI,IAAI,EAAE;gBAChB,IAAI,IAAI,CAAC,cAAc,EAAE;oBACvB,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;wBACpC,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;qBACtC;oBACD,MAAM,IAAI,KAAK,CACX,GAAG,GAAG,4DAA4D,CAAC,CAAC;iBACzE;gBACD,MAAM,IAAI,KAAK,CAAC,GAAG,GAAG,kDAAkD,CAAC,CAAC;aAC3E;YAED,OAAO,yBAAe,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC;KAAA;CACF;AAlCD,4CAkCC","file":"file-map-url-loader.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {ResolvedUrl, UrlLoader} from 'polymer-analyzer';\n\nimport {getFileContents} from './streams';\n\nimport File = require('vinyl');\n\n/**\n * This is a `UrlLoader` for use with a `polymer-analyzer` that reads files\n * that have been gathered by a `BuildBundler` transform stream.\n */\nexport class FileMapUrlLoader implements UrlLoader {\n  files: Map<ResolvedUrl, File>;\n  fallbackLoader?: UrlLoader;\n\n  constructor(files: Map<ResolvedUrl, File>, fallbackLoader?: UrlLoader) {\n    this.files = files;\n    this.fallbackLoader = fallbackLoader;\n  }\n\n  // Return true if we can return load the given url.\n  canLoad(url: ResolvedUrl): boolean {\n    return !!(\n        this.files.has(url) ||\n        this.fallbackLoader && this.fallbackLoader.canLoad(url));\n  }\n\n  // Try to load the file from the map.  If not in the map, try to load\n  // from the fallback loader.\n  async load(url: ResolvedUrl): Promise<string> {\n    const file = this.files.get(url);\n\n    if (file == null) {\n      if (this.fallbackLoader) {\n        if (this.fallbackLoader.canLoad(url)) {\n          return this.fallbackLoader.load(url);\n        }\n        throw new Error(\n            `${url} not present in file map and fallback loader can not load.`);\n      }\n      throw new Error(`${url} not present in file map and no fallback loader.`);\n    }\n\n    return getFileContents(file);\n  }\n}\n"]}