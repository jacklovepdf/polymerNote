{"version":3,"sources":["../src/base-tag-updater.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;;;;;;;;;;AAEH,4CAA4C;AAC5C,iCAAiC;AAEjC,uCAAgE;AAGhE,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAEvD;;;GAGG;AACH,oBAA4B,SAAQ,8BAAgC;IAClE,YAAoB,QAAqB,EAAU,OAAe;QAChE,KAAK,CAAC,EAAC,UAAU,EAAE,IAAI,EAAC,CAAC,CAAC;QADR,aAAQ,GAAR,QAAQ,CAAa;QAAU,YAAO,GAAP,OAAO,CAAQ;IAElE,CAAC;IAGG,cAAc,CAAC,KAA0B;;;gBAC3C,KAAyB,IAAA,UAAA,cAAA,KAAK,CAAA,WAAA;oBAAnB,MAAM,IAAI,iCAAA,CAAA;oBACnB,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,QAAQ,EAAE;wBAC/B,MAAM,IAAI,CAAC;wBACX,SAAS;qBACV;oBAED,MAAM,QAAQ,GAAG,cAAM,yBAAe,CAAC,IAAI,CAAC,CAAA,CAAC;oBAC7C,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAC,YAAY,EAAE,IAAI,EAAC,CAAC,CAAC;oBAC5D,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;oBAC7C,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,IAAI,CAAC,OAAO,EAAE;wBAC7D,MAAM,IAAI,CAAC;wBACX,SAAS;qBACV;oBAED,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC9C,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;oBACpC,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;oBACjC,WAAW,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC;oBACrE,MAAM,WAAW,CAAC;iBACnB;;;;;;;;;;QACH,CAAC;KAAA;CACF;AA5BD,wCA4BC","file":"base-tag-updater.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as dom5 from 'dom5/lib/index-next';\nimport * as parse5 from 'parse5';\nimport File = require('vinyl');\nimport {AsyncTransformStream, getFileContents} from './streams';\nimport {LocalFsPath} from './path-transformers';\n\nconst baseMatcher = dom5.predicates.hasTagName('base');\n\n/**\n * Find a `<base>` tag in the specified file and if found, update its `href`\n * with the given new value.\n */\nexport class BaseTagUpdater extends AsyncTransformStream<File, File> {\n  constructor(private filePath: LocalFsPath, private newHref: string) {\n    super({objectMode: true});\n  }\n\n  protected async *\n      _transformIter(files: AsyncIterable<File>): AsyncIterable<File> {\n    for await (const file of files) {\n      if (file.path !== this.filePath) {\n        yield file;\n        continue;\n      }\n\n      const contents = await getFileContents(file);\n      const parsed = parse5.parse(contents, {locationInfo: true});\n      const base = dom5.query(parsed, baseMatcher);\n      if (!base || dom5.getAttribute(base, 'href') === this.newHref) {\n        yield file;\n        continue;\n      }\n\n      dom5.setAttribute(base, 'href', this.newHref);\n      dom5.removeFakeRootElements(parsed);\n      const updatedFile = file.clone();\n      updatedFile.contents = new Buffer(parse5.serialize(parsed), 'utf-8');\n      yield updatedFile;\n    }\n  }\n}\n"]}