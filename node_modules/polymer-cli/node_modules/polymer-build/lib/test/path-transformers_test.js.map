{"version":3,"sources":["../src/test/path-transformers_test.ts"],"names":[],"mappings":"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","file":"path-transformers_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport {join as pathJoin, sep as pathSeparator} from 'path';\nimport {PackageRelativeUrl} from 'polymer-analyzer';\nimport {LocalFsPath, pathFromUrl, urlFromPath} from '../path-transformers';\n\nconst WindowsRootPath = 'C:\\\\Users\\\\TEST_USER\\\\TEST_ROOT' as LocalFsPath;\nconst MacRootPath = '/Users/TEST_USER/TEST_ROOT' as LocalFsPath;\nconst RootPath = pathSeparator === '\\\\' ? WindowsRootPath : MacRootPath;\n\nsuite('pathFromUrl()', () => {\n  test('creates a filesystem path using the platform separators', () => {\n    const otherSeparator = pathSeparator === '/' ? '\\\\' : '/';\n    const path =\n        pathFromUrl(RootPath, '/some/url/pathname' as PackageRelativeUrl);\n    assert.include(path, pathSeparator);\n    assert.notInclude(path, otherSeparator);\n  });\n\n  test('returns a path if url is absolute', () => {\n    const path = pathFromUrl(RootPath, '/absolute/path' as PackageRelativeUrl);\n    assert.equal(path, pathJoin(RootPath, 'absolute', 'path'));\n  });\n\n  test('returns a path if url relative', () => {\n    const path = pathFromUrl(RootPath, 'relative/path' as PackageRelativeUrl);\n    assert.equal(path, pathJoin(RootPath, 'relative', 'path'));\n  });\n\n  test('will not go outside the root path', () => {\n    const path = pathFromUrl(\n        RootPath, '../../../still/../root/path' as PackageRelativeUrl);\n    assert.equal(path, pathJoin(RootPath, 'root', 'path'));\n  });\n\n  test('will decode URI percent encoded characters', () => {\n    const path =\n        pathFromUrl(RootPath, '/%40foo/spaced%20out' as PackageRelativeUrl);\n    assert.equal(path, pathJoin(RootPath, '/@foo/spaced out'));\n  });\n});\n\nsuite('urlFromPath()', () => {\n  test('throws error when path is not in root', () => {\n    assert.throws(() => {\n      urlFromPath(\n          '/this/is/a/path' as LocalFsPath,\n          '/some/other/path/shop-app.html' as LocalFsPath);\n    });\n    assert.throws(() => {\n      urlFromPath(\n          '/the/path' as LocalFsPath,\n          '/the/pathologist/index.html' as LocalFsPath);\n    });\n  });\n\n  test('creates a URL path relative to root', () => {\n    const shortPath = urlFromPath(\n        RootPath, pathJoin(RootPath, 'shop-app.html') as LocalFsPath);\n    assert.equal(shortPath, 'shop-app.html');\n    const medPath = urlFromPath(\n        RootPath, pathJoin(RootPath, 'src', 'shop-app.html') as LocalFsPath);\n    assert.equal(medPath, 'src/shop-app.html');\n    const longPath = urlFromPath(\n        RootPath,\n        pathJoin(RootPath, 'bower_components', 'app-layout', 'docs.html') as\n            LocalFsPath);\n    assert.equal(longPath, 'bower_components/app-layout/docs.html');\n  });\n\n  test('will properly encode URL-unfriendly characters like spaces', () => {\n    const url =\n        urlFromPath(RootPath, pathJoin(RootPath, 'spaced out') as LocalFsPath);\n    assert.equal(url, 'spaced%20out');\n  });\n});\n"]}