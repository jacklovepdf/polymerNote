{"version":3,"sources":["../src/test/optimize-streams_test.ts"],"names":[],"mappings":"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","file":"optimize-streams_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as path from 'path';\nimport stripIndent = require('strip-indent');\nimport * as vfs from 'vinyl-fs-fake';\nimport * as Vinyl from 'vinyl';\n\nimport {getOptimizeStreams} from '../optimize-streams';\nimport {HtmlSplitter} from '../html-splitter';\nimport {pipeStreams} from '../streams';\nimport {assertMapEqualIgnoringWhitespace} from './util';\n\nsuite('optimize-streams', () => {\n  const fixtureRoot =\n      path.join(__dirname, '..', '..', 'test-fixtures', 'npm-modules');\n\n  async function getOnlyFile(stream: NodeJS.ReadableStream): Promise<string> {\n    const fileMap = await getFileMap(stream);\n    if (fileMap.size !== 1) {\n      throw new Error(`Expected 1 file in the stream, got ${fileMap.size}.`);\n    }\n    return fileMap.values().next().value;\n  }\n\n  async function getFileMap(stream: NodeJS.ReadableStream):\n      Promise<Map<string, string>> {\n    const fileMap = new Map<string, string>();\n    return new Promise<Map<string, string>>((resolve, reject) => {\n      stream.on(\n          'data',\n          (file: Vinyl) => fileMap.set(file.path, file.contents!.toString()));\n      stream.on('end', () => resolve(fileMap));\n      stream.on('error', reject);\n    });\n  }\n\n  suite('JS compilation', () => {\n    test('compiles to ES5 if compile=true', async () => {\n      const expected = `var apple = 'apple';\\nvar banana = 'banana';`;\n      const sourceStream = vfs.src([\n        {\n          path: 'foo.js',\n          contents: `const apple = 'apple'; let banana = 'banana';`,\n        },\n      ]);\n      const op = pipeStreams(\n          [sourceStream, getOptimizeStreams({js: {compile: true}})]);\n      assert.equal(await getOnlyFile(op), expected);\n    });\n\n    test('compiles ES2017 to ES2015', async () => {\n      const sourceStream = vfs.src([\n        {\n          path: 'foo.js',\n          contents: `async function test() { await 0; }`,\n        },\n      ]);\n      const op = pipeStreams(\n          [sourceStream, getOptimizeStreams({js: {compile: 'es2015'}})]);\n      const result = await getOnlyFile(op);\n      assert.include(result, 'asyncToGenerator');\n      assert.notInclude(result, 'async function test');\n      assert.notInclude(result, 'regeneratorRuntime');\n    });\n\n    test('does not compile webcomponents.js files (windows)', async () => {\n      const es6Contents = `const apple = 'apple';`;\n      const sourceStream = vfs.src([\n        {\n          path:\n              'A:\\\\project\\\\bower_components\\\\webcomponentsjs\\\\webcomponents-es5-loader.js',\n          contents: es6Contents,\n        },\n      ]);\n      const op = pipeStreams(\n          [sourceStream, getOptimizeStreams({js: {compile: true}})]);\n      assert.equal(await getOnlyFile(op), es6Contents);\n    });\n\n    test('does not compile webcomponents.js files (unix)', async () => {\n      const es6Contents = `const apple = 'apple';`;\n      const sourceStream = vfs.src([\n        {\n          path:\n              '/project/bower_components/webcomponentsjs/webcomponents-es5-loader.js',\n          contents: es6Contents,\n        },\n      ]);\n      const op = pipeStreams(\n          [sourceStream, getOptimizeStreams({js: {compile: true}})]);\n      assert.equal(await getOnlyFile(op), es6Contents);\n    });\n  });\n\n\n  suite('rewrites bare module specifiers to paths', () => {\n    test('in js files', async () => {\n      const filePath = path.join(fixtureRoot, 'foo.js');\n      const contents = stripIndent(`\n      import { dep1 } from 'dep1';\n      import { dep2 } from 'dep2';\n      import { dep2A } from 'dep2/a';\n      `);\n      const expected = stripIndent(`\n      import { dep1 } from \"./node_modules/dep1/index.js\";\n      import { dep2 } from \"./node_modules/dep2/dep2.js\";\n      import { dep2A } from \"./node_modules/dep2/a.js\";\n      `);\n\n      const result = await getOnlyFile(pipeStreams([\n        vfs.src([{path: filePath, contents}]),\n        getOptimizeStreams({js: {moduleResolution: 'node'}}),\n      ]));\n      assert.deepEqual(result.trim(), expected.trim());\n    });\n\n    test('in html inline scripts', async () => {\n      const filePath = path.join(fixtureRoot, 'foo.html');\n      const contents = stripIndent(`\n      <html>\n        <head>\n          <script type=\"module\">\n            import { dep1 } from 'dep1';\n            import { dep2 } from 'dep2';\n            import { dep2A } from 'dep2/a';\n          </script>\n        </head>\n        <body></body>\n      </html>\n      `);\n      // Note we do some quite ugly re-formatting of HTML!\n      const expected = stripIndent(`\n      <html><head>\n          <script type=\"module\">import { dep1 } from \"./node_modules/dep1/index.js\";\n      import { dep2 } from \"./node_modules/dep2/dep2.js\";\n      import { dep2A } from \"./node_modules/dep2/a.js\";</script>\n        </head>\n        <body>\n\n      </body></html>\n      `);\n\n      const htmlSplitter = new HtmlSplitter();\n      const result = await getOnlyFile(pipeStreams([\n        vfs.src([{path: filePath, contents}]),\n        htmlSplitter.split(),\n        getOptimizeStreams({js: {moduleResolution: 'node'}}),\n        htmlSplitter.rejoin()\n      ]));\n      assert.deepEqual(result.trim(), expected.trim());\n    });\n  });\n\n  suite('transforms ES modules to AMD', async () => {\n    test('inline and external script tags', async () => {\n      const files = [\n        {\n          path: 'index.html',\n          contents: `\n            <html><head></head><body>\n              <script>// not a module</script>\n              <script type=\"module\">import { depA } from './depA.js';</script>\n              <script type=\"module\" src=\"./depB.js\"></script>\n              <script type=\"module\">import { depC } from './depC.js';</script>\n            </body></html>\n          `,\n          expected: `\n            <html><head></head><body>\n              <script>// not a module</script>\n              <script>define([\"./depA.js\"], function (_depA) {\"use strict\";});</script>\n              <script>define(['./depB.js']);</script>\n              <script>define([\"./depC.js\"], function (_depC) {\"use strict\";});</script>\n            </body></html>\n          `,\n        },\n      ];\n\n      const opts = {\n        js: {\n          transformModulesToAmd: true,\n        },\n        rootDir: fixtureRoot,\n      };\n\n      const expected = new Map<string, string>(\n          files.map((file): [string, string] => [file.path, file.expected]));\n\n      const htmlSplitter = new HtmlSplitter();\n      const result = await getFileMap(pipeStreams([\n        vfs.src(files),\n        htmlSplitter.split(),\n        getOptimizeStreams(opts),\n        htmlSplitter.rejoin()\n      ]));\n      assertMapEqualIgnoringWhitespace(result, expected);\n    });\n\n    test('auto-detects when to transform external js', async () => {\n      const files = [\n        {\n          path: 'has-import-statement.js',\n          contents: `\n            import {foo} from './foo.js';\n          `,\n          expected: `\n            define([\"./foo.js\"], function (_foo) {\n              \"use strict\";\n            });\n          `,\n        },\n\n        {\n          path: 'has-export-statement.js',\n          contents: `\n            export const foo = 'foo';\n          `,\n          expected: `\n            define([\"exports\"], function (_exports) {\n              \"use strict\";\n              Object.defineProperty(_exports, \"__esModule\", {value: true});\n              _exports.foo = void 0;\n              const foo = 'foo';\n              _exports.foo = foo;\n            });\n          `,\n        },\n\n        {\n          path: 'not-a-module.js',\n          contents: `\n            const foo = 'import export';\n          `,\n          expected: `\n            const foo = 'import export';\n          `,\n        },\n      ];\n\n      const opts = {\n        js: {\n          transformModulesToAmd: true,\n        },\n        rootDir: fixtureRoot,\n      };\n\n      const expected = new Map<string, string>(\n          files.map((file): [string, string] => [file.path, file.expected]));\n\n      const htmlSplitter = new HtmlSplitter();\n      const result = await getFileMap(pipeStreams([\n        vfs.src(files),\n        htmlSplitter.split(),\n        getOptimizeStreams(opts),\n        htmlSplitter.rejoin()\n      ]));\n      assertMapEqualIgnoringWhitespace(result, expected);\n    });\n  });\n\n  test('minify js', async () => {\n    const sourceStream = vfs.src([\n      {\n        path: 'foo.js',\n        contents: 'var foo = 3',\n      },\n    ]);\n    const op =\n        pipeStreams([sourceStream, getOptimizeStreams({js: {minify: true}})]);\n\n    assert.equal(await getOnlyFile(op), 'var foo=3;');\n  });\n\n  test('minify js (es6)', async () => {\n    const sourceStream = vfs.src([\n      {\n        path: 'foo.js',\n        contents: '[1,2,3].map(n => n + 1);',\n      },\n    ]);\n    const op =\n        pipeStreams([sourceStream, getOptimizeStreams({js: {minify: true}})]);\n    assert.equal(await getOnlyFile(op), '[1,2,3].map(n=>n+1);');\n  });\n\n  test('js exclude permutations', async () => {\n    const files = [\n      {\n        path: 'minify.js',\n        contents: 'const foo = 3;',\n        expected: 'const foo=3;',\n      },\n      {\n        path: 'compile.js',\n        contents: 'const foo = 3;',\n        expected: 'var foo = 3;',\n      },\n      {\n        path: 'minify-compile.js',\n        contents: 'const foo = 3;',\n        expected: 'var foo=3;',\n      },\n      {\n        path: 'neither.js',\n        // Even with no transform plugins, Babel will make minor code formatting\n        // changes, such as trimming newlines. This newline remaining shows that\n        // Babel did not run at all.\n        contents: 'const foo = 3;\\n',\n        expected: 'const foo = 3;\\n',\n      },\n    ];\n    const opts = {\n      js: {\n        compile: {exclude: ['minify.js', 'neither.js']},\n        minify: {exclude: ['compile.js', 'neither.js']},\n      },\n    };\n\n    const expected = new Map<string, string>(\n        files.map((file): [string, string] => [file.path, file.expected]));\n    const result = await getFileMap(pipeStreams([\n      vfs.src(files),\n      getOptimizeStreams(opts),\n    ]));\n    assert.deepEqual([...result.entries()], [...expected.entries()]);\n  });\n\n  test('minify html', async () => {\n    const expected = `<!DOCTYPE html><style>foo {\n            background: blue;\n          }</style><script>document.registerElement(\\'x-foo\\', XFoo);</script><x-foo>bar</x-foo>`;\n    const sourceStream = vfs.src(\n        [\n          {\n            path: 'foo.html',\n            contents: `\n        <!doctype html>\n        <style>\n          foo {\n            background: blue;\n          }\n        </style>\n        <script>\n          document.registerElement('x-foo', XFoo);\n        </script>\n        <x-foo>\n          bar\n        </x-foo>\n        `,\n          },\n        ],\n        {cwdbase: true});\n    const op =\n        pipeStreams([sourceStream, getOptimizeStreams({html: {minify: true}})]);\n    assert.equal(await getOnlyFile(op), expected);\n  });\n\n  test('minify css', async () => {\n    const sourceStream = vfs.src([\n      {\n        path: 'foo.css',\n        contents: '/* comment */ selector { property: value; }',\n      },\n    ]);\n    const op =\n        pipeStreams([sourceStream, getOptimizeStreams({css: {minify: true}})]);\n    assert.equal(await getOnlyFile(op), 'selector{property:value;}');\n  });\n\n  test('minify css (inlined)', async () => {\n    const expected = `<style>foo{background:blue;}</style>`;\n    const sourceStream = vfs.src(\n        [\n          {\n            path: 'foo.html',\n            contents: `\n          <!doctype html>\n          <html>\n            <head>\n              <style>\n                foo {\n                  background: blue;\n                }\n              </style>\n            </head>\n            <body></body>\n          </html>\n        `,\n          },\n        ],\n        {cwdbase: true});\n    const op =\n        pipeStreams([sourceStream, getOptimizeStreams({css: {minify: true}})]);\n\n    assert.include(await getOnlyFile(op), expected);\n  });\n});\n"]}