{"version":3,"sources":["../src/test/service-worker_test.ts"],"names":[],"mappings":"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","file":"service-worker_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n// TODO Migrate to async tests.\n\nimport {assert} from 'chai';\nimport * as fs from 'mz/fs';\nimport * as path from 'path';\nimport * as vfs from 'vinyl-fs';\n\nimport {LocalFsPath} from '../path-transformers';\nimport {PolymerProject} from '../polymer-project';\nimport * as serviceWorker from '../service-worker';\n\nconst temp = require('temp').track();\nconst mergeStream = require('merge-stream');\n\nsuite('service-worker', () => {\n  let testBuildRoot: LocalFsPath;\n  let defaultProject: PolymerProject;\n\n  setup((done) => {\n    defaultProject = new PolymerProject({\n      root: path.resolve('test-fixtures/test-project'),\n      entrypoint: 'index.html',\n      shell: 'shell.html',\n      sources: [\n        'source-dir/**',\n      ],\n    });\n\n    temp.mkdir('polymer-build-test', (err: Error, dir?: string) => {\n      if (err || dir === undefined) {\n        return done(err || 'no dir given');\n      }\n      testBuildRoot = dir as LocalFsPath;\n      vfs.src(path.join('test-fixtures/test-project/**'))\n          .pipe(vfs.dest(dir))\n          .on('end', () => {\n            mergeStream(defaultProject.sources(), defaultProject.dependencies())\n                .pipe(vfs.dest(testBuildRoot))\n                .on('end', () => done())\n                .on('error', done);\n          });\n    });\n  });\n\n  teardown((done) => {\n    temp.cleanup(done);\n  });\n\n  suite('hasNoFileExtension regexp', () => {\n    test('matches URL paths correctly', () => {\n      const test = (s: string) => serviceWorker.hasNoFileExtension.test(s);\n\n      assert.isTrue(test('/'));\n      assert.isTrue(test('/foo'));\n      assert.isTrue(test('/foo/'));\n      assert.isTrue(test('/foo.png/bar/'));\n      assert.isTrue(test('/foo?baz.png'));\n\n      assert.isFalse(test('/foo.png'));\n      assert.isFalse(test('/foo/bar.png'));\n    });\n  });\n\n  suite('generateServiceWorkerConfig()', () => {\n    test('should set entrypoint related options', async () => {\n      const config = await serviceWorker.generateServiceWorkerConfig({\n        project: defaultProject,\n        buildRoot: testBuildRoot,\n      });\n      assert.equal(config.navigateFallback, 'index.html');\n      assert.deepEqual(\n          config.navigateFallbackWhitelist, [serviceWorker.hasNoFileExtension]);\n      assert.equal(config.directoryIndex, '');\n    });\n  });\n\n  suite('generateServiceWorker()', () => {\n    test('should throw when options are not provided', () => {\n      // tslint:disable-next-line: no-any testing type unsafe code\n      return (serviceWorker.generateServiceWorker as any)().then(\n          () => {\n            assert.fail(\n                'generateServiceWorker() resolved, expected rejection!');\n          },\n          (error: Error) => {\n            assert.include(error.name, 'AssertionError');\n            assert.equal(\n                error.message, '`project` & `buildRoot` options are required');\n          });\n    });\n\n    test('should throw when options.project is not provided', () => {\n      // tslint:disable-next-line: no-any testing type unsafe code\n      const unsafeForm = (serviceWorker.generateServiceWorker as any);\n      return unsafeForm({buildRoot: testBuildRoot})\n          .then(\n              () => {\n                assert.fail(\n                    'generateServiceWorker() resolved, expected rejection!');\n              },\n              (error: Error) => {\n                assert.include(error.name, 'AssertionError');\n                assert.equal(error.message, '`project` option is required');\n              });\n    });\n\n    test('should throw when options.buildRoot is not provided', () => {\n      // tslint:disable-next-line: no-any testing type unsafe code\n      const unsafeForm = (serviceWorker.generateServiceWorker as any);\n      return unsafeForm({project: defaultProject})\n          .then(\n              () => {\n                assert.fail(\n                    'generateServiceWorker() resolved, expected rejection!');\n              },\n              (error: Error) => {\n                assert.include(error.name, 'AssertionError');\n                assert.equal(error.message, '`buildRoot` option is required');\n              });\n    });\n\n    test('should not modify the options object provided when called', () => {\n      const swPrecacheConfig = {staticFileGlobs: <string[]>[]};\n      return serviceWorker\n          .generateServiceWorker({\n            project: defaultProject,\n            buildRoot: testBuildRoot,\n            swPrecacheConfig: swPrecacheConfig,\n          })\n          .then(() => {\n            assert.equal(swPrecacheConfig.staticFileGlobs.length, 0);\n          });\n    });\n\n    test(\n        'should resolve with a Buffer representing the generated service worker code',\n        () => {\n          return serviceWorker\n              .generateServiceWorker({\n                project: defaultProject,\n                buildRoot: testBuildRoot,\n              })\n              .then((swCode: Buffer) => {\n                assert.ok(swCode instanceof Buffer);\n              });\n        });\n\n    test(\n        'should add unbundled precached assets when options.unbundled is not provided',\n        () => {\n          return serviceWorker\n              .generateServiceWorker({\n                project: defaultProject,\n                buildRoot: testBuildRoot,\n              })\n              .then((swFile: Buffer) => {\n                const fileContents = swFile.toString();\n                assert.include(fileContents, '\"index.html\"');\n                assert.include(fileContents, '\"shell.html\"');\n                assert.include(fileContents, '\"bower_components/dep.html\"');\n                assert.notInclude(fileContents, '\"source-dir/my-app.html\"');\n              });\n        });\n\n    test(\n        'should add bundled precached assets when options.bundled is provided',\n        () => {\n          return serviceWorker\n              .generateServiceWorker({\n                project: defaultProject,\n                buildRoot: testBuildRoot,\n                bundled: true,\n              })\n              .then((swFile: Buffer) => {\n                const fileContents = swFile.toString();\n                assert.include(fileContents, '\"index.html\"');\n                assert.include(fileContents, '\"shell.html\"');\n                assert.notInclude(fileContents, '\"bower_components/dep.html\"');\n                assert.notInclude(fileContents, '\"source-dir/my-app.html\"');\n              });\n        });\n\n    test('should add provided staticFileGlobs paths to the final list', () => {\n      return serviceWorker\n          .generateServiceWorker({\n            project: defaultProject,\n            buildRoot: testBuildRoot,\n            bundled: true,\n            swPrecacheConfig: {\n              staticFileGlobs: ['/bower_components/dep.html'],\n            },\n          })\n          .then((swFile: Buffer) => {\n            const fileContents = swFile.toString();\n            assert.include(fileContents, '\"index.html\"');\n            assert.include(fileContents, '\"shell.html\"');\n            assert.include(fileContents, '\"bower_components/dep.html\"');\n            assert.notInclude(fileContents, '\"source-dir/my-app.html\"');\n          });\n    });\n\n    test('basePath should prefix resources', () => {\n      return serviceWorker\n          .generateServiceWorker({\n            project: defaultProject,\n            buildRoot: testBuildRoot,\n            basePath: '/my/base/path' as LocalFsPath,\n          })\n          .then((swFile: Buffer) => {\n            const fileContents = swFile.toString();\n            assert.include(fileContents, '\"/my/base/path/index.html\"');\n          });\n    });\n\n    test('basePath prefixes should not have double delimiters', () => {\n      return serviceWorker\n          .generateServiceWorker({\n            project: defaultProject,\n            buildRoot: testBuildRoot,\n            basePath: '/my/base/path/' as LocalFsPath,\n          })\n          .then((swFile: Buffer) => {\n            const fileContents = swFile.toString();\n            assert.include(fileContents, '\"/my/base/path/index.html\"');\n            assert.notInclude(fileContents, '\"/my/base/path//index.html\"');\n          });\n    });\n  });\n\n  suite('addServiceWorker()', () => {\n    test('should write generated service worker to file system', () => {\n      return serviceWorker\n          .addServiceWorker({\n            project: defaultProject,\n            buildRoot: testBuildRoot,\n          })\n          .then(() => {\n            const content = fs.readFileSync(\n                path.join(testBuildRoot, 'service-worker.js'), 'utf-8');\n            assert.include(\n                content,\n                '// This generated service worker JavaScript will precache your site\\'s resources.');\n          });\n    });\n  });\n});\n"]}