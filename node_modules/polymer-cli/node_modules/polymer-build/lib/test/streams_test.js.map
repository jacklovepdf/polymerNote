{"version":3,"sources":["../src/test/streams_test.ts"],"names":[],"mappings":"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","file":"streams_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport {AsyncTransformStream} from '../streams';\n\nsuite('AsyncTransformStream', () => {\n  test('transforms input', async () => {\n    class DoubleTransformer extends AsyncTransformStream<number, number> {\n      protected async *\n          _transformIter(inputs: AsyncIterable<number>): AsyncIterable<number> {\n        for await (const input of inputs) {\n          yield input * 2;\n        }\n      }\n    }\n    const transformer = new DoubleTransformer({objectMode: true});\n\n    const results: number[] = [];\n    transformer.on('data', (v: number) => results.push(v));\n    const result = new Promise<number[]>((resolve, reject) => {\n      transformer.on('end', () => resolve(results));\n      transformer.on(\n          'error', (err: undefined|null|string|Partial<Error>) => reject(err));\n    });\n    transformer.write(10);\n    transformer.write(20);\n    transformer.write(30);\n    transformer.end();\n\n    const final = await result;\n    assert.deepEqual(final, [20, 40, 60]);\n  });\n\n  test('fails if the stream does not consume all input', async () => {\n    class GivesUpAfterTwo extends AsyncTransformStream<number, number> {\n      protected async *\n          _transformIter(inputs: AsyncIterable<number>): AsyncIterable<number> {\n        let i = 0;\n        for await (const input of inputs) {\n          i++;\n          if (i > 2) {\n            return;\n          }\n          yield input * 3;\n        }\n      }\n    }\n    const transformer = new GivesUpAfterTwo({objectMode: true});\n\n    const results: number[] = [];\n    transformer.on('data', (v: number) => results.push(v));\n    const onEnd = new Promise((resolve) => transformer.once('end', resolve));\n    const onError =\n        new Promise<Error>((resolve) => transformer.once('error', resolve));\n    transformer.write(10);\n    transformer.write(20);\n    transformer.write(30);\n    transformer.end();\n\n    assert.deepEqual(\n        (await onError).message,\n        'GivesUpAfterTwo did not consume all input while transforming.');\n    await onEnd;\n    // We still do emit the two.\n    assert.deepEqual(results, [30, 60]);\n  });\n});\n"]}