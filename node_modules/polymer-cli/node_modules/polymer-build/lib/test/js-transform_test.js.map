{"version":3,"sources":["../src/test/js-transform_test.ts"],"names":[],"mappings":"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","file":"js-transform_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as path from 'path';\nimport stripIndent = require('strip-indent');\n\nimport {jsTransform} from '../js-transform';\nimport {interceptOutput} from './util';\n\nsuite('jsTransform', () => {\n  const rootDir =\n      path.join(__dirname, '..', '..', 'test-fixtures', 'npm-modules');\n  const filePath = path.join(rootDir, 'foo.js');\n\n  suite('compilation', () => {\n    test('compiles to ES5 when compile=true', () => {\n      assert.equal(\n          jsTransform('const foo = 3;', {compile: true}), 'var foo = 3;');\n    });\n\n    test('compiles to ES5 when compile=es5', () => {\n      assert.equal(\n          jsTransform('const foo = 3;', {compile: 'es5'}), 'var foo = 3;');\n    });\n\n    test('compiles to ES2015 when compile=es2015', () => {\n      assert.equal(\n          jsTransform('2 ** 5;', {compile: 'es2015'}), 'Math.pow(2, 5);');\n    });\n\n    test('compiles ES2017 to ES5', async () => {\n      const result =\n          jsTransform('async function test() { await 0; }', {compile: 'es5'});\n      assert.include(result, '_asyncToGenerator');\n      assert.notInclude(result, 'async function test');\n      assert.include(result, 'regeneratorRuntime');\n    });\n\n    test('compiles ES2017 to ES2015', async () => {\n      const result = jsTransform(\n          'async function test() { await 0; }', {compile: 'es2015'});\n      assert.include(result, 'asyncToGenerator');\n      assert.notInclude(result, 'async function test');\n      assert.notInclude(result, 'regeneratorRuntime');\n    });\n\n    test('does not unnecessarily reformat', () => {\n      // Even with no transform plugins, parsing and serializing with Babel will\n      // make some minor formatting changes to the code, such as removing\n      // trailing newlines. Check that we don't do this when no transformations\n      // were configured.\n      assert.equal(jsTransform('const foo = 3;\\n', {}), 'const foo = 3;\\n');\n    });\n  });\n\n  suite('minification', () => {\n    test('minifies a simple expression', () => {\n      assert.equal(\n          jsTransform('const foo = 3;', {minify: true}), 'const foo=3;');\n    });\n\n    test('minifies an exported const', () => {\n      assert.equal(\n          jsTransform('const foo = \"foo\"; export { foo };', {minify: true}),\n          'const foo=\"foo\";export{foo};');\n    });\n\n    test('minifies and compiles', () => {\n      assert.equal(\n          jsTransform('const foo = 3;', {compile: true, minify: true}),\n          'var foo=3;');\n    });\n  });\n\n  suite('babel helpers', () => {\n    const classJs = `class MyClass {}`;\n    const helperSnippet = `function _classCallCheck(`;\n\n    test('inlined when external helpers are disabled', () => {\n      const result =\n          jsTransform(classJs, {compile: true, externalHelpers: false});\n      assert.include(result, helperSnippet);\n      assert.include(result, 'MyClass');\n    });\n\n    test('omitted when external helpers are enabled', () => {\n      const result =\n          jsTransform(classJs, {compile: true, externalHelpers: true});\n      assert.notInclude(result, helperSnippet);\n      assert.include(result, 'MyClass');\n    });\n  });\n\n  suite('regenerator runtime', () => {\n    const asyncJs = `async () => { await myFunction(); } `;\n    const regeneratorSnippet = `regeneratorRuntime=`;\n\n    test('inlined when external helpers are disabled', () => {\n      const result =\n          jsTransform(asyncJs, {compile: 'es5', externalHelpers: false});\n      assert.include(result, regeneratorSnippet);\n      assert.include(result, 'myFunction');\n    });\n\n    test('omitted when external helpers are enabled', () => {\n      const result =\n          jsTransform(asyncJs, {compile: 'es5', externalHelpers: true});\n      assert.notInclude(result, regeneratorSnippet);\n      assert.include(result, 'myFunction');\n    });\n\n    test('omitted when compile target is es2015', () => {\n      const result =\n          jsTransform(asyncJs, {compile: 'es2015', externalHelpers: false});\n      assert.notInclude(result, regeneratorSnippet);\n      assert.include(result, 'myFunction');\n    });\n\n    test('omitted when code does not require it', () => {\n      const result = jsTransform(\n          `class MyClass {}`, {compile: 'es5', externalHelpers: false});\n      assert.notInclude(result, regeneratorSnippet);\n      assert.include(result, 'MyClass');\n    });\n  });\n\n  suite('parse errors', () => {\n    const invalidJs = ';var{';\n\n    test('throw when softSyntaxError is false', () => {\n      assert.throws(\n          () =>\n              jsTransform(invalidJs, {compile: true, softSyntaxError: false}));\n    });\n\n    test('do not throw when softSyntaxError is true', async () => {\n      const output = await interceptOutput(async () => {\n        assert.equal(\n            jsTransform(invalidJs, {compile: true, softSyntaxError: true}),\n            invalidJs);\n      });\n      assert.include(output, '[polymer-build]: failed to parse JavaScript:');\n    });\n  });\n\n  suite('exponentiation', () => {\n    const js = 'const foo = 2**2;';\n\n    test('minifies', () => {\n      assert.equal(jsTransform(js, {minify: true}), 'const foo=2**2;');\n    });\n\n    test('compiles to ES5', () => {\n      assert.equal(\n          jsTransform(js, {compile: true}), 'var foo = Math.pow(2, 2);');\n    });\n  });\n\n  suite('rest properties', () => {\n    const js = 'let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };';\n\n    test('minifies', () => {\n      assert.equal(\n          jsTransform(js, {minify: true}), 'let{x,y,...z}={x:1,y:2,a:3,b:4};');\n    });\n\n    test('compiles to ES5', () => {\n      assert.include(\n          jsTransform(js, {compile: true}),\n          // Some compiled features are very verbose. Just look for the Babel\n          // helper call so we know the plugin ran.\n          'objectWithoutProperties');\n    });\n  });\n\n  suite('spread properties', () => {\n    const js = 'let n = { x, y, ...z };';\n\n    test('minifies', () => {\n      assert.equal(jsTransform(js, {minify: true}), 'let n={x,y,...z};');\n    });\n\n    test('compiles to ES5', () => {\n      assert.include(jsTransform(js, {compile: true}), 'objectSpread');\n    });\n  });\n\n  suite('async/await', () => {\n    const js = 'async function foo() { await bar(); }';\n\n    test('minifies', () => {\n      assert.equal(\n          jsTransform(js, {minify: true}), 'async function foo(){await bar()}');\n    });\n\n    test('compiles to ES5', () => {\n      assert.include(jsTransform(js, {compile: true}), 'asyncToGenerator');\n    });\n  });\n\n  suite('async generator', () => {\n    const js = 'async function* foo() { yield bar; }';\n\n    test('minifies', () => {\n      assert.equal(\n          jsTransform(js, {minify: true}), 'async function*foo(){yield bar}');\n    });\n\n    test('compiles to ES5', () => {\n      assert.include(jsTransform(js, {compile: true}), 'wrapAsyncGenerator');\n    });\n  });\n\n  suite('dynamic import', () => {\n    const js = 'const foo = import(\"bar.js\");';\n\n    test('minifies', () => {\n      assert.equal(\n          jsTransform(js, {minify: true}), 'const foo=import(\"bar.js\");');\n    });\n  });\n\n  suite('rewrites bare module specifiers', () => {\n    test('node packages', () => {\n      const input = stripIndent(`\n        import { dep1 } from 'dep1';\n        import { dep2 } from 'dep2';\n        import { dep2A } from 'dep2/a';\n        import { dep3 } from 'dep3';\n        import { dep4 } from 'dep4';\n      `);\n\n      const expected = stripIndent(`\n        import { dep1 } from \"./node_modules/dep1/index.js\";\n        import { dep2 } from \"./node_modules/dep2/dep2.js\";\n        import { dep2A } from \"./node_modules/dep2/a.js\";\n        import { dep3 } from \"./node_modules/dep3/dep3-module.js\";\n        import { dep4 } from \"./node_modules/dep4/dep4-module.js\";\n      `);\n\n      const result = jsTransform(input, {moduleResolution: 'node', filePath});\n      assert.equal(result.trim(), expected.trim());\n    });\n\n    test('regular paths and urls', () => {\n      const input = stripIndent(`\n        import { p1 } from '/already/a/path.js';\n        import { p2 } from './already/a/path.js';\n        import { p3 } from '../already/a/path.js';\n        import { p4 } from '../already/a/path.js';\n        import { p5 } from 'http://example.com/already/a/path.js';\n      `);\n\n      const expected = stripIndent(`\n        import { p1 } from '/already/a/path.js';\n        import { p2 } from './already/a/path.js';\n        import { p3 } from '../already/a/path.js';\n        import { p4 } from '../already/a/path.js';\n        import { p5 } from 'http://example.com/already/a/path.js';\n      `);\n\n      const result = jsTransform(input, {moduleResolution: 'node', filePath});\n      assert.equal(result.trim(), expected.trim());\n    });\n\n    test('paths that still need node resolution', () => {\n      const input =\n          // Resolves to a .js file.\n          `import { bar } from './bar';\\n` +\n          // Resolves to a .json file (invalid for the web, but we still do it).\n          `import { baz } from './baz';\\n` +\n          // Resolves to an actual extension-less file in preference to a .js\n          // file with the same basename.\n          `import { qux } from './qux';\\n`;\n\n      const expected = stripIndent(`\n        import { bar } from \"./bar.js\";\n        import { baz } from \"./baz.json\";\n        import { qux } from './qux';\n      `);\n\n      const result = jsTransform(input, {moduleResolution: 'node', filePath});\n      assert.equal(result.trim(), expected.trim());\n    });\n\n    test('paths for dependencies', () => {\n      const input = stripIndent(`\n        import { dep1 } from 'dep1';\n      `);\n\n      const expected = stripIndent(`\n        import { dep1 } from \"../dep1/index.js\";\n      `);\n\n      const result = jsTransform(input, {\n        moduleResolution: 'node',\n        filePath,\n        isComponentRequest: true,\n        packageName: 'some-package',\n        componentDir: path.join(rootDir, 'node_modules'),\n        rootDir,\n      });\n      assert.equal(result.trim(), expected.trim());\n    });\n\n    test('dependencies from a scoped package', () => {\n      const input = stripIndent(`\n        import { dep1 } from 'dep1';\n      `);\n\n      const expected = stripIndent(`\n        import { dep1 } from \"../../dep1/index.js\";\n      `);\n\n      const result = jsTransform(input, {\n        moduleResolution: 'node',\n        filePath,\n        isComponentRequest: true,\n        packageName: '@some-scope/some-package',\n        componentDir: path.join(rootDir, 'node_modules'),\n        rootDir,\n      });\n      assert.equal(result.trim(), expected.trim());\n    });\n  });\n\n  test('transforms ES modules to AMD', () => {\n    const input = stripIndent(`\n      import { dep1 } from 'dep1';\n      export const foo = 'foo';\n    `);\n\n    const expected = stripIndent(`\n      define([\"exports\", \"dep1\"], function (_exports, _dep) {\n        \"use strict\";\n\n        Object.defineProperty(_exports, \"__esModule\", {\n          value: true\n        });\n        _exports.foo = void 0;\n        const foo = 'foo';\n        _exports.foo = foo;\n      });\n    `);\n\n    const result = jsTransform(input, {\n      transformModulesToAmd: true,\n      filePath,\n      rootDir,\n    });\n    assert.equal(result.trim(), expected.trim());\n  });\n\n  test('transforms import.meta', () => {\n    const input = stripIndent(`\n      console.log(import.meta);\n    `);\n\n    const expected = stripIndent(`\n      define([\"meta\"], function (meta) {\n        \"use strict\";\n\n        meta = babelHelpers.interopRequireWildcard(meta);\n        console.log(meta);\n      });\n    `);\n\n    const result = jsTransform(input, {\n      transformModulesToAmd: true,\n      externalHelpers: true,\n    });\n    assert.equal(result.trim(), expected.trim());\n  });\n\n  test('transforms dynamic import()', () => {\n    const input = stripIndent(`\n      import { dep1 } from 'dep1';\n      export const foo = 'foo';\n      console.log(import('./bar.js'));\n    `);\n    const result = jsTransform(input, {\n      transformModulesToAmd: true,\n      filePath,\n      rootDir,\n    });\n\n    assert.include(\n        result,\n        `define([\"exports\", \"require\", \"dep1\"], function (_exports, _require, _dep) {`);\n    assert.include(\n        result,\n        `console.log(new Promise((res, rej) => _require.default(['./bar.js'], res, rej)));`);\n  });\n\n  // https://github.com/babel/babel/issues/7506\n  test('does not include empty native constructor wrappers', () => {\n    const input = stripIndent(`\n      class TestElement extends HTMLElement {\n        constructor() {\n          super();\n          this.x = 1234;\n        }\n      }\n\n      window.customElements.define(\"test-element\", TestElement);\n    `);\n    const result = jsTransform(input, {compile: true});\n\n    assert.notInclude(result, '_wrapNativeSuper');\n  });\n\n  // https://github.com/babel/minify/issues/824\n  test('does not remove statements preceding certain loops', () => {\n    const input = stripIndent(`\n        let foo = 'bar';\n        while (0);\n        console.log(foo);\n    `);\n    const result = jsTransform(input, {compile: true, minify: true});\n\n    assert.include(result, 'bar');\n  });\n});\n"]}