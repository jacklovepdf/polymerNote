{"version":3,"sources":["../src/test/prefetch-links_test.ts"],"names":[],"mappings":"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","file":"prefetch-links_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport {FsUrlResolver, PackageRelativeUrl} from 'polymer-analyzer';\n\nimport {PolymerProject} from '../polymer-project';\nimport {createLinks} from '../prefetch-links';\n\nimport {emittedFiles} from './util';\n\nconst mergeStream = require('merge-stream');\n\nsuite('prefetch-links', () => {\n  suite('AddPrefetchLinks', () => {\n    test('adds prefetch links for transitive deps of unbundled', async () => {\n      const project = new PolymerProject({\n        root: 'test-fixtures/bundle-project/',\n        entrypoint: 'index.html',\n      });\n\n      const files = await emittedFiles(\n          mergeStream(project.sources(), project.dependencies())\n              .pipe(project.addPrefetchLinks()),\n          project.config.root);\n\n      const html = files.get('index.html')!.contents!.toString();\n\n      // No prefetch links needed for direct dependency.\n      assert.notInclude(\n          html, '<link rel=\"prefetch\" href=\"/simple-import.html\">');\n\n      // Prefetch added for the transitive dependencies of `index.html`,\n      // which are all direct dependencies of `simple-import.html`.\n      assert.include(html, '<link rel=\"prefetch\" href=\"/simple-script.js\">');\n      assert.include(html, '<link rel=\"prefetch\" href=\"/simple-style.css\">');\n      assert.include(\n          html, '<link rel=\"prefetch\" href=\"/simple-import-2.html\">');\n    });\n\n    test('add prefetch links for transitive deps of bundled', async () => {\n      const project = new PolymerProject({\n        root: 'test-fixtures/bundle-project/',\n        entrypoint: 'index.html',\n        fragments: ['simple-import.html'],\n      });\n\n      const files = await emittedFiles(\n          mergeStream(project.sources(), project.dependencies())\n              .pipe(project.bundler({inlineScripts: false}))\n              .pipe(project.addPrefetchLinks()),\n          project.config.root);\n      const expectedFiles =\n          ['index.html', 'simple-import.html', 'simple-script.js'];\n      assert.deepEqual(expectedFiles, [...files.keys()].sort());\n\n      const html = files.get('index.html')!.contents!.toString();\n\n      // `simple-import.html` is a direct dependency, so we should not add\n      // prefetch link to it.\n      assert.notInclude(\n          html, '<link rel=\"prefetch\" href=\"/simple-import.html\">');\n\n      // `simple-import.html` has inlined `simple-import-2.html` which has an\n      // external script import `simple-script.js`.  A prefetch link is added\n      // for `simple-script.js` because it is a transitive dependency of the\n      // `index.html`\n      assert.include(html, '<link rel=\"prefetch\" href=\"/simple-script.js\">');\n    });\n\n    test('prefetch links do not include lazy dependencies', async () => {\n      const project = new PolymerProject({\n        root: 'test-fixtures/bundler-data/',\n        entrypoint: 'index.html',\n      });\n\n      const files = await emittedFiles(\n          mergeStream(project.sources(), project.dependencies())\n              .pipe(project.addPrefetchLinks()),\n          project.config.root);\n\n      const html = files.get('index.html')!.contents!.toString();\n      // Shell is a direct dependency, so should not have a prefetch link.\n      assert.notInclude(html, '<link rel=\"prefetch\" href=\"/shell.html\">');\n\n      // Framework is in the shell, so is a transitive dependency of index, and\n      // should be prefetched.\n      assert.include(html, '<link rel=\"prefetch\" href=\"/framework.html\">');\n\n      // These are lazy imports and should not be prefetched.\n      assert.notInclude(\n          html, '<link rel=\"prefetch\" href=\"/entrypoint-a.html\">');\n      assert.notInclude(\n          html, '<link rel=\"prefetch\" href=\"/entrypoint-b.html\">');\n      assert.notInclude(\n          html, '<link rel=\"prefetch\" href=\"/entrypoint-c.html\">');\n      assert.notInclude(\n          html, '<link rel=\"prefetch\" href=\"/common-dependency.html\">');\n      assert.notInclude(\n          html, '<link rel=\"prefetch\" href=\"/lazy-dependency.html\">');\n    });\n\n    test('prefetch links are relative when base tag present', async () => {\n      const project = new PolymerProject({\n        root: 'test-fixtures/differential-serving/',\n        entrypoint: 'index.html',\n        fragments: ['shell.html'],\n      });\n\n      const files = await emittedFiles(\n          mergeStream(project.sources(), project.dependencies())\n              .pipe(project.bundler({inlineScripts: false}))\n              .pipe(project.addPrefetchLinks()),\n          project.config.root);\n\n      const html = files.get('index.html')!.contents!.toString();\n\n      // The `external-script.js` file is imported by `shell.html` so is\n      // transitive dependency of `index.html`.  Because `index.html` has a base\n      // tag with an href, the prefetch is a relative URL.\n      assert.include(\n          html, '<link rel=\"prefetch\" href=\"shell-stuff/external-script.js\">');\n    });\n  });\n\n  suite('createLinks', () => {\n    const urlResolver = new FsUrlResolver('');\n    const html = '<html><body>foo</body></html>';\n    const htmlWithBase = '<html><base href=\"/base/\"><body>foo</body></html>';\n    const deps = new Set([\n      'bower_components/polymer/polymer.html',\n      'src/my-icons.html',\n    ].map((u) => urlResolver.resolve(u as PackageRelativeUrl)!));\n\n    test('with no base tag and absolute true', () => {\n      const url = 'index.html' as PackageRelativeUrl;\n      const expected =\n          ('<html>' +\n           '<link rel=\"prefetch\" href=\"/bower_components/polymer/polymer.html\">' +\n           '<link rel=\"prefetch\" href=\"/src/my-icons.html\">' +\n           '<body>foo</body></html>');\n      const actual =\n          createLinks(urlResolver, html, urlResolver.resolve(url)!, deps, true);\n      assert.equal(actual, expected);\n    });\n\n    test('with a base tag and absolute true', () => {\n      const url = 'index.html' as PackageRelativeUrl;\n      const expected =\n          ('<html><base href=\"/base/\">' +\n           '<link rel=\"prefetch\" href=\"bower_components/polymer/polymer.html\">' +\n           '<link rel=\"prefetch\" href=\"src/my-icons.html\">' +\n           '<body>foo</body></html>');\n      const actual = createLinks(\n          urlResolver, htmlWithBase, urlResolver.resolve(url)!, deps, true);\n      assert.equal(actual, expected);\n    });\n  });\n});\n"]}