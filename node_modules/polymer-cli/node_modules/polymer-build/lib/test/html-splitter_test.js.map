{"version":3,"sources":["../src/test/html-splitter_test.ts"],"names":[],"mappings":"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","file":"html-splitter_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport File = require('vinyl');\nimport * as path from 'path';\nimport * as stream from 'stream';\n\nimport {PolymerProject} from '../polymer-project';\nimport {HtmlSplitter} from '../html-splitter';\n\nconst testProjectRoot = path.resolve('test-fixtures/splitter-project');\n\nsuite('HtmlSplitter', () => {\n  let defaultProject: PolymerProject;\n\n  const unroot = ((p: string) => p.substring(testProjectRoot.length + 1));\n\n  setup(() => {\n    defaultProject = new PolymerProject({\n      root: 'test-fixtures/splitter-project/',\n      entrypoint: 'index.html',\n      shell: 'shell.html',\n      sources: [\n        'source-dir/**',\n      ],\n    });\n  });\n\n  test('splits scripts', (done) => {\n    const htmlSplitter = new HtmlSplitter();\n    const splitFiles = new Map();\n    defaultProject.sources()\n        .pipe(htmlSplitter.split())\n        .on('data', (f: File) => splitFiles.set(unroot(f.path), f))\n        .pipe(htmlSplitter.rejoin())\n        .on('data', () => {/* starts the stream */})\n        .on('end', () => {\n          const expectedSplitFiles = [\n            'index.html',\n            'shell.html',\n            'shell.html_script_0.js',\n            'shell.html_script_1.js',\n            path.join('source-dir', 'my-app.html'),\n          ];\n          assert.deepEqual(\n              Array.from(splitFiles.keys()).sort(), expectedSplitFiles);\n          assert.include(\n              splitFiles.get('shell.html_script_0.js').contents.toString(),\n              `console.log('shell');`);\n          assert.include(\n              splitFiles.get('shell.html_script_1.js').contents.toString(),\n              `console.log('shell 2');`);\n          assert.notInclude(\n              splitFiles.get('shell.html').contents.toString(), `console.log`);\n          assert.include(\n              splitFiles.get('shell.html').contents.toString(),\n              `# I am markdown`);\n          done();\n        });\n  });\n\n  test('rejoins scripts', (done) => {\n    const htmlSplitter = new HtmlSplitter();\n    const joinedFiles = new Map();\n    defaultProject.sources()\n        .pipe(htmlSplitter.split())\n        .pipe(htmlSplitter.rejoin())\n        .on('data', (f: File) => joinedFiles.set(unroot(f.path), f))\n        .on('end', () => {\n          const expectedJoinedFiles = [\n            'index.html',\n            'shell.html',\n            path.join('source-dir', 'my-app.html'),\n          ];\n          assert.deepEqual(\n              Array.from(joinedFiles.keys()).sort(), expectedJoinedFiles);\n          assert.include(\n              joinedFiles.get('shell.html').contents.toString(), `console.log`);\n          done();\n        });\n  });\n\n  test('handles bad paths', (done) => {\n    const htmlSplitter = new HtmlSplitter();\n    const sourceStream = new stream.Readable({\n      objectMode: true,\n    });\n    const root = path.normalize('/foo');\n    const filepath = path.join(root, '/bar/baz.html');\n    const source =\n        '<html><head><script>fooify();</script></head><body></body></html>';\n    const file = new File({\n      cwd: root,\n      base: root,\n      path: filepath,\n      contents: new Buffer(source),\n    });\n\n    sourceStream.pipe(htmlSplitter.split())\n        .on('data',\n            (file: File) => {\n              // this is what gulp-html-minifier does...\n              if (path.sep === '\\\\' && file.path.endsWith('.html')) {\n                file.path = file.path.replace('\\\\', '/');\n              }\n            })\n        .pipe(htmlSplitter.rejoin())\n        .on('data',\n            (file: File) => {\n              const contents = file.contents!.toString();\n              assert.equal(contents, source);\n            })\n        .on('end', done)\n        .on('error', done);\n\n    sourceStream.push(file);\n    sourceStream.push(null);\n  });\n\n  test('does not add root elements to documents', (done) => {\n    const htmlSplitter = new HtmlSplitter();\n    const joinedFiles = new Map();\n    defaultProject.sources()\n        .pipe(htmlSplitter.split())\n        .pipe(htmlSplitter.rejoin())\n        .on('data', (f: File) => joinedFiles.set(unroot(f.path), f))\n        .on('end', () => {\n          const expectedJoinedFiles = [\n            'index.html',\n            'shell.html',\n            path.join('source-dir', 'my-app.html'),\n          ];\n          assert.deepEqual(\n              Array.from(joinedFiles.keys()).sort(), expectedJoinedFiles);\n          const shell = joinedFiles.get('shell.html').contents.toString();\n          assert.notInclude(shell, '<html', 'html element was added');\n          assert.notInclude(shell, '<head', 'head element was added');\n          assert.notInclude(shell, '<body', 'body element was added');\n          done();\n        });\n  });\n});\n"]}