{"version":3,"sources":["../src/test/babel-plugin-import-meta_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,yCAAyC;AACzC,4CAA6C;AAC7C,+BAA4B;AAE5B,0EAA8D;AAE9D,KAAK,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACrC,IAAI,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAClC,MAAM,KAAK,GAAG,WAAW,CAAC;;;KAGzB,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,WAAW,CAAC;;;;KAI5B,CAAC,CAAC;QACH,MAAM,MAAM,GACR,SAAS,CAAC,SAAS,CAAC,KAAK,EAAE,EAAC,OAAO,EAAE,CAAC,4CAAiB,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC;QACpE,aAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAChD,MAAM,KAAK,GAAG,WAAW,CAAC;;KAEzB,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,WAAW,CAAC;;KAE5B,CAAC,CAAC;QACH,MAAM,MAAM,GACR,SAAS,CAAC,SAAS,CAAC,KAAK,EAAE,EAAC,OAAO,EAAE,CAAC,4CAAiB,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC;QACpE,aAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACtC,MAAM,KAAK,GAAG,WAAW,CAAC;;;KAGzB,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,WAAW,CAAC;;;;KAI5B,CAAC,CAAC;QACH,MAAM,MAAM,GACR,SAAS,CAAC,SAAS,CAAC,KAAK,EAAE,EAAC,OAAO,EAAE,CAAC,4CAAiB,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC;QACpE,aAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACzC,MAAM,KAAK,GAAG,WAAW,CAAC;;;;KAIzB,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,WAAW,CAAC;;;;;KAK5B,CAAC,CAAC;QACH,MAAM,MAAM,GACR,SAAS,CAAC,SAAS,CAAC,KAAK,EAAE,EAAC,OAAO,EAAE,CAAC,4CAAiB,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC;QACpE,aAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"babel-plugin-import-meta_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as babelCore from '@babel/core';\nimport stripIndent = require('strip-indent');\nimport {assert} from 'chai';\n\nimport {rewriteImportMeta} from '../babel-plugin-import-meta';\n\nsuite('babel-plugin-import-meta', () => {\n  test('transforms import.meta', () => {\n    const input = stripIndent(`\n      console.log(import.meta);\n      console.log(import.meta.url);\n    `);\n\n    const expected = stripIndent(`\n      import * as meta from 'meta';\n      console.log(meta);\n      console.log(meta.url);\n    `);\n    const result =\n        babelCore.transform(input, {plugins: [rewriteImportMeta]}).code;\n    assert.equal(result.trim(), expected.trim());\n  });\n\n  test('does not transform non-meta property', () => {\n    const input = stripIndent(`\n      console.log(foo.import.meta);\n    `);\n\n    const expected = stripIndent(`\n      console.log(foo.import.meta);\n    `);\n    const result =\n        babelCore.transform(input, {plugins: [rewriteImportMeta]}).code;\n    assert.equal(result.trim(), expected.trim());\n  });\n\n  test('picks a unique import name', () => {\n    const input = stripIndent(`\n      const meta = 'foo';\n      console.log(import.meta);\n    `);\n\n    const expected = stripIndent(`\n      import * as _meta from 'meta';\n      const meta = 'foo';\n      console.log(_meta);\n    `);\n    const result =\n        babelCore.transform(input, {plugins: [rewriteImportMeta]}).code;\n    assert.equal(result.trim(), expected.trim());\n  });\n\n  test('picks a unique import name x2', () => {\n    const input = stripIndent(`\n      const meta = 'foo';\n      const _meta = 'bar';\n      console.log(import.meta);\n    `);\n\n    const expected = stripIndent(`\n      import * as _meta2 from 'meta';\n      const meta = 'foo';\n      const _meta = 'bar';\n      console.log(_meta2);\n    `);\n    const result =\n        babelCore.transform(input, {plugins: [rewriteImportMeta]}).code;\n    assert.equal(result.trim(), expected.trim());\n  });\n});\n"]}