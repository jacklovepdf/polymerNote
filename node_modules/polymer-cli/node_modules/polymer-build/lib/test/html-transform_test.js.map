{"version":3,"sources":["../src/test/html-transform_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,+BAA4B;AAC5B,4CAA4C;AAC5C,iCAAiC;AACjC,6BAA6B;AAE7B,sDAAgD;AAEhD,iCAAqD;AAErD;;;GAGG;AACH,6BAA6B,IAAY;IACvC,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACpC,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,QAAQ,CACzB,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,EAAE;QACxD,MAAM,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACvC,IAAI,EAAE,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;YACjC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;SAC9C;aAAM,IAAI,EAAE,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE;YAC1C,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,uBAAuB,CAAC,CAAC;SACtD;aAAM,IAAI,EAAE,CAAC,QAAQ,CAAC,wBAAwB,CAAC,EAAE;YAChD,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,sBAAsB,CAAC,CAAC;SACrD;aAAM,IAAI,EAAE,CAAC,QAAQ,CAAC,oBAAoB,CAAC,EAAE;YAC5C,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC;SACvD;aAAM,IAAI,EAAE,CAAC,QAAQ,CAAC,uBAAuB,CAAC,EAAE;YAC/C,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;SAChD;aAAM,IAAI,EAAE,CAAC,QAAQ,CAAC,uBAAuB,CAAC,EAAE;YAC/C,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;SAChD;KACF;IACD,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AACpC,CAAC;AAED,KAAK,CAAC,eAAe,EAAE,GAAG,EAAE;IAC1B,MAAM,WAAW,GACb,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,eAAe,EAAE,aAAa,CAAC,CAAC;IAErE,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE;QACzB,MAAM,KAAK,GAAG;;;;;;cAMJ,CAAC;QAEX,MAAM,QAAQ,GAAG,+CAA+C,CAAC;QAEjE,aAAM,CAAC,KAAK,CAAC,8BAAa,CAAC,KAAK,EAAE,EAAC,UAAU,EAAE,IAAI,EAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACzC,MAAM,KAAK,GAAG,gBAAgB,CAAC;QAC/B,aAAM,CAAC,KAAK,CAAC,8BAAa,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,mCAAmC,EAAE,GAAG,EAAE;QAC7C,MAAM,KAAK,GAAG;;;qBAGG,CAAC;QAElB,MAAM,QAAQ,GAAG;;;qBAGA,CAAC;QAElB,oCAA6B,CACzB,8BAAa,CAAC,KAAK,EAAE,EAAC,EAAE,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,EAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACtC,MAAM,KAAK,GAAG;;;qBAGG,CAAC;QAElB,MAAM,QAAQ,GAAG;;;qBAGA,CAAC;QAElB,oCAA6B,CACzB,8BAAa,CAAC,KAAK,EAAE,EAAC,EAAE,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC,EAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACtC,MAAM,KAAK,GAAG;;;qBAGG,CAAC;QAElB,MAAM,QAAQ,GAAG;;;;qBAIA,CAAC;QAElB,MAAM,MAAM,GAAG,8BAAa,CAAC,KAAK,EAAE,EAAC,kBAAkB,EAAE,MAAM,EAAC,CAAC,CAAC;QAClE,oCAA6B,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACrC,MAAM,KAAK,GAAG;;;qBAGG,CAAC;QAElB,MAAM,QAAQ,GAAG;;;;qBAIA,CAAC;QAElB,MAAM,MAAM,GAAG,8BAAa,CAAC,KAAK,EAAE,EAAC,kBAAkB,EAAE,KAAK,EAAC,CAAC,CAAC;QACjE,oCAA6B,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACvC,MAAM,KAAK,GAAG;;;qBAGG,CAAC;QAElB,MAAM,QAAQ,GAAG;;;;qBAIA,CAAC;QAElB,MAAM,MAAM,GAAG,8BAAa,CAAC,KAAK,EAAE,EAAC,wBAAwB,EAAE,IAAI,EAAC,CAAC,CAAC;QACtE,oCAA6B,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;QACpD,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QAEpD,MAAM,KAAK,GAAG;;;;;qBAKG,CAAC;QAElB,MAAM,QAAQ,GAAG;;;;;qBAKA,CAAC;QAElB,oCAA6B,CACzB,8BAAa,CAAC,KAAK,EAAE,EAAC,EAAE,EAAE,EAAC,gBAAgB,EAAE,MAAM,EAAE,QAAQ,EAAC,EAAC,CAAC,EAChE,QAAQ,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACxC,IAAI,CAAC,iBAAiB,EAAE,GAAG,EAAE;YAC3B,MAAM,KAAK,GAAG;;;uBAGG,CAAC;YAElB,MAAM,QAAQ,GAAG;;;uBAGA,CAAC;YAElB,oCAA6B,CACzB,8BAAa,CAAC,KAAK,EAAE;gBACnB,EAAE,EAAE;oBACF,qBAAqB,EAAE,IAAI;iBAC5B;aACF,CAAC,EACF,QAAQ,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE;YACzB,MAAM,KAAK,GAAG;;;;;;uBAMG,CAAC;YAElB,MAAM,QAAQ,GAAG;;;;;;;;uBAQA,CAAC;YAElB,oCAA6B,CACzB,8BAAa,CAAC,KAAK,EAAE;gBACnB,EAAE,EAAE;oBACF,qBAAqB,EAAE,IAAI;oBAC3B,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC;oBAC5C,OAAO,EAAE,WAAW;iBACrB;aACF,CAAC,EACF,QAAQ,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACrD,MAAM,KAAK,GAAG;;;;;;;uBAOG,CAAC;YAElB,MAAM,QAAQ,GAAG;;;;;;;qBAOF,CAAC;YAEhB,oCAA6B,CACzB,8BAAa,CAAC,KAAK,EAAE;gBACnB,EAAE,EAAE;oBACF,qBAAqB,EAAE,IAAI;oBAC3B,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC;oBAC5C,OAAO,EAAE,WAAW;iBACrB;aACF,CAAC,EACF,QAAQ,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uCAAuC,EAAE,GAAG,EAAE;YACjD,MAAM,KAAK,GAAG;;;uBAGG,CAAC;YAElB,MAAM,QAAQ,GAAG;;;qBAGF,CAAC;YAEhB,oCAA6B,CACzB,8BAAa,CAAC,KAAK,EAAE;gBACnB,EAAE,EAAE;oBACF,qBAAqB,EAAE,IAAI;oBAC3B,gBAAgB,EAAE,MAAM;oBACxB,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC;oBAC5C,OAAO,EAAE,WAAW;iBACrB;aACF,CAAC,EACF,QAAQ,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACzD,MAAM,KAAK,GAAG;;;uBAGG,CAAC;YAElB,MAAM,QAAQ,GAAG;;;uBAGA,CAAC;YAElB,oCAA6B,CACzB,8BAAa,CAAC,KAAK,EAAE;gBACnB,EAAE,EAAE;oBACF,OAAO,EAAE,IAAI;oBACb,qBAAqB,EAAE,IAAI;iBAC5B;aACF,CAAC,EACF,QAAQ,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC7D,MAAM,KAAK,GAAG;;;;;;;;;;uBAUG,CAAC;YAElB,oCAA6B,CACzB,8BAAa,CAAC,KAAK,EAAE,EAAC,EAAE,EAAE,EAAC,qBAAqB,EAAE,IAAI,EAAC,EAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC9D,MAAM,KAAK,GAAG;;;;;uBAKG,CAAC;YAElB,MAAM,QAAQ,GAAG;;;;;;;uBAOA,CAAC;YAElB,MAAM,MAAM,GAAG,8BAAa,CAAC,KAAK,EAAE;gBAClC,eAAe,EAAE,IAAI;gBACrB,EAAE,EAAE;oBACF,qBAAqB,EAAE,IAAI;iBAC5B;aACF,CAAC,CAAC;YACH,oCAA6B,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACnD,MAAM,KAAK,GAAG;;;;uBAIG,CAAC;YAElB,MAAM,MAAM,GAAG,8BAAa,CAAC,KAAK,EAAE;gBAClC,eAAe,EAAE,IAAI;gBACrB,EAAE,EAAE;oBACF,qBAAqB,EAAE,IAAI;iBAC5B;aACF,CAAC,CAAC;YACH,oCAA6B,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC9C,MAAM,KAAK,GAAG;;;;;uBAKG,CAAC;YAElB,MAAM,QAAQ,GAAG;;;;;;;;;;;uBAWA,CAAC;YAElB,MAAM,MAAM,GAAG,8BAAa,CAAC,KAAK,EAAE;gBAClC,eAAe,EAAE,IAAI;gBACrB,EAAE,EAAE;oBACF,qBAAqB,EAAE,IAAI;iBAC5B;aACF,CAAC,CAAC;YACH,oCAA6B,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"html-transform_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as dom5 from 'dom5/lib/index-next';\nimport * as parse5 from 'parse5';\nimport * as path from 'path';\n\nimport {htmlTransform} from '../html-transform';\n\nimport {assertEqualIgnoringWhitespace} from './util';\n\n/**\n * Replaces the Babel helpers, Require.js AMD loader, and WCT hack inline\n * scripts into just some comments, to make test comparison simpler.\n */\nfunction replaceGiantScripts(html: string): string {\n  const document = parse5.parse(html);\n  for (const script of dom5.queryAll(\n           document, dom5.predicates.hasTagName('script'))) {\n    const js = dom5.getTextContent(script);\n    if (js.includes('window.define=')) {\n      dom5.setTextContent(script, '// amd loader');\n    } else if (js.includes('wrapNativeSuper=')) {\n      dom5.setTextContent(script, '// babel helpers full');\n    } else if (js.includes('interopRequireDefault=')) {\n      dom5.setTextContent(script, '// babel helpers amd');\n    } else if (js.includes('regeneratorRuntime')) {\n      dom5.setTextContent(script, '// regenerator runtime');\n    } else if (js.includes('window._wctCallback =')) {\n      dom5.setTextContent(script, '// wct hack 1/2');\n    } else if (js.includes('window._wctCallback()')) {\n      dom5.setTextContent(script, '// wct hack 2/2');\n    }\n  }\n  return parse5.serialize(document);\n}\n\nsuite('htmlTransform', () => {\n  const fixtureRoot =\n      path.join(__dirname, '..', '..', 'test-fixtures', 'npm-modules');\n\n  test('minifies html', () => {\n    const input = `\n      <html>\n        <body>\n          <!-- pointless comment -->\n          <p>Hello World!</p>\n        </body>\n      </html>`;\n\n    const expected = `<html><body><p>Hello World!</p></body></html>`;\n\n    assert.equal(htmlTransform(input, {minifyHtml: true}), expected);\n  });\n\n  test('does not add unnecessary tags', () => {\n    const input = `<p>Just me</p>`;\n    assert.equal(htmlTransform(input, {}), input);\n  });\n\n  test('compiles inline JavaScript to ES5', () => {\n    const input = `\n      <html><head></head><body>\n        <script>const foo = 3;</script>\n      </body></html>`;\n\n    const expected = `\n      <html><head></head><body>\n        <script>var foo = 3;</script>\n      </body></html>`;\n\n    assertEqualIgnoringWhitespace(\n        htmlTransform(input, {js: {compile: true}}), expected);\n  });\n\n  test('minifies inline JavaScript', () => {\n    const input = `\n      <html><head></head><body>\n        <script>const foo = 3;</script>\n      </body></html>`;\n\n    const expected = `\n      <html><head></head><body>\n        <script>const foo=3;</script>\n      </body></html>`;\n\n    assertEqualIgnoringWhitespace(\n        htmlTransform(input, {js: {minify: true}}), expected);\n  });\n\n  test('injects full babel helpers', () => {\n    const input = `\n      <html><head></head><body>\n        <script>const foo = 3;</script>\n      </body></html>`;\n\n    const expected = `\n      <html><head></head><body>\n        <script>// babel helpers full</script>\n        <script>const foo = 3;</script>\n      </body></html>`;\n\n    const result = htmlTransform(input, {injectBabelHelpers: 'full'});\n    assertEqualIgnoringWhitespace(replaceGiantScripts(result), expected);\n  });\n\n  test('injects AMD babel helpers', () => {\n    const input = `\n      <html><head></head><body>\n        <script>const foo = 3;</script>\n      </body></html>`;\n\n    const expected = `\n      <html><head></head><body>\n        <script>// babel helpers amd</script>\n        <script>const foo = 3;</script>\n      </body></html>`;\n\n    const result = htmlTransform(input, {injectBabelHelpers: 'amd'});\n    assertEqualIgnoringWhitespace(replaceGiantScripts(result), expected);\n  });\n\n  test('injects regenerator runtime', () => {\n    const input = `\n      <html><head></head><body>\n        <script>const foo = 3;</script>\n      </body></html>`;\n\n    const expected = `\n      <html><head></head><body>\n        <script>// regenerator runtime</script>\n        <script>const foo = 3;</script>\n      </body></html>`;\n\n    const result = htmlTransform(input, {injectRegeneratorRuntime: true});\n    assertEqualIgnoringWhitespace(replaceGiantScripts(result), expected);\n  });\n\n  test('rewrites bare module specifiers to paths', () => {\n    const filePath = path.join(fixtureRoot, 'foo.html');\n\n    const input = `\n      <html><head></head><body>\n        <script type=\"module\">\n          import { dep1 } from 'dep1';\n        </script>\n      </body></html>`;\n\n    const expected = `\n      <html><head></head><body>\n        <script type=\"module\">\n          import { dep1 } from \"./node_modules/dep1/index.js\";\n        </script>\n      </body></html>`;\n\n    assertEqualIgnoringWhitespace(\n        htmlTransform(input, {js: {moduleResolution: 'node', filePath}}),\n        expected);\n  });\n\n  suite('transform ES modules to AMD', () => {\n    test('external script', () => {\n      const input = `\n        <html><head></head><body>\n          <script type=\"module\" src=\"depA.js\"></script>\n        </body></html>`;\n\n      const expected = `\n        <html><head></head><body>\n          <script>define(['depA.js']);</script>\n        </body></html>`;\n\n      assertEqualIgnoringWhitespace(\n          htmlTransform(input, {\n            js: {\n              transformModulesToAmd: true,\n            }\n          }),\n          expected);\n    });\n\n    test('inline script', () => {\n      const input = `\n        <html><head></head><body>\n          <script type=\"module\">\n            import { depA } from './depA.js';\n            console.log(depA);\n          </script>\n        </body></html>`;\n\n      const expected = `\n        <html><head></head><body>\n          <script>\n            define([\"./depA.js\"], function (_depA) {\n              \"use strict\";\n              console.log(_depA.depA);\n            });\n          </script>\n        </body></html>`;\n\n      assertEqualIgnoringWhitespace(\n          htmlTransform(input, {\n            js: {\n              transformModulesToAmd: true,\n              filePath: path.join(fixtureRoot, 'foo.html'),\n              rootDir: fixtureRoot,\n            },\n          }),\n          expected);\n    });\n\n    test('chains inline and external module scripts', () => {\n      const input = `\n        <html><head></head><body>\n          <script type=\"module\">import { depA } from './depA.js';</script>\n          <script type=\"module\" src=\"./depB.js\"></script>\n          <script type=\"module\">import { depC } from './depC.js';</script>\n          <script type=\"module\">'no imports';</script>\n          <script type=\"module\" src=\"./depD.js\"></script>\n        </body></html>`;\n\n      const expected = `\n      <html><head></head><body>\n        <script>define([\"./depA.js\"], function (_depA) {\"use strict\";});</script>\n        <script>define(['./depB.js']);</script>\n        <script>define([\"./depC.js\"], function (_depC) {\"use strict\";});</script>\n        <script>define([], function () {\"use strict\";'no imports';});</script>\n        <script>define(['./depD.js']);</script>\n      </body></html>`;\n\n      assertEqualIgnoringWhitespace(\n          htmlTransform(input, {\n            js: {\n              transformModulesToAmd: true,\n              filePath: path.join(fixtureRoot, 'foo.html'),\n              rootDir: fixtureRoot,\n            }\n          }),\n          expected);\n    });\n\n    test('resolves names and does AMD transform', () => {\n      const input = `\n        <html><head></head><body>\n          <script type=\"module\">import { dep1 } from 'dep1';</script>\n        </body></html>`;\n\n      const expected = `\n      <html><head></head><body>\n        <script>define([\"./node_modules/dep1/index.js\"], function (_index) {\"use strict\";});</script>\n      </body></html>`;\n\n      assertEqualIgnoringWhitespace(\n          htmlTransform(input, {\n            js: {\n              transformModulesToAmd: true,\n              moduleResolution: 'node',\n              filePath: path.join(fixtureRoot, 'foo.html'),\n              rootDir: fixtureRoot,\n            }\n          }),\n          expected);\n    });\n\n    test('compiles non-module script without AMD plugin', () => {\n      const input = `\n        <html><head></head><body>\n          <script>const foo = 3;</script>\n        </body></html>`;\n\n      const expected = `\n        <html><head></head><body>\n          <script>var foo = 3;</script>\n        </body></html>`;\n\n      assertEqualIgnoringWhitespace(\n          htmlTransform(input, {\n            js: {\n              compile: true,\n              transformModulesToAmd: true,\n            }\n          }),\n          expected);\n    });\n\n    test('does not transform when \"nomodule\" script present', () => {\n      const input = `\n        <html><head></head><body>\n          <script type=\"module\">\n            import { depA } from './depA.js';\n            console.log(depA);\n          </script>\n\n          <script nomodule=\"\">\n            // Handle browsers without ES modules some other way.\n          </script>\n        </body></html>`;\n\n      assertEqualIgnoringWhitespace(\n          htmlTransform(input, {js: {transformModulesToAmd: true}}), input);\n    });\n\n    test('adds AMD loader to entry point before first module', () => {\n      const input = `\n        <html><head></head><body>\n          <script>console.log('non-module');</script>\n\n          <script type=\"module\" src=\"depA.js\"></script>\n        </body></html>`;\n\n      const expected = `\n        <html><head></head><body>\n          <script>console.log('non-module');</script>\n\n          <script>// amd loader</script>\n\n          <script>define(['depA.js']);</script>\n        </body></html>`;\n\n      const result = htmlTransform(input, {\n        injectAmdLoader: true,\n        js: {\n          transformModulesToAmd: true,\n        },\n      });\n      assertEqualIgnoringWhitespace(replaceGiantScripts(result), expected);\n    });\n\n    test('does not add AMD loader when no modules', () => {\n      const input = `\n        <html><head></head><body>\n          <script>console.log('non-module');</script>\n          <script src=\"depA.js\"></script>\n        </body></html>`;\n\n      const result = htmlTransform(input, {\n        injectAmdLoader: true,\n        js: {\n          transformModulesToAmd: true,\n        },\n      });\n      assertEqualIgnoringWhitespace(result, input);\n    });\n\n    test('adds hack for Web Component Tester', () => {\n      const input = `\n        <html><head></head><body>\n          <script src=\"web-component-tester/browser.js\"></script>\n\n          <script type=\"module\" src=\"depA.js\"></script>\n        </body></html>`;\n\n      const expected = `\n        <html><head></head><body>\n          <script>// wct hack 1/2</script>\n\n          <script src=\"web-component-tester/browser.js\"></script>\n\n          <script>// amd loader</script>\n\n          <script>// wct hack 2/2</script>\n\n          <script>define(['depA.js']);</script>\n        </body></html>`;\n\n      const result = htmlTransform(input, {\n        injectAmdLoader: true,\n        js: {\n          transformModulesToAmd: true,\n        },\n      });\n      assertEqualIgnoringWhitespace(replaceGiantScripts(result), expected);\n    });\n  });\n});\n"]}