{"version":3,"sources":["../src/test/babel-plugin-dynamic-import-amd_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,yCAAyC;AACzC,4CAA6C;AAC7C,+BAA4B;AAE5B,wFAAoE;AAEpE,MAAM,wBAAwB,GAAG,OAAO,CAAC,qCAAqC,CAAC,CAAC;AAEhF,KAAK,CAAC,oCAAoC,EAAE,GAAG,EAAE;IAC/C,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE;QAC/B,MAAM,KAAK,GAAG,WAAW,CAAC;;KAEzB,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,WAAW,CAAC;;;KAG5B,CAAC,CAAC;QACH,MAAM,MAAM,GACR,SAAS,CAAC,SAAS,CAAC,KAAK,EAAE,EAAC,OAAO,EAAE,CAAC,kDAAgB,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC;QACnE,aAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,mCAAmC,EAAE,GAAG,EAAE;QAC7C,MAAM,KAAK,GAAG,WAAW,CAAC;;;;;;;KAOzB,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,WAAW,CAAC;;;;;;;;KAQ5B,CAAC,CAAC;QACH,MAAM,MAAM,GACR,SAAS,CAAC,SAAS,CAAC,KAAK,EAAE,EAAC,OAAO,EAAE,CAAC,kDAAgB,CAAC,EAAC,CAAC,CAAC,IAAI,CAAC;QACnE,aAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACzC,MAAM,KAAK,GAAG,WAAW,CAAC;;;KAGzB,CAAC,CAAC;QACH,MAAM,MAAM,GACR,SAAS;aACJ,SAAS,CACN,KAAK,EAAE,EAAC,OAAO,EAAE,CAAC,kDAAgB,EAAE,wBAAwB,CAAC,EAAC,CAAC;aAClE,IAAI,CAAC;QACd,aAAM,CAAC,OAAO,CACV,MAAM,EAAE,6DAA6D,CAAC,CAAC;QAC3E,aAAM,CAAC,OAAO,CACV,MAAM,EACN,kFAAkF,CAAC,CAAC;IAC1F,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"babel-plugin-dynamic-import-amd_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as babelCore from '@babel/core';\nimport stripIndent = require('strip-indent');\nimport {assert} from 'chai';\n\nimport {dynamicImportAmd} from '../babel-plugin-dynamic-import-amd';\n\nconst babelTransformModulesAmd = require('@babel/plugin-transform-modules-amd');\n\nsuite('babel-plugin-transform-modules-amd', () => {\n  test('transforms import()', () => {\n    const input = stripIndent(`\n      const foo = import('./foo.js');\n    `);\n\n    const expected = stripIndent(`\n      import * as _require from 'require';\n      const foo = new Promise((res, rej) => _require.default(['./foo.js'], res, rej));\n    `);\n    const result =\n        babelCore.transform(input, {plugins: [dynamicImportAmd]}).code;\n    assert.equal(result.trim(), expected.trim());\n  });\n\n  test('chooses unique name for require()', () => {\n    const input = stripIndent(`\n      let _require = true;\n      const foo = import('./foo.js');\n      {\n        let _require2 = true;\n        import('./bar.js');\n      }\n    `);\n\n    const expected = stripIndent(`\n      import * as _require3 from 'require';\n      let _require = true;\n      const foo = new Promise((res, rej) => _require3.default(['./foo.js'], res, rej));\n      {\n        let _require2 = true;\n        new Promise((res, rej) => _require3.default(['./bar.js'], res, rej));\n      }\n    `);\n    const result =\n        babelCore.transform(input, {plugins: [dynamicImportAmd]}).code;\n    assert.equal(result.trim(), expected.trim());\n  });\n\n  test('integrates with AMD transform', () => {\n    const input = stripIndent(`\n      import {bar} from './bar.js';\n      const foo = import('./foo.js');\n    `);\n    const result =\n        babelCore\n            .transform(\n                input, {plugins: [dynamicImportAmd, babelTransformModulesAmd]})\n            .code;\n    assert.include(\n        result, `define([\"require\", \"./bar.js\"], function (_require, _bar) {`);\n    assert.include(\n        result,\n        `const foo = new Promise((res, rej) => _require.default(['./foo.js'], res, rej));`);\n  });\n});\n"]}