{"version":3,"sources":["../src/test/polymer-project_test.ts"],"names":[],"mappings":"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","file":"polymer-project_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport {Analyzer, FsUrlLoader, FsUrlResolver, PackageRelativeUrl, ResolvedUrl} from 'polymer-analyzer';\nimport {Bundle} from 'polymer-bundler/lib/bundle-manifest';\n\nimport File = require('vinyl');\nimport * as path from 'path';\n\nimport {getFlowingState} from './util';\nimport {PolymerProject} from '../polymer-project';\nimport {waitFor} from '../streams';\nconst testProjectRoot = path.resolve('test-fixtures/test-project');\n\nsuite('PolymerProject', () => {\n  let defaultProject: PolymerProject;\n\n  const unroot = ((p: string) => p.substring(testProjectRoot.length + 1));\n\n  setup(() => {\n    defaultProject = new PolymerProject({\n      root: 'test-fixtures/test-project/',\n      entrypoint: 'index.html',\n      shell: 'shell.html',\n      sources: [\n        'source-dir/**',\n      ],\n    });\n  });\n\n  test('will not throw an exception when created with minimum options', () => {\n    new PolymerProject({\n      root: 'test-fixtures/test-project/',\n    });\n  });\n\n  test('reads sources', (done) => {\n    const files: File[] = [];\n    defaultProject.sources()\n        .on('data', (f: File) => files.push(f))\n        .on('end', () => {\n          const names = files.map((f) => unroot(f.path));\n          const expected = [\n            'index.html',\n            'shell.html',\n            path.join('source-dir', 'my-app.html'),\n            path.join('source-dir', 'shell.js'),\n            path.join('source-dir', 'style.css'),\n          ];\n          assert.deepEqual(names.sort(), expected);\n          done();\n        });\n  });\n\n  test('the sources & dependencies streams remain paused until use', () => {\n    // Check that data isn't flowing through sources until consumer usage\n    const sourcesStream = defaultProject.sources();\n    assert.isNull(getFlowingState(sourcesStream));\n    sourcesStream.on('data', () => {});\n    assert.isTrue(getFlowingState(sourcesStream));\n\n    // Check that data isn't flowing through dependencies until consumer usage\n    const dependencyStream = defaultProject.dependencies();\n    assert.isNull(getFlowingState(dependencyStream));\n    dependencyStream.on('data', () => {});\n    assert.isTrue(getFlowingState(dependencyStream));\n  });\n\n  suite('.bundler()', () => {\n    test('returns a different bundler each time', () => {\n      const bundlerA = defaultProject.bundler();\n      const bundlerB = defaultProject.bundler();\n      assert.notEqual(bundlerA, bundlerB);\n    });\n\n    test('takes options to configure bundler', () => {\n      const urlResolver = new FsUrlResolver('test-fixtures/test-project');\n      const bundler = defaultProject.bundler({\n        analyzer: new Analyzer({\n          urlResolver,\n          urlLoader: new FsUrlLoader('test-fixtures/test-project')\n        }),\n        excludes: ['bower_components/loads-external-dependencies.html'].map(\n            (p) => urlResolver.resolve(p as PackageRelativeUrl)!),\n        inlineCss: true,\n        inlineScripts: false,\n        rewriteUrlsInTemplates: true,\n        stripComments: true,\n        strategy: (b) => b,\n        // TODO(usergenic): Replace this with a BundleUrlMapper when\n        // https://github.com/Polymer/polymer-bundler/pull/483 is released.\n        urlMapper: (b) =>\n            new Map(<[ResolvedUrl, Bundle][]>b.map((b) => ['x', b])),\n      });\n      assert.isOk(bundler);\n    });\n  });\n\n  suite('.dependencies()', () => {\n    test('reads dependencies', (done) => {\n      const files: File[] = [];\n      const dependencyStream = defaultProject.dependencies();\n      dependencyStream.on('data', (f: File) => files.push(f));\n      dependencyStream.on('end', () => {\n        const names = files.map((f) => unroot(f.path));\n        const expected = [\n          path.join('bower_components', 'dep.html'),\n          path.join('bower_components', 'loads-external-dependencies.html'),\n        ];\n        assert.deepEqual(names.sort(), expected);\n        done();\n      });\n    });\n\n    const testName =\n        'reads dependencies in a monolithic (non-shell) application without timing out';\n    test(testName, () => {\n      const project = new PolymerProject({\n        root: testProjectRoot,\n        entrypoint: 'index.html',\n        sources: [\n          'source-dir/**',\n          'index.html',\n          'shell.html',\n        ],\n      });\n\n      const sourcesStream = project.sources();\n      const dependencyStream = project.dependencies();\n      sourcesStream.on('data', () => {});\n      dependencyStream.on('data', () => {});\n      return Promise.all(\n          [waitFor(project.sources()), waitFor(dependencyStream)]);\n    });\n\n    test(\n        'reads dependencies and includes additionally provided files',\n        (done) => {\n          const files: File[] = [];\n          const projectWithIncludedDeps = new PolymerProject({\n            root: testProjectRoot,\n            entrypoint: 'index.html',\n            shell: 'shell.html',\n            sources: [\n              'source-dir/**',\n            ],\n            extraDependencies: [\n              'bower_components/unreachable*',\n            ],\n          });\n\n          const dependencyStream = projectWithIncludedDeps.dependencies();\n          dependencyStream.on('data', (f: File) => files.push(f));\n          dependencyStream.on('error', done);\n          dependencyStream.on('end', () => {\n            const names = files.map((f) => unroot(f.path));\n            const expected = [\n              path.join('bower_components', 'dep.html'),\n              path.join('bower_components', 'loads-external-dependencies.html'),\n              path.join('bower_components', 'unreachable-dep.html'),\n            ];\n            assert.deepEqual(names.sort(), expected);\n            done();\n          });\n        });\n  });\n});\n"]}