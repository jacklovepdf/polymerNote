{"version":3,"sources":["../src/inject-babel-helpers.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,qDAA+C;AAC/C,uCAAgE;AAIhE;;;GAGG;AACH,0BAAkC,SAAQ,8BAAgC;IACxE,YAAoB,UAAkB;QACpC,KAAK,CAAC,EAAC,UAAU,EAAE,IAAI,EAAC,CAAC,CAAC;QADR,eAAU,GAAV,UAAU,CAAQ;IAEtC,CAAC;IAEiB,cAAc,CAAC,KAA0B;;;gBACzD,KAAyB,IAAA,UAAA,cAAA,KAAK,CAAA,WAAA;oBAAnB,MAAM,IAAI,iCAAA,CAAA;oBACnB,MAAM,cAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA,CAAC;iBACpC;;;;;;;;;;QACH,CAAC;KAAA;IAEa,WAAW,CAAC,IAAU;;YAClC,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,EAAE;gBACjC,OAAO,IAAI,CAAC;aACb;YACD,MAAM,QAAQ,GAAG,MAAM,yBAAe,CAAC,IAAI,CAAC,CAAC;YAC7C,MAAM,WAAW,GAAG,8BAAa,CAAC,QAAQ,EAAE,EAAC,kBAAkB,EAAE,MAAM,EAAC,CAAC,CAAC;YAC1E,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;YAC7B,OAAO,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YACpD,OAAO,OAAO,CAAC;QACjB,CAAC;KAAA;CACF;AArBD,oDAqBC","file":"inject-babel-helpers.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {htmlTransform} from './html-transform';\nimport {AsyncTransformStream, getFileContents} from './streams';\n\nimport File = require('vinyl');\n\n/**\n * When compiling to ES5 we need to inject Babel's helpers into a global so\n * that they don't need to be included with each compiled file.\n */\nexport class BabelHelpersInjector extends AsyncTransformStream<File, File> {\n  constructor(private entrypoint: string) {\n    super({objectMode: true});\n  }\n\n  protected async * _transformIter(files: AsyncIterable<File>) {\n    for await (const file of files) {\n      yield await this.processFile(file);\n    }\n  }\n\n  private async processFile(file: File): Promise<File> {\n    if (file.path !== this.entrypoint) {\n      return file;\n    }\n    const contents = await getFileContents(file);\n    const transformed = htmlTransform(contents, {injectBabelHelpers: 'full'});\n    const newFile = file.clone();\n    newFile.contents = new Buffer(transformed, 'utf-8');\n    return newFile;\n  }\n}\n"]}