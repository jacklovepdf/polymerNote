{"version":3,"sources":["../src/path-transformers.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AAEH;;;;;;GAMG;AAEH,6BAA6B;AAY7B;;;;;GAKG;AACH,qBACI,IAAiB,EAAE,MAAmB;IACxC,MAAM,WAAW,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;IACzC,MAAM,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;IAErC,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IAEjE,yEAAyE;IACzE,wEAAwE;IACxE,sCAAsC;IACtC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC3C,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;QAClC,MAAM,IAAI,KAAK,CAAC,+BAA+B,MAAM,KAAK,IAAI,GAAG,CAAC,CAAC;KACpE;IAED,OAAO,SAAS,CAAC,YAAY,CAAuB,CAAC;AACvD,CAAC;AAhBD,kCAgBC;AAED;;GAEG;AACH,qBACI,IAAiB;AACjB,0EAA0E;AAC1E,wEAAwE;AACxE,qDAAqD;AACrD,oEAAoE;AACpE,GAAuB;IACzB,OAAO,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAC7C,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAgB,CAAC;AAC7E,CAAC;AATD,kCASC;AAED;;;;;;;;GAQG;AACH,sBAA6B,QAAqB;IAChD,2EAA2E;IAC3E,2EAA2E;IAC3E,4BAA4B;IAC5B,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,EAAE;QACrB,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAA0B,CAAC;KAClE;IACD,OAAO,QAA+B,CAAC;AACzC,CAAC;AARD,oCAQC","file":"path-transformers.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * CODE ADAPTED FROM THE \"SLASH\" LIBRARY BY SINDRE SORHUS\n * https://github.com/sindresorhus/slash\n *\n * ORIGINAL LICENSE:\n * The MIT License (MIT)\n *\n * Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)*\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy*\n * of this software and associated documentation files (the \"Software\"), to\n * deal*\n * in the Software without restriction, including without limitation the rights*\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell*\n * copies of the Software, and to permit persons to whom the Software is*\n * furnished to do so, subject to the following conditions:*\n *\n * The above copyright notice and this permission notice shall be included in*\n * all copies or substantial portions of the Software.*\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR*\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,*\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE*\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER*\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM,*\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN*\n * THE SOFTWARE.\n */\n\n/**\n * This module consists of functions for transformations to filesystem and url\n * paths.\n * TODO(usergenic): We should consider migrating the responsibility of\n * path-related string transformation to a package like `upath`.\n * Please see: https://www.npmjs.com/package/upath\n */\n\nimport * as path from 'path';\nimport {PackageRelativeUrl} from 'polymer-analyzer';\n\nexport declare class LocalFsPathBrand {\n  private LocalFsPathBrand: never;\n}\nexport type LocalFsPath = string&LocalFsPathBrand;\nexport declare class PosixPathBrand {\n  private PosixPathBrand: never;\n}\nexport type PosixPath = string&PosixPathBrand;\n\n/**\n * Returns a properly encoded URL representing the relative URL from the root\n * to the target.  This function will throw an error if the target is outside\n * the root.  We use this to map a file from the filesystem to the relative\n * URL that represents it in the build.\n */\nexport function urlFromPath(\n    root: LocalFsPath, target: LocalFsPath): PackageRelativeUrl {\n  const targetPosix = posixifyPath(target);\n  const rootPosix = posixifyPath(root);\n\n  const relativePath = path.posix.relative(rootPosix, targetPosix);\n\n  // The startsWith(root) check is important on Windows because of the case\n  // where paths have different drive letters.  The startsWith('../') will\n  // catch the general not-in-root case.\n  if (!targetPosix.startsWith(posixifyPath(root)) ||\n      relativePath.startsWith('../')) {\n    throw new Error(`target path is not in root: ${target} (${root})`);\n  }\n\n  return encodeURI(relativePath) as PackageRelativeUrl;\n}\n\n/**\n * Returns a filesystem path for the url, relative to the root.\n */\nexport function pathFromUrl(\n    root: LocalFsPath,\n    // TODO(usergenic): PackageRelativeUrl are not *necessarily* always just a\n    // relative path from root.  Maybe subclass as PackageRelativeUrlPath or\n    // something if this function doesn't disappear after\n    // https://github.com/Polymer/polymer-build/issues/324 is addressed.\n    url: PackageRelativeUrl): LocalFsPath {\n  return path.normalize(decodeURIComponent(path.posix.join(\n             posixifyPath(root), path.posix.join('/', url)))) as LocalFsPath;\n}\n\n/**\n * Returns a string where all Windows path separators are converted to forward\n * slashes.\n * NOTE(usergenic): We will generate only canonical Windows paths, but this\n * function is exported so that we can create a forward-slashed Windows root\n * path when dealing with the `sw-precache` library, which uses `glob` npm\n * module generates only forward-slash paths in building its `precacheConfig`\n * map.\n */\nexport function posixifyPath(filepath: LocalFsPath): PosixPath {\n  // We don't want to change backslashes to forward-slashes in the case where\n  // we're already on posix environment, because they would be intentional in\n  // that case (albeit weird.)\n  if (path.sep === '\\\\') {\n    filepath = filepath.replace(/\\\\/g, '/') as string as LocalFsPath;\n  }\n  return filepath as string as PosixPath;\n}\n"]}