{"version":3,"sources":["../src/custom-elements-es5-adapter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,4CAA4C;AAC5C,oDAAoD;AACpD,iCAAiC;AACjC,2BAA2B;AAG3B,uCAAgE;AAEhE,MAAM,gBAAgB,GAAG,CAAC,QAAgB,EAAE,KAAa,EAAE,EAAE;IAC3D,OAAO,CAAC,IAAoB,EAAE,EAAE;QAC9B,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACpD,OAAO,SAAS,IAAI,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACpD,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,wBAAwB,GAAG,6CAA6C,CAAC;AAC/E,MAAM,0BAA0B,GAAG,uBAAC,CAAC,GAAG,CACpC,uBAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,gBAAgB,CAAC,KAAK,EAAE,wBAAwB,CAAC,CAAC,CAAC;AAE/E;;GAEG;AACH,sCAA8C,SAC1C,8BAAgC;IAClC;QACE,KAAK,CAAC,EAAC,UAAU,EAAE,IAAI,EAAC,CAAC,CAAC;IAC5B,CAAC;IAGG,cAAc,CAAC,KAA0B;;;gBAC3C,KAAyB,IAAA,UAAA,cAAA,KAAK,CAAA,WAAA;oBAAnB,MAAM,IAAI,iCAAA,CAAA;oBACnB,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,EAAE;wBACtD,MAAM,IAAI,CAAC;wBACX,SAAS;qBACV;oBACD,MAAM,QAAQ,GAAG,cAAM,yBAAe,CAAC,IAAI,CAAC,CAAA,CAAC;oBAC7C,MAAM,eAAe,GAAG,2BAA2B,CAAC,QAAQ,CAAC,CAAC;oBAC9D,IAAI,QAAQ,KAAK,eAAe,EAAE;wBAChC,MAAM,IAAI,CAAC;qBACZ;yBAAM;wBACL,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;wBACjC,WAAW,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;wBAC5D,MAAM,WAAW,CAAC;qBACnB;iBACF;;;;;;;;;;QACH,CAAC;KAAA;CACF;AAxBD,4EAwBC;AAED;;;;;;;;;GASG;AACH,qCAA4C,IAAY;IACtD,wEAAwE;IACxE,wEAAwE;IACxE,0EAA0E;IAC1E,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;QACxC,OAAO,IAAI,CAAC;KACb;IACD,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,EAAC,YAAY,EAAE,IAAI,EAAC,CAAC,CAAC;IACxD,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,0BAA0B,CAAC,CAAC;IAC9D,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,IAAI,CAAC;KACb;IAED,qEAAqE;IACrE,MAAM,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,CAAE,CAAC;IAC1D,MAAM,gBAAgB,GAClB,GAAG,CAAC,OAAO,CAAC,eAAe,EAAE,gCAAgC,CAAC,CAAC;IACnE,MAAM,kBAAkB,GAAG,MAAM,CAAC,aAAa,CAAC;;0CAER,gBAAgB;;CAEzD,CAAC,CAAC;IAED,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,UAAW,EAAE,MAAM,EAAE,kBAAkB,CAAC,CAAC;IAClE,OAAO,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AAClC,CAAC;AAzBD,kEAyBC","file":"custom-elements-es5-adapter.js","sourcesContent":["import * as dom5 from 'dom5/lib/index-next';\nimport {predicates as p} from 'dom5/lib/index-next';\nimport * as parse5 from 'parse5';\nimport * as url from 'url';\n\nimport File = require('vinyl');\nimport {AsyncTransformStream, getFileContents} from './streams';\n\nconst attrValueMatches = (attrName: string, regex: RegExp) => {\n  return (node: parse5.ASTNode) => {\n    const attrValue = dom5.getAttribute(node, attrName);\n    return attrValue != null && regex.test(attrValue);\n  };\n};\n\nconst webcomponentsLoaderRegex = /\\bwebcomponents\\-(loader|lite|bundle)\\.js\\b/;\nconst webcomponentsLoaderMatcher = p.AND(\n    p.hasTagName('script'), attrValueMatches('src', webcomponentsLoaderRegex));\n\n/**\n * Wraps `addCustomElementsEs5Adapter()` in a `stream.Transform`.\n */\nexport class CustomElementsEs5AdapterInjector extends\n    AsyncTransformStream<File, File> {\n  constructor() {\n    super({objectMode: true});\n  }\n\n  protected async *\n      _transformIter(files: AsyncIterable<File>): AsyncIterable<File> {\n    for await (const file of files) {\n      if (file.contents === null || file.extname !== '.html') {\n        yield file;\n        continue;\n      }\n      const contents = await getFileContents(file);\n      const updatedContents = addCustomElementsEs5Adapter(contents);\n      if (contents === updatedContents) {\n        yield file;\n      } else {\n        const updatedFile = file.clone();\n        updatedFile.contents = new Buffer(updatedContents, 'utf-8');\n        yield updatedFile;\n      }\n    }\n  }\n}\n\n/**\n * Please avoid using this function because the API is likely to change. Prefer\n * the interface provided by `PolymerProject.addCustomElementsEs5Adapter`.\n *\n * When compiling ES6 classes down to ES5 we need to include a special shim so\n * that compiled custom elements will still work on browsers that support native\n * custom elements.\n *\n * TODO(fks) 03-28-2017: Add tests.\n */\nexport function addCustomElementsEs5Adapter(html: string): string {\n  // Only modify this file if we find a web components polyfill. This is a\n  // heuristic to identify the entry point HTML file. Ultimately we should\n  // explicitly transform only the entry point by having the project config.\n  if (!webcomponentsLoaderRegex.test(html)) {\n    return html;\n  }\n  const parsed = parse5.parse(html, {locationInfo: true});\n  const script = dom5.query(parsed, webcomponentsLoaderMatcher);\n  if (!script) {\n    return html;\n  }\n\n  // Collect important dom references & create fragments for injection.\n  const loaderScriptUrl = dom5.getAttribute(script, 'src')!;\n  const adapterScriptUrl =\n      url.resolve(loaderScriptUrl, 'custom-elements-es5-adapter.js');\n  const es5AdapterFragment = parse5.parseFragment(`\n    <script>if (!window.customElements) { document.write('<!--'); }</script>\n    <script type=\"text/javascript\" src=\"${adapterScriptUrl}\"></script>\n    <!--! do not remove -->\n`);\n\n  dom5.insertBefore(script.parentNode!, script, es5AdapterFragment);\n  return parse5.serialize(parsed);\n}\n"]}