{"version":3,"sources":["../src/bundle.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport File = require('vinyl');\nimport {ResolvedUrl} from 'polymer-analyzer';\nimport {Bundler, Options, BundleManifest, generateShellMergeStrategy} from 'polymer-bundler';\nimport {ProjectConfig} from 'polymer-project-config';\n\nimport {BuildAnalyzer} from './analyzer';\nimport {FileMapUrlLoader} from './file-map-url-loader';\nimport {pathFromUrl, urlFromPath, LocalFsPath} from './path-transformers';\nimport {AsyncTransformStream} from './streams';\n\nexport {Options} from 'polymer-bundler';\n\nexport class BuildBundler extends AsyncTransformStream<File, File> {\n  config: ProjectConfig;\n\n  private _buildAnalyzer: BuildAnalyzer;\n  private _bundler: Bundler;\n\n  // A map of urls to file objects.  As the transform stream handleds files\n  // coming into the stream, it collects all files here.  After bundlling,\n  // we remove files from this set that have been inlined and replace\n  // entrypoint/fragment files with bundled versions.\n  files = new Map<ResolvedUrl, File>();\n\n  constructor(\n      config: ProjectConfig,\n      buildAnalyzer: BuildAnalyzer,\n      options: Options = {}) {\n    super({objectMode: true});\n\n    this.config = config;\n\n    this._buildAnalyzer = buildAnalyzer;\n\n    const {\n      analyzer,\n      excludes,\n      inlineCss,\n      inlineScripts,\n      rewriteUrlsInTemplates,\n      sourcemaps,\n      stripComments,\n      urlMapper\n    } = options;\n    let {strategy} = options;\n\n    const urlLoader =\n        new FileMapUrlLoader(this.files, analyzer || buildAnalyzer.analyzer);\n    const forkedAnalyzer =\n        (analyzer || buildAnalyzer.analyzer)._fork({urlLoader});\n\n    if (strategy === undefined && this.config.shell !== undefined) {\n      strategy =\n          generateShellMergeStrategy(forkedAnalyzer.resolveUrl(urlFromPath(\n              this.config.root as LocalFsPath,\n              this.config.shell as LocalFsPath))!);\n    }\n\n    this._bundler = new Bundler({\n      analyzer: forkedAnalyzer,\n      excludes,\n      inlineCss,\n      inlineScripts,\n      rewriteUrlsInTemplates,\n      sourcemaps,\n      stripComments,\n      strategy,\n      urlMapper,\n    });\n  }\n\n  protected async *\n      _transformIter(files: AsyncIterable<File>): AsyncIterable<File> {\n    for await (const file of files) {\n      this._mapFile(file);\n    }\n    await this._buildBundles();\n    for (const file of this.files.values()) {\n      yield file;\n    }\n  }\n\n  private async _buildBundles() {\n    // Tell the analyzer about changed files so it can purge them from its cache\n    // before using the analyzer for bundling.\n    await this._bundler.analyzer.filesChanged(\n        this._getFilesChangedSinceInitialAnalysis());\n\n    const {documents, manifest} =\n        await this._bundler.bundle(await this._generateBundleManifest());\n    // Remove the bundled files from the file map so they are not emitted later.\n    this._unmapBundledFiles(manifest);\n\n    // Map the bundles into the file map.\n    for (const [url, document] of documents) {\n      this._mapFile(new File({\n        path: pathFromUrl(\n            this.config.root as LocalFsPath,\n            this._bundler.analyzer.urlResolver.relative(url)),\n        contents: new Buffer(document.content),\n      }));\n    }\n  }\n\n  private async _generateBundleManifest(): Promise<BundleManifest> {\n    const entrypoints = this.config.allFragments.map(\n        (e) => this._bundler.analyzer.resolveUrl(\n            urlFromPath(this.config.root as LocalFsPath, e as LocalFsPath))!);\n    return this._bundler.generateManifest(entrypoints);\n  }\n\n  private _getFilesChangedSinceInitialAnalysis(): string[] {\n    const filesChanged = [];\n    for (const [url, originalFile] of this._buildAnalyzer.files) {\n      const downstreamFile =\n          this.files.get(this._buildAnalyzer.analyzer.resolveUrl(url)!);\n      if (downstreamFile == null) {\n        throw new Error(\n            `Internal error: could not find downstreamFile at ${url}`);\n      }\n      if (downstreamFile.contents!.toString() !==\n          originalFile.contents!.toString()) {\n        filesChanged.push(url);\n      }\n    }\n    return filesChanged;\n  }\n\n  private _mapFile(file: File) {\n    this.files.set(\n        this._buildAnalyzer.analyzer.resolveUrl(urlFromPath(\n            this.config.root as LocalFsPath, file.path as LocalFsPath))!,\n        file);\n  }\n\n  /**\n   * Removes all of the inlined files in a bundle manifest from the filemap.\n   */\n  private _unmapBundledFiles(manifest: BundleManifest) {\n    for (const {\n           files,\n           inlinedHtmlImports,\n           inlinedScripts,\n           inlinedStyles,\n         } of manifest.bundles.values()) {\n      for (const url\n               of [...files,\n                   ...inlinedHtmlImports,\n                   ...inlinedScripts,\n                   ...inlinedStyles]) {\n        // Don't unmap the bundle file url itself.\n        if (!manifest.bundles.has(url)) {\n          this.files.delete(url);\n        }\n      }\n    }\n  }\n}\n"]}