{"version":3,"sources":["../src/prefetch-links.ts"],"names":[],"mappings":"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","file":"prefetch-links.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as dom5 from 'dom5/lib/index-next';\nimport * as parse5 from 'parse5';\nimport * as path from 'path';\nimport {Analyzer, PackageRelativeUrl, ResolvedUrl, UrlResolver} from 'polymer-analyzer';\nimport {ProjectConfig} from 'polymer-project-config';\n\nimport File = require('vinyl');\n\nimport {pathFromUrl, urlFromPath, LocalFsPath} from './path-transformers';\nimport {FileMapUrlLoader} from './file-map-url-loader';\nimport {AsyncTransformStream} from './streams';\n\n/**\n * A stream that modifies HTML files to include prefetch links for all of the\n * file's transitive dependencies.\n */\nexport class AddPrefetchLinks extends AsyncTransformStream<File, File> {\n  files: Map<ResolvedUrl, File>;\n  private _analyzer: Analyzer;\n  private _config: ProjectConfig;\n\n  constructor(config: ProjectConfig) {\n    super({objectMode: true});\n    this.files = new Map();\n    this._config = config;\n    this._analyzer =\n        new Analyzer({urlLoader: new FileMapUrlLoader(this.files)});\n  }\n\n  protected async *\n      _transformIter(files: AsyncIterable<File>): AsyncIterable<File> {\n    const htmlFileUrls: ResolvedUrl[] = [];\n\n    // Map all files; pass-through all non-HTML files.\n    for await (const file of files) {\n      const fileUrl = this._analyzer.resolveUrl(urlFromPath(\n          this._config.root as LocalFsPath, file.path as LocalFsPath))!;\n      this.files.set(fileUrl, file);\n      if (path.extname(file.path) !== '.html') {\n        yield file;\n      } else {\n        htmlFileUrls.push(fileUrl);\n      }\n    }\n\n    // Analyze each HTML file and add prefetch links.\n    const analysis = await this._analyzer.analyze(htmlFileUrls);\n\n    for (const documentUrl of htmlFileUrls) {\n      const result = analysis.getDocument(documentUrl);\n\n      if (result.successful === false) {\n        const message = result.error && result.error.message;\n        console.warn(`Unable to get document ${documentUrl}: ${message}`);\n        continue;\n      }\n\n      const document = result.value;\n      const allDependencyUrls =\n          [...document.getFeatures({\n            kind: 'import',\n            externalPackages: true,\n            imported: true,\n            noLazyImports: true\n          })].filter((d) => d.document !== undefined && !d.lazy)\n              .map((d) => d.document!.url);\n\n      const directDependencyUrls =\n          [...document.getFeatures({\n            kind: 'import',\n            externalPackages: true,\n            imported: false,\n            noLazyImports: true\n          })].filter((d) => d.document !== undefined && !d.lazy)\n              .map((d) => d.document!.url);\n\n      const onlyTransitiveDependencyUrls = allDependencyUrls.filter(\n          (d) => directDependencyUrls.indexOf(d) === -1);\n\n      // No need to transform a file if it has no dependencies to prefetch.\n      if (onlyTransitiveDependencyUrls.length === 0) {\n        yield this.files.get(documentUrl)!;\n        continue;\n      }\n\n      const prefetchUrls = new Set(onlyTransitiveDependencyUrls);\n\n      const html = createLinks(\n          this._analyzer.urlResolver,\n          document.parsedDocument.contents,\n          document.parsedDocument.baseUrl,\n          prefetchUrls,\n          document.url ===\n              this._analyzer.resolveUrl(urlFromPath(\n                  this._config.root as LocalFsPath,\n                  this._config.entrypoint as LocalFsPath)));\n      const filePath = pathFromUrl(\n          this._config.root as LocalFsPath,\n          this._analyzer.urlResolver.relative(documentUrl));\n      yield new File({contents: new Buffer(html, 'utf-8'), path: filePath});\n    }\n  }\n}\n\n/**\n * Returns the given HTML updated with import or prefetch links for the given\n * dependencies. The given url and deps are expected to be project-relative\n * URLs (e.g. \"index.html\" or \"src/view.html\") unless absolute parameter is\n * `true` and there is no base tag in the document.\n */\nexport function createLinks(\n    urlResolver: UrlResolver,\n    html: string,\n    baseUrl: ResolvedUrl,\n    deps: Set<ResolvedUrl>,\n    absolute: boolean = false): string {\n  const ast = parse5.parse(html, {locationInfo: true});\n  const baseTag = dom5.query(ast, dom5.predicates.hasTagName('base'));\n  const baseTagHref = baseTag ? dom5.getAttribute(baseTag, 'href') : '';\n\n  // parse5 always produces a <head> element.\n  const head = dom5.query(ast, dom5.predicates.hasTagName('head'))!;\n  for (const dep of deps) {\n    let href;\n    if (absolute && !baseTagHref) {\n      href = absUrl(urlResolver.relative(dep));\n    } else {\n      href = urlResolver.relative(baseUrl, dep);\n    }\n    const link = dom5.constructors.element('link');\n    dom5.setAttribute(link, 'rel', 'prefetch');\n    dom5.setAttribute(link, 'href', href);\n    dom5.append(head, link);\n  }\n  dom5.removeFakeRootElements(ast);\n  return parse5.serialize(ast);\n}\n\nfunction absUrl(url: string): PackageRelativeUrl {\n  return (url.startsWith('/') ? url : '/' + url) as PackageRelativeUrl;\n}\n"]}