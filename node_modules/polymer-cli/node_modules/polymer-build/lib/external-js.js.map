{"version":3,"sources":["../src/external-js.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,yBAAyB;AACzB,gCAAgC;AAEhC,IAAI,gBAAwB,CAAC;AAC7B;IACE,IAAI,gBAAgB,KAAK,SAAS,EAAE;QAClC,gBAAgB,GAAG,EAAE,CAAC,YAAY,CAC9B,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,2BAA2B,CAAC,EAAE,OAAO,CAAC,CAAC;KACpE;IACD,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAND,kDAMC;AAED,IAAI,eAAuB,CAAC;AAC5B;IACE,IAAI,eAAe,KAAK,SAAS,EAAE;QACjC,eAAe,GAAG,EAAE,CAAC,YAAY,CAC7B,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,0BAA0B,CAAC,EAAE,OAAO,CAAC,CAAC;KACnE;IACD,OAAO,eAAe,CAAC;AACzB,CAAC;AAND,gDAMC;AAED,IAAI,kBAA0B,CAAC;AAC/B;IACE,IAAI,kBAAkB,KAAK,SAAS,EAAE;QACpC,kBAAkB,GAAG,EAAE,CAAC,YAAY,CAChC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,4BAA4B,CAAC,EAAE,OAAO,CAAC,CAAC;KACrE;IACD,OAAO,kBAAkB,CAAC;AAC5B,CAAC;AAND,sDAMC;AAED,IAAI,SAAiB,CAAC;AACtB;IACE,IAAI,SAAS,KAAK,SAAS,EAAE;QAC3B,SAAS;YACL,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,yBAAyB,CAAC,EAAE,OAAO,CAAC,CAAC;KAC1E;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAND,oCAMC","file":"external-js.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as fs from 'fs';\nimport * as pathlib from 'path';\n\nlet babelHelpersFull: string;\nexport function getBabelHelpersFull() {\n  if (babelHelpersFull === undefined) {\n    babelHelpersFull = fs.readFileSync(\n        pathlib.join(__dirname, 'babel-helpers-full.min.js'), 'utf-8');\n  }\n  return babelHelpersFull;\n}\n\nlet babelHelpersAmd: string;\nexport function getBabelHelpersAmd() {\n  if (babelHelpersAmd === undefined) {\n    babelHelpersAmd = fs.readFileSync(\n        pathlib.join(__dirname, 'babel-helpers-amd.min.js'), 'utf-8');\n  }\n  return babelHelpersAmd;\n}\n\nlet regeneratorRuntime: string;\nexport function getRegeneratorRuntime() {\n  if (regeneratorRuntime === undefined) {\n    regeneratorRuntime = fs.readFileSync(\n        pathlib.join(__dirname, 'regenerator-runtime.min.js'), 'utf-8');\n  }\n  return regeneratorRuntime;\n}\n\nlet amdLoader: string;\nexport function getAmdLoader() {\n  if (amdLoader === undefined) {\n    amdLoader =\n        fs.readFileSync(require.resolve('@polymer/esm-amd-loader'), 'utf-8');\n  }\n  return amdLoader;\n}\n"]}