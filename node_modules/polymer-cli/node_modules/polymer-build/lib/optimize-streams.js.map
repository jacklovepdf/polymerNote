{"version":3,"sources":["../src/optimize-streams.ts"],"names":[],"mappings":"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","file":"optimize-streams.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as cssSlam from 'css-slam';\nimport * as gulpif from 'gulp-if';\nimport * as logging from 'plylog';\nimport {JsCompileTarget, ModuleResolutionStrategy} from 'polymer-project-config';\nimport {Transform} from 'stream';\nimport * as vinyl from 'vinyl';\n\nimport matcher = require('matcher');\n\nimport {jsTransform} from './js-transform';\nimport {htmlTransform} from './html-transform';\nimport {isHtmlSplitterFile} from './html-splitter';\n\n// TODO(fks) 09-22-2016: Latest npm type declaration resolves to a non-module\n// entity. Upgrade to proper JS import once compatible .d.ts file is released,\n// or consider writing a custom declaration in the `custom_typings/` folder.\nimport File = require('vinyl');\n\nconst logger = logging.getLogger('cli.build.optimize-streams');\n\nexport type FileCB = (error?: Error, file?: File) => void;\nexport type CSSOptimizeOptions = {\n  stripWhitespace?: boolean;\n};\nexport interface OptimizeOptions {\n  html?: {\n    minify?: boolean|{exclude?: string[]},\n  };\n  css?: {\n    minify?: boolean|{exclude?: string[]},\n  };\n  js?: JsOptimizeOptions;\n  entrypointPath?: string;\n  rootDir?: string;\n}\n\nexport type JsCompileOptions = boolean|JsCompileTarget|{\n  target?: JsCompileTarget;\n  exclude?: string[];\n};\n\nexport interface JsOptimizeOptions {\n  minify?: boolean|{exclude?: string[]};\n  compile?: JsCompileOptions;\n  moduleResolution?: ModuleResolutionStrategy;\n  transformModulesToAmd?: boolean;\n}\n\n/**\n * GenericOptimizeTransform is a generic optimization stream. It can be extended\n * to create a new kind of specific file-type optimizer, or it can be used\n * directly to create an ad-hoc optimization stream for different libraries.\n * If the transform library throws an exception when run, the file will pass\n * through unaffected.\n */\nexport class GenericOptimizeTransform extends Transform {\n  optimizer: (content: string, file: File) => string;\n  optimizerName: string;\n\n  constructor(\n      optimizerName: string,\n      optimizer: (content: string, file: File) => string) {\n    super({objectMode: true});\n    this.optimizer = optimizer;\n    this.optimizerName = optimizerName;\n  }\n\n  _transform(file: File, _encoding: string, callback: FileCB): void {\n    // TODO(fks) 03-07-2017: This is a quick fix to make sure that\n    // \"webcomponentsjs\" files aren't compiled down to ES5, because they contain\n    // an important ES6 shim to make custom elements possible. Remove/refactor\n    // when we have a better plan for excluding some files from optimization.\n    if (!file.path || file.path.indexOf('webcomponentsjs/') >= 0 ||\n        file.path.indexOf('webcomponentsjs\\\\') >= 0) {\n      callback(undefined, file);\n      return;\n    }\n\n    if (file.contents) {\n      try {\n        let contents = file.contents.toString();\n        contents = this.optimizer(contents, file);\n        file.contents = new Buffer(contents);\n      } catch (error) {\n        logger.warn(\n            `${this.optimizerName}: Unable to optimize ${file.path}`,\n            {err: error.message || error});\n      }\n    }\n    callback(undefined, file);\n  }\n}\n\nfunction getCompileTarget(\n    file: vinyl, options: JsOptimizeOptions): JsCompileTarget|boolean {\n  let target: JsCompileTarget|boolean|undefined;\n  const compileOptions = options.compile;\n  if (notExcluded(options.compile)(file)) {\n    if (typeof compileOptions === 'object') {\n      target =\n          (compileOptions.target === undefined) ? true : compileOptions.target;\n    } else {\n      target = compileOptions;\n    }\n    if (target === undefined) {\n      target = false;\n    }\n  } else {\n    target = false;\n  }\n  return target;\n}\n\n/**\n * Transform JavaScript.\n */\nexport class JsTransform extends GenericOptimizeTransform {\n  constructor(options: OptimizeOptions) {\n    const jsOptions: JsOptimizeOptions = options.js || {};\n\n    const shouldMinifyFile =\n        jsOptions.minify ? notExcluded(jsOptions.minify) : () => false;\n\n    const transformer = (content: string, file: File) => {\n      let transformModulesToAmd: boolean|'auto' = false;\n      let moduleScriptIdx;\n\n      if (jsOptions.transformModulesToAmd) {\n        if (isHtmlSplitterFile(file)) {\n          // This is a type=module script in an HTML file. Definitely AMD\n          // transform.\n          transformModulesToAmd = file.isModule === true;\n          moduleScriptIdx = file.moduleScriptIdx;\n        } else {\n          // This is an external script file. Only AMD transform it if it looks\n          // like a module.\n          transformModulesToAmd = 'auto';\n        }\n      }\n\n      return jsTransform(content, {\n        compile: getCompileTarget(file, jsOptions),\n        externalHelpers: true,\n        minify: shouldMinifyFile(file),\n        moduleResolution: jsOptions.moduleResolution,\n        filePath: file.path,\n        rootDir: options.rootDir,\n        transformModulesToAmd,\n        moduleScriptIdx,\n      });\n    };\n\n    super('js-transform', transformer);\n  }\n}\n\n/**\n * Transform HTML.\n */\nexport class HtmlTransform extends GenericOptimizeTransform {\n  constructor(options: OptimizeOptions) {\n    const jsOptions: JsOptimizeOptions = options.js || {};\n\n    const shouldMinifyFile = options.html && options.html.minify ?\n        notExcluded(options.html.minify) :\n        () => false;\n\n    const transformer = (content: string, file: File) => {\n      const transformModulesToAmd =\n          options.js && options.js.transformModulesToAmd;\n      const isEntryPoint =\n          !!options.entrypointPath && file.path === options.entrypointPath;\n\n      let injectBabelHelpers: 'none'|'full'|'amd' = 'none';\n      let injectRegeneratorRuntime = false;\n      if (isEntryPoint) {\n        const compileTarget = getCompileTarget(file, jsOptions);\n        switch (compileTarget) {\n          case 'es5':\n          case true:\n            injectBabelHelpers = 'full';\n            injectRegeneratorRuntime = true;\n            break;\n          case 'es2015':\n          case 'es2016':\n          case 'es2017':\n            injectBabelHelpers = 'full';\n            injectRegeneratorRuntime = false;\n            break;\n          case 'es2018':\n          case false:\n            injectBabelHelpers = transformModulesToAmd ? 'amd' : 'none';\n            injectRegeneratorRuntime = false;\n            break;\n          default:\n            const never: never = compileTarget;\n            throw new Error(`Unexpected compile target ${never}`);\n        }\n      }\n\n      return htmlTransform(content, {\n        js: {\n          transformModulesToAmd,\n          externalHelpers: true,\n          // Note we don't do any other JS transforms here (like compilation),\n          // because we're assuming that HtmlSplitter has run and any inline\n          // scripts will be compiled in their own stream.\n        },\n        minifyHtml: shouldMinifyFile(file),\n        injectBabelHelpers,\n        injectRegeneratorRuntime,\n        injectAmdLoader: isEntryPoint && transformModulesToAmd,\n      });\n    };\n    super('html-transform', transformer);\n  }\n}\n\n/**\n * CSSMinifyTransform minifies CSS that pass through it (via css-slam).\n */\nexport class CSSMinifyTransform extends GenericOptimizeTransform {\n  constructor(private options: CSSOptimizeOptions) {\n    super('css-slam-minify', cssSlam.css);\n  }\n\n  _transform(file: File, encoding: string, callback: FileCB): void {\n    // css-slam will only be run if the `stripWhitespace` option is true.\n    if (this.options.stripWhitespace) {\n      super._transform(file, encoding, callback);\n    }\n  }\n}\n\n/**\n * InlineCSSOptimizeTransform minifies inlined CSS (found in HTML files) that\n * passes through it (via css-slam).\n */\nexport class InlineCSSOptimizeTransform extends GenericOptimizeTransform {\n  constructor(private options: CSSOptimizeOptions) {\n    super('css-slam-inline', cssSlam.html);\n  }\n\n  _transform(file: File, encoding: string, callback: FileCB): void {\n    // css-slam will only be run if the `stripWhitespace` option is true.\n    if (this.options.stripWhitespace) {\n      super._transform(file, encoding, callback);\n    }\n  }\n}\n\n/**\n * Returns an array of optimization streams to use in your build, based on the\n * OptimizeOptions given.\n */\nexport function getOptimizeStreams(options?: OptimizeOptions):\n    NodeJS.ReadWriteStream[] {\n  options = options || {};\n  const streams = [];\n\n  streams.push(gulpif(matchesExt('.js'), new JsTransform(options)));\n  streams.push(gulpif(matchesExt('.html'), new HtmlTransform(options)));\n\n  if (options.css && options.css.minify) {\n    streams.push(gulpif(\n        matchesExtAndNotExcluded('.css', options.css.minify),\n        new CSSMinifyTransform({stripWhitespace: true})));\n    // TODO(fks): Remove this InlineCSSOptimizeTransform stream once CSS\n    // is properly being isolated by splitHtml() & rejoinHtml().\n    streams.push(gulpif(\n        matchesExtAndNotExcluded('.html', options.css.minify),\n        new InlineCSSOptimizeTransform({stripWhitespace: true})));\n  }\n\n  return streams;\n}\n\nexport function matchesExt(extension: string) {\n  return (fs: vinyl) => !!fs.path && fs.relative.endsWith(extension);\n}\n\nfunction notExcluded(option?: JsCompileOptions) {\n  const exclude = typeof option === 'object' && option.exclude || [];\n  return (fs: vinyl) => !exclude.some(\n             (pattern: string) => matcher.isMatch(fs.relative, pattern));\n}\n\nfunction matchesExtAndNotExcluded(extension: string, option: JsCompileOptions) {\n  const a = matchesExt(extension);\n  const b = notExcluded(option);\n  return (fs: vinyl) => a(fs) && b(fs);\n}\n"]}