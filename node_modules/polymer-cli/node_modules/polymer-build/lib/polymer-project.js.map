{"version":3,"sources":["../src/polymer-project.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,kCAAkC;AAElC,mEAAqE;AACrE,uCAAyC;AAEzC,yCAAyC;AACzC,yDAAkD;AAClD,qCAAsE;AACtE,+EAA+E;AAC/E,iEAA4D;AAE5D,qDAAkD;AAClD,mDAAgD;AAEhD,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;AAGpD;IAUE,YAAY,MAA2C;QACrD,IAAI,MAAM,CAAC,WAAW,CAAC,IAAI,KAAK,eAAe,EAAE;YAC/C,IAAI,CAAC,MAAM,GAAkB,MAAM,CAAC;SACrC;aAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YACrC,MAAM,WAAW,GAAG,sCAAa,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YAC7D,IAAI,WAAW,IAAI,IAAI,EAAE;gBACvB,MAAM,IAAI,KAAK,CAAC,oCAAoC,MAAM,EAAE,CAAC,CAAC;aAC/D;YACD,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC;SAC3B;aAAM;YACL,IAAI,CAAC,MAAM,GAAG,IAAI,sCAAa,CAAC,MAAM,CAAC,CAAC;SACzC;QAED,MAAM,CAAC,KAAK,CAAC,sBAAsB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAElD,IAAI,CAAC,QAAQ,GAAG,IAAI,wBAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjD,CAAC;IAED;;;;;;;;OAQG;IACH,OAAO,CAAC,OAA6B;QACnC,OAAO,IAAI,qBAAY,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC/D,CAAC;IAED;;;OAGG;IACH,OAAO;QACL,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IACjC,CAAC;IAED;;;OAGG;IACH,YAAY;QACV,IAAI,kBAAkB,GAClB,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;QAEjC,oEAAoE;QACpE,oEAAoE;QACpE,WAAW;QACX,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5C,MAAM,aAAa,GAAG,cAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE;gBAC5D,OAAO,EAAE,IAAI;gBACb,KAAK,EAAE,IAAI;gBACX,WAAW,EAAE,IAAI;aAClB,CAAC,CAAC;YACH,kBAAkB,GAAG,kBAAkB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SAC7D;QAED,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAED;;;;;OAKG;IACH,gBAAgB;QACd,OAAO,IAAI,iCAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC3C,CAAC;IAED;;;OAGG;IACH,eAAe,CAAC,OAAqB,EAAE,QAA6B;QAElE,OAAO,IAAI,+BAAe,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC7D,CAAC;IAED;;;;OAIG;IACH,2BAA2B;QACzB,OAAO,IAAI,8DAAgC,EAAE,CAAC;IAChD,CAAC;IAED,2BAA2B,CAAC,aAAqB,IAAI,CAAC,MAAM,CAAC,UAAU;QAErE,OAAO,IAAI,2CAAoB,CAAC,UAAU,CAAC,CAAC;IAC9C,CAAC;IAED;;;;OAIG;IACH,aAAa,CAAC,QAAgB;QAC5B,OAAO,IAAI,iCAAc,CAAC,IAAI,CAAC,MAAM,CAAC,UAAyB,EAAE,QAAQ,CAAC,CAAC;IAC7E,CAAC;CACF;AAjHD,wCAiHC","file":"polymer-project.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as logging from 'plylog';\nimport {PackageRelativeUrl} from 'polymer-analyzer';\nimport {ProjectConfig, ProjectOptions} from 'polymer-project-config';\nimport {src as vinylSrc} from 'vinyl-fs';\n\nimport {BuildAnalyzer} from './analyzer';\nimport {BaseTagUpdater} from './base-tag-updater';\nimport {BuildBundler, Options as BuildBundlerOptions} from './bundle';\nimport {CustomElementsEs5AdapterInjector} from './custom-elements-es5-adapter';\nimport {BabelHelpersInjector} from './inject-babel-helpers';\nimport {LocalFsPath} from './path-transformers';\nimport {AddPrefetchLinks} from './prefetch-links';\nimport {AddPushManifest} from './push-manifest';\n\nconst logger = logging.getLogger('polymer-project');\n\n\nexport class PolymerProject {\n  config: ProjectConfig;\n\n  /**\n   * A `Transform` stream that uses polymer-analyzer to analyze the files. It\n   * can be used to get information on dependencies and fragments for the\n   * project once the source & dependency streams have been piped into it.\n   */\n  analyzer: BuildAnalyzer;\n\n  constructor(config: ProjectConfig|ProjectOptions|string) {\n    if (config.constructor.name === 'ProjectConfig') {\n      this.config = <ProjectConfig>config;\n    } else if (typeof config === 'string') {\n      const maybeConfig = ProjectConfig.loadConfigFromFile(config);\n      if (maybeConfig == null) {\n        throw new Error(`Unable to load config from file: ${config}`);\n      }\n      this.config = maybeConfig;\n    } else {\n      this.config = new ProjectConfig(config);\n    }\n\n    logger.debug(`build config loaded:`, this.config);\n\n    this.analyzer = new BuildAnalyzer(this.config);\n  }\n\n  /**\n   * Returns a `Transform` stream that modifies the files that pass through it\n   * based on the dependency analysis done by the `analyzer` transform. It\n   * \"bundles\" a project by injecting its dependencies into the application\n   * fragments themselves, so that a minimum number of requests need to be made\n   * to load.\n   *\n   * (NOTE: The analyzer stream must be in the pipeline somewhere before this.)\n   */\n  bundler(options?: BuildBundlerOptions): BuildBundler {\n    return new BuildBundler(this.config, this.analyzer, options);\n  }\n\n  /**\n   * Returns the analyzer's stream of this project's source files - files\n   * matched by the project's `config.sources` value.\n   */\n  sources(): NodeJS.ReadableStream {\n    return this.analyzer.sources();\n  }\n\n  /**\n   * Returns the analyzer's stream of this project's dependency files - files\n   * loaded inside the analyzed project that are not considered source files.\n   */\n  dependencies(): NodeJS.ReadableStream {\n    let dependenciesStream: NodeJS.ReadableStream =\n        this.analyzer.dependencies();\n\n    // If we need to include additional dependencies, create a new vinyl\n    // source stream and pipe our default dependencyStream through it to\n    // combine.\n    if (this.config.extraDependencies.length > 0) {\n      const includeStream = vinylSrc(this.config.extraDependencies, {\n        cwdbase: true,\n        nodir: true,\n        passthrough: true,\n      });\n      dependenciesStream = dependenciesStream.pipe(includeStream);\n    }\n\n    return dependenciesStream;\n  }\n\n  /**\n   * Returns a stream transformer that injects 'prefetch' link tags into HTML\n   * documents based on the transitive dependencies of the document.\n   * For entrypoint documents without `<base>` tag, absolute urls are used in\n   * prefetch link hrefs.  In all other cases, link hrefs will be relative urls.\n   */\n  addPrefetchLinks(): NodeJS.ReadWriteStream {\n    return new AddPrefetchLinks(this.config);\n  }\n\n  /**\n   * Returns a stream transformer that adds a push manifest file to the set\n   * of all input files that pass through.\n   */\n  addPushManifest(outPath?: LocalFsPath, basePath?: PackageRelativeUrl):\n      NodeJS.ReadWriteStream {\n    return new AddPushManifest(this.config, outPath, basePath);\n  }\n\n  /**\n   * Returns a stream transformer that injects `custom-elements-es5-adapter.js`\n   * into the entry point HTML file. This adapter is needed when serving ES5\n   * to browsers that support the native Custom Elements API.\n   */\n  addCustomElementsEs5Adapter(): NodeJS.ReadWriteStream {\n    return new CustomElementsEs5AdapterInjector();\n  }\n\n  addBabelHelpersInEntrypoint(entrypoint: string = this.config.entrypoint):\n      NodeJS.ReadWriteStream {\n    return new BabelHelpersInjector(entrypoint);\n  }\n\n  /**\n   * Return a stream transformer that updates the `<base>` tag of the project's\n   * entrypoint HTML file with the given new value. No change is made if a\n   * `<base>` tag does not already exist.\n   */\n  updateBaseTag(baseHref: string): NodeJS.ReadWriteStream {\n    return new BaseTagUpdater(this.config.entrypoint as LocalFsPath, baseHref);\n  }\n}\n"]}