{"version":3,"sources":["../src/html-transform.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,4CAA4C;AAC5C,8CAA8C;AAC9C,iCAAiC;AAEjC,4CAA4C;AAC5C,mDAA6D;AAC7D,iDAA+D;AAE/D,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;AAE1B,MAAM,UAAU,GAAG,CAAC,CAAC,GAAG,CACpB,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,EACtB,CAAC,CAAC,EAAE,CACA,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EACxB,CAAC,CAAC,YAAY,CAAC,MAAM,EAAE,iBAAiB,CAAC,EACzC,CAAC,CAAC,YAAY,CAAC,MAAM,EAAE,wBAAwB,CAAC,EAChD,CAAC,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;AAE3C,MAAM,sBAAsB,GAAG,CAAC,CAAC,EAAE,CAC/B,UAAU,EACV,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,0BAA0B,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;AAyChF;;GAEG;AACH,uBACI,IAAY,EAAE,OAA6B;IAC7C,IAAI,OAAO,CAAC,EAAE,IAAI,OAAO,CAAC,EAAE,CAAC,gBAAgB,KAAK,MAAM;QACpD,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE;QACxB,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;KAC5E;IAED,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE;QAClC,YAAY,EAAE,IAAI;KACnB,CAAC,CAAC;IACH,eAAe,CAAC,QAAQ,CAAC,CAAC;IAC1B,MAAM,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;IAE5D,MAAM,4BAA4B,GAAG,OAAO,CAAC,EAAE;QAC3C,OAAO,CAAC,EAAE,CAAC,qBAAqB;QAChC,oEAAoE;QACpE,qEAAqE;QACrE,8DAA8D;QAC9D,sDAAsD;QACtD,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;IAEpE,IAAI,SAAS,EAAE,iBAAiB,CAAC;IACjC,IAAI,eAAe,GAAG,CAAC,CAAC;IAExB,KAAK,MAAM,MAAM,IAAI,UAAU,EAAE;QAC/B,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,QAAQ,CAAC;QAChE,IAAI,QAAQ,EAAE;YACZ,IAAI,iBAAiB,KAAK,SAAS,EAAE;gBACnC,iBAAiB,GAAG,MAAM,CAAC;aAC5B;YACD,IAAI,4BAA4B,EAAE;gBAChC,sBAAsB,CAAC,MAAM,EAAE,eAAe,EAAE,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;gBAC9D,SAAS,CAAE,yCAAyC;aACrD;SACF;QAED,MAAM,QAAQ,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACnD,IAAI,QAAQ,EAAE;YACZ,qEAAqE;YACrE,0CAA0C;YAC1C,MAAM,KAAK,GAAG,0BAAW,CACrB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,oBACvB,OAAO,CAAC,EAAE,IAAE,qBAAqB,EAAE,KAAK,IAAE,CAAC;YACnD,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SAEpC;aAAM,IAAI,SAAS,KAAK,SAAS,EAAE;YAClC,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC;YACnD,IAAI,GAAG,CAAC,QAAQ,CAAC,iCAAiC,CAAC;gBAC/C,GAAG,CAAC,QAAQ,CAAC,+BAA+B,CAAC,EAAE;gBACjD,SAAS,GAAG,MAAM,CAAC;aACpB;SACF;KACF;IAED,IAAI,OAAO,CAAC,eAAe,IAAI,4BAA4B;QACvD,iBAAiB,KAAK,SAAS,EAAE;QACnC,MAAM,QAAQ,GAAG,MAAM,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;QAC7D,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAW,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,YAAY,EAAE,CAAC,CAAC;QACxE,MAAM,eAAe,GAAG,QAAQ,CAAC,UAAW,CAAC,CAAC,CAAC,CAAC;QAEhD,2EAA2E;QAC3E,2EAA2E;QAC3E,4EAA4E;QAC5E,yCAAyC;QACzC,mEAAmE;QACnE,IAAI,CAAC,YAAY,CACb,iBAAiB,CAAC,UAAW,EAAE,iBAAiB,EAAE,QAAQ,CAAC,CAAC;QAEhE,IAAI,SAAS,KAAK,SAAS,EAAE;YAC3B,gBAAgB,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;SAC9C;KACF;IAED,MAAM,YAAY,GAAG,CAAC,EAAU,EAAE,EAAE;QAClC,MAAM,QAAQ,GAAG,MAAM,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;QAC7D,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAW,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAEjD,MAAM,yBAAyB,GAC3B,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAAC;QACjD,IAAI,yBAAyB,EAAE;YAC7B,IAAI,CAAC,YAAY,CACb,yBAAyB,CAAC,UAAW,EACrC,yBAAyB,EACzB,QAAQ,CAAC,CAAC;SAEf;aAAM;YACL,MAAM,cAAc,GAChB,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,QAAQ,CAAC;YACzE,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;SACvC;IACH,CAAC,CAAC;IAEF,IAAI,YAAY,CAAC;IACjB,QAAQ,OAAO,CAAC,kBAAkB,EAAE;QAClC,KAAK,SAAS,CAAC;QACf,KAAK,MAAM;YACT,MAAM;QACR,KAAK,MAAM;YACT,YAAY,GAAG,UAAU,CAAC,mBAAmB,EAAE,CAAC;YAChD,MAAM;QACR,KAAK,KAAK;YACR,YAAY,GAAG,UAAU,CAAC,kBAAkB,EAAE,CAAC;YAC/C,MAAM;QACR;YACE,MAAM,KAAK,GAAU,OAAO,CAAC,kBAAkB,CAAC;YAChD,MAAM,IAAI,KAAK,CAAC,qCAAqC,KAAK,EAAE,CAAC,CAAC;KACjE;IAED,IAAI,YAAY,KAAK,SAAS,EAAE;QAC9B,YAAY,CAAC,YAAY,CAAC,CAAC;KAC5B;IACD,IAAI,OAAO,CAAC,wBAAwB,KAAK,IAAI,EAAE;QAC7C,YAAY,CAAC,UAAU,CAAC,qBAAqB,EAAE,CAAC,CAAC;KAClD;IAED,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IAElC,IAAI,OAAO,CAAC,UAAU,EAAE;QACtB,IAAI,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE;YAC/B,kBAAkB,EAAE,IAAI;YACxB,cAAc,EAAE,IAAI;SACrB,CAAC,CAAC;KACJ;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AA7HD,sCA6HC;AAED,gCACI,MAAiB,EAAE,GAAW,EAAE,SAAuC;IACzE,8BAA8B;IAC9B,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAErC,IAAI,4CAA4B,CAAC,MAAM,CAAC,EAAE;QACxC,0EAA0E;QAC1E,gDAAgD;QAChD,OAAO;KACR;IAED,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACpD,IAAI,UAAU,EAAE;QACd,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC7C,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACpC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,GAAG,MAAM,CAAC,CAAC;KAEpD;SAAM;QACL,kEAAkE;QAClE,MAAM,KAAK,GAAG,0BAAW,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,oBAChD,SAAS,IACZ,qBAAqB,EAAE,IAAI,EAC3B,eAAe,EAAE,GAAG,IACpB,CAAC;QACH,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;KACpC;AACH,CAAC;AAED,0BAA0B,SAAoB,EAAE,eAA0B;IACxE,0EAA0E;IAC1E,2EAA2E;IAC3E,2EAA2E;IAC3E,6EAA6E;IAC7E,iEAAiE;IACjE,EAAE;IACF,0EAA0E;IAC1E,2EAA2E;IAC3E,yEAAyE;IACzE,6BAA6B;IAC7B,EAAE;IACF,2EAA2E;IAC3E,qEAAqE;IACrE,8CAA8C;IAC9C,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAW,EAAE,SAAS,EAAE,MAAM,CAAC,aAAa,CAAC;;;;;;;;;;;;;;;;;CAiB1E,CAAC,CAAC,CAAC;IAEF,uEAAuE;IACvE,yEAAyE;IACzE,8EAA8E;IAC9E,qEAAqE;IACrE,IAAI,CAAC,WAAW,CACZ,eAAe,CAAC,UAAW,EAAE,eAAe,EAAE,MAAM,CAAC,aAAa,CAAC;;;;;;;;;;;;;;;;;;;;CAoBxE,CAAC,CAAC,CAAC;AACJ,CAAC;AAED;;;;;;;;GAQG;AACH,yBAAyB,QAAmB;IAC1C,MAAM,QAAQ,GAAG,EAAE,CAAC;IACpB,MAAM,IAAI,GACN,CAAC,QAAQ,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,KAAK,MAAM,CAAC,CAAC;IAC1E,IAAI,IAAI,KAAK,SAAS,EAAE;QACtB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpB,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,UAAU,IAAI,EAAE,EAAE;YACzC,IAAI,KAAK,CAAC,OAAO,KAAK,MAAM,IAAI,KAAK,CAAC,OAAO,KAAK,MAAM,EAAE;gBACxD,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACtB;SACF;KACF;IACD,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;QAC9B,sDAAsD;QACtD,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;YACvB,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;SACtC;KACF;AACH,CAAC","file":"html-transform.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as dom5 from 'dom5/lib/index-next';\nimport * as htmlMinifier from 'html-minifier';\nimport * as parse5 from 'parse5';\n\nimport * as externalJs from './external-js';\nimport {scriptWasSplitByHtmlSplitter} from './html-splitter';\nimport {jsTransform, JsTransformOptions} from './js-transform';\n\nconst p = dom5.predicates;\n\nconst isJsScript = p.AND(\n    p.hasTagName('script'),\n    p.OR(\n        p.NOT(p.hasAttr('type')),\n        p.hasAttrValue('type', 'text/javascript'),\n        p.hasAttrValue('type', 'application/javascript'),\n        p.hasAttrValue('type', 'module')));\n\nconst isJsScriptOrHtmlImport = p.OR(\n    isJsScript,\n    p.AND(p.hasTagName('link'), p.hasSpaceSeparatedAttrValue('rel', 'import')));\n\n/**\n * Options for htmlTransform.\n */\nexport interface HtmlTransformOptions {\n  /**\n   * Transformations to apply to JavaScript within the HTML document.\n   */\n  js?: JsTransformOptions;\n\n  /**\n   * Whether to minify HTML.\n   */\n  minifyHtml?: boolean;\n\n  /**\n   * Whether and which Babel helpers to inject as an inline script. This is\n   * typically needed when this is the entry point HTML document and ES5\n   * compilation or AMD transform is enabled.\n   *\n   * If \"none\" (the default), no helpers are injected. If \"full\", includes the\n   * helpers needed for both ES5 compilation and the AMD transform. If \"amd\",\n   * includes only the helpers needed for the AMD transform.\n   */\n  injectBabelHelpers?: 'none'|'full'|'amd';\n\n  /**\n   * Whether to inject the regenerator runtime as an inline script. This is\n   * needed if you are compiling to ES5 and use async/await or generators.\n   */\n  injectRegeneratorRuntime?: boolean;\n\n  /**\n   * Whether to inject an AMD loader as an inline script. This is typically\n   * needed if ES to AMD module transformation is enabled and this is the entry\n   * point HTML document.\n   */\n  injectAmdLoader?: boolean;\n}\n\n/**\n * Transform some HTML according to the given options.\n */\nexport function htmlTransform(\n    html: string, options: HtmlTransformOptions): string {\n  if (options.js && options.js.moduleResolution === 'node' &&\n      !options.js.filePath) {\n    throw new Error('Cannot perform node module resolution without filePath.');\n  }\n\n  const document = parse5.parse(html, {\n    locationInfo: true,  // Required for removeFakeNodes.\n  });\n  removeFakeNodes(document);\n  const allScripts = [...dom5.queryAll(document, isJsScript)];\n\n  const shouldTransformEsModuleToAmd = options.js &&\n      options.js.transformModulesToAmd &&\n      // Assume that if this document has a nomodule script, the author is\n      // already handling browsers that don't support modules, and we don't\n      // need to transform them (even if the configuration was set).\n      // TODO(aomarks) Check this for HtmlSplitter case too.\n      !allScripts.some((node) => dom5.hasAttribute(node, 'nomodule'));\n\n  let wctScript, firstModuleScript;\n  let moduleScriptIdx = 0;\n\n  for (const script of allScripts) {\n    const isModule = dom5.getAttribute(script, 'type') === 'module';\n    if (isModule) {\n      if (firstModuleScript === undefined) {\n        firstModuleScript = script;\n      }\n      if (shouldTransformEsModuleToAmd) {\n        transformEsModuleToAmd(script, moduleScriptIdx++, options.js);\n        continue;  // Bypass the standard jsTransform below.\n      }\n    }\n\n    const isInline = !dom5.hasAttribute(script, 'src');\n    if (isInline) {\n      // Note that scripts split by HtmlSplitter are always external, so we\n      // don't have to check for that case here.\n      const newJs = jsTransform(\n          dom5.getTextContent(script),\n          {...options.js, transformModulesToAmd: false});\n      dom5.setTextContent(script, newJs);\n\n    } else if (wctScript === undefined) {\n      const src = dom5.getAttribute(script, 'src') || '';\n      if (src.includes('web-component-tester/browser.js') ||\n          src.includes('wct-browser-legacy/browser.js')) {\n        wctScript = script;\n      }\n    }\n  }\n\n  if (options.injectAmdLoader && shouldTransformEsModuleToAmd &&\n      firstModuleScript !== undefined) {\n    const fragment = parse5.parseFragment('<script></script>\\n');\n    dom5.setTextContent(fragment.childNodes![0], externalJs.getAmdLoader());\n    const amdLoaderScript = fragment.childNodes![0];\n\n    // Inject as late as possible (just before the first module is declared, if\n    // there is one) because there may be some UMD dependencies that we want to\n    // continue to load in global mode instead of AMD mode (which is detected by\n    // the presence of the `require` global).\n    // TODO(aomarks) If we don't define require, we can inject earlier.\n    dom5.insertBefore(\n        firstModuleScript.parentNode!, firstModuleScript, fragment);\n\n    if (wctScript !== undefined) {\n      addWctTimingHack(wctScript, amdLoaderScript);\n    }\n  }\n\n  const injectScript = (js: string) => {\n    const fragment = parse5.parseFragment('<script></script>\\n');\n    dom5.setTextContent(fragment.childNodes![0], js);\n\n    const firstJsScriptOrHtmlImport =\n        dom5.query(document, isJsScriptOrHtmlImport);\n    if (firstJsScriptOrHtmlImport) {\n      dom5.insertBefore(\n          firstJsScriptOrHtmlImport.parentNode!,\n          firstJsScriptOrHtmlImport,\n          fragment);\n\n    } else {\n      const headOrDocument =\n          dom5.query(document, dom5.predicates.hasTagName('head')) || document;\n      dom5.append(headOrDocument, fragment);\n    }\n  };\n\n  let babelHelpers;\n  switch (options.injectBabelHelpers) {\n    case undefined:\n    case 'none':\n      break;\n    case 'full':\n      babelHelpers = externalJs.getBabelHelpersFull();\n      break;\n    case 'amd':\n      babelHelpers = externalJs.getBabelHelpersAmd();\n      break;\n    default:\n      const never: never = options.injectBabelHelpers;\n      throw new Error(`Unknown injectBabelHelpers value: ${never}`);\n  }\n\n  if (babelHelpers !== undefined) {\n    injectScript(babelHelpers);\n  }\n  if (options.injectRegeneratorRuntime === true) {\n    injectScript(externalJs.getRegeneratorRuntime());\n  }\n\n  html = parse5.serialize(document);\n\n  if (options.minifyHtml) {\n    html = htmlMinifier.minify(html, {\n      collapseWhitespace: true,\n      removeComments: true,\n    });\n  }\n\n  return html;\n}\n\nfunction transformEsModuleToAmd(\n    script: dom5.Node, idx: number, jsOptions: JsTransformOptions|undefined) {\n  // We're not a module anymore.\n  dom5.removeAttribute(script, 'type');\n\n  if (scriptWasSplitByHtmlSplitter(script)) {\n    // Nothing else to do here. If we're using HtmlSplitter, the JsTransformer\n    // is responsible for doing this transformation.\n    return;\n  }\n\n  const isExternal = dom5.hasAttribute(script, 'src');\n  if (isExternal) {\n    const src = dom5.getAttribute(script, 'src');\n    dom5.removeAttribute(script, 'src');\n    dom5.setTextContent(script, `define(['${src}']);`);\n\n  } else {\n    // Transform inline scripts with the AMD Babel plugin transformer.\n    const newJs = jsTransform(dom5.getTextContent(script), {\n      ...jsOptions,\n      transformModulesToAmd: true,\n      moduleScriptIdx: idx,\n    });\n    dom5.setTextContent(script, newJs);\n  }\n}\n\nfunction addWctTimingHack(wctScript: dom5.Node, amdLoaderScript: dom5.Node) {\n  // This looks like a Web Component Tester script, and we have converted ES\n  // modules to AMD. Converting a module to AMD means that `DOMContentLoaded`\n  // will fire before the AMD loader resolves and executes the modules. Since\n  // WCT listens for `DOMContentLoaded`, this means test suites in modules will\n  // not have been registered by the time WCT starts running tests.\n  //\n  // To address this, we inject a block of JS that uses WCT's `waitFor` hook\n  // to defer running tests until our AMD modules have loaded. If WCT finds a\n  // `waitFor`, it passes it a callback that will run the tests, instead of\n  // running tests immediately.\n  //\n  // Note we must do this as late as possible, before the WCT script, because\n  // users may be setting their own `waitFor` that musn't clobber ours.\n  // Likewise we must call theirs if we find it.\n  dom5.insertBefore(wctScript.parentNode!, wctScript, parse5.parseFragment(`\n<script>\n  // Injected by polymer-build to defer WCT until all AMD modules are loaded.\n  (function() {\n    window.WCT = window.WCT || {};\n    var originalWaitFor = window.WCT.waitFor;\n    window.WCT.waitFor = function(cb) {\n      window._wctCallback = function() {\n        if (originalWaitFor) {\n          originalWaitFor(cb);\n        } else {\n          cb();\n        }\n      };\n    };\n  }());\n</script>\n`));\n\n  // Monkey patch `define` to keep track of loaded AMD modules. Note this\n  // assumes that all modules are registered before `DOMContentLoaded`, but\n  // that's an assumption WCT normally makes anyway. Do this right after the AMD\n  // loader is loaded, and hence before the first module is registered.\n  dom5.insertAfter(\n      amdLoaderScript.parentNode!, amdLoaderScript, parse5.parseFragment(`\n<script>\n  // Injected by polymer-build to defer WCT until all AMD modules are loaded.\n  (function() {\n    var originalDefine = window.define;\n    var moduleCount = 0;\n    window.define = function(deps, factory) {\n      moduleCount++;\n      originalDefine(deps, function() {\n        if (factory) {\n          factory.apply(undefined, arguments);\n        }\n        moduleCount--;\n        if (moduleCount === 0) {\n          window._wctCallback();\n        }\n      });\n    };\n  })();\n</script>\n`));\n}\n\n/**\n * parse5 will inject <html>, <head>, and <body> tags if they aren't already\n * there. Undo this so that we make fewer unnecessary transformations.\n *\n * Note that the given document must have been parsed with `locationInfo: true`,\n * or else this function will always remove these tags.\n *\n * TODO(aomarks) Move to dom5.\n */\nfunction removeFakeNodes(document: dom5.Node) {\n  const suspects = [];\n  const html =\n      (document.childNodes || []).find((child) => child.tagName === 'html');\n  if (html !== undefined) {\n    suspects.push(html);\n    for (const child of html.childNodes || []) {\n      if (child.tagName === 'head' || child.tagName === 'body') {\n        suspects.push(child);\n      }\n    }\n  }\n  for (const suspect of suspects) {\n    // No location means it wasn't in the original source.\n    if (!suspect.__location) {\n      dom5.removeNodeSaveChildren(suspect);\n    }\n  }\n}\n"]}