{"version":3,"sources":["../src/service-worker.ts"],"names":[],"mappings":"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","file":"service-worker.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/// <reference path=\"../custom_typings/sw-precache.d.ts\" />\n\nimport * as assert from 'assert';\nimport {writeFile} from 'fs';\nimport * as path from 'path';\nimport * as logging from 'plylog';\nimport {generate as swPrecacheGenerate, SWConfig} from 'sw-precache';\n\nimport {DepsIndex} from './analyzer';\nimport {LocalFsPath, posixifyPath, PosixPath} from './path-transformers';\nimport {PolymerProject} from './polymer-project';\n\nconst logger = logging.getLogger('polymer-build.service-worker');\n\nexport interface AddServiceWorkerOptions {\n  project: PolymerProject;\n  buildRoot: LocalFsPath;\n  bundled?: boolean;\n  path?: LocalFsPath;\n  swPrecacheConfig?: SWConfig|null;\n  basePath?: LocalFsPath;\n}\n\n/**\n * Given a user-provided AddServiceWorkerOptions object, check for deprecated\n * options. When one is found, warn the user and fix if possible.\n */\n// tslint:disable-next-line: no-any Turned off for user input.\nfunction fixDeprecatedOptions(options: any): AddServiceWorkerOptions {\n  if (typeof options.serviceWorkerPath !== 'undefined') {\n    logger.warn(\n        '\"serviceWorkerPath\" config option has been renamed to \"path\" and will no longer be supported in future versions');\n    options.path = options.path || options.serviceWorkerPath;\n  }\n  if (typeof options.swConfig !== 'undefined') {\n    logger.warn(\n        '\"swConfig\" config option has been renamed to \"swPrecacheConfig\" and will no longer be supported in future versions');\n    options.swPrecacheConfig = options.swPrecacheConfig || options.swConfig;\n  }\n  return options;\n}\n\n/**\n * Returns an array of file paths for the service worker to precache, based on\n * the information provided in the DepsIndex object.\n */\nfunction getPrecachedAssets(\n    depsIndex: DepsIndex, project: PolymerProject): string[] {\n  const precachedAssets = new Set<string>(project.config.allFragments);\n  precachedAssets.add(project.config.entrypoint);\n\n  for (const depImports of depsIndex.fragmentToFullDeps.values()) {\n    depImports.imports.forEach((s) => precachedAssets.add(s));\n    depImports.scripts.forEach((s) => precachedAssets.add(s));\n    depImports.styles.forEach((s) => precachedAssets.add(s));\n  }\n\n  return Array.from(precachedAssets);\n}\n\n/**\n * Returns an array of file paths for the service worker to precache for a\n * BUNDLED build, based on the information provided in the DepsIndex object.\n */\nfunction getBundledPrecachedAssets(project: PolymerProject) {\n  const precachedAssets = new Set<string>(project.config.allFragments);\n  precachedAssets.add(project.config.entrypoint);\n\n  return Array.from(precachedAssets);\n}\n\n// Matches URLs like \"/foo.png/bar\" but not \"/foo/bar.png\".\nexport const hasNoFileExtension = /\\/[^\\/\\.]*(\\?|$)/;\n\n/**\n * Returns a promise that resolves with a generated service worker\n * configuration.\n */\nexport async function generateServiceWorkerConfig(\n    options: AddServiceWorkerOptions): Promise<SWConfig> {\n  assert(!!options, '`project` & `buildRoot` options are required');\n  assert(!!options.project, '`project` option is required');\n  assert(!!options.buildRoot, '`buildRoot` option is required');\n  options = fixDeprecatedOptions(options);\n\n  options = Object.assign({}, options);\n  const project = options.project;\n  const buildRoot = options.buildRoot;\n  const swPrecacheConfig: SWConfig =\n      Object.assign({}, options.swPrecacheConfig);\n\n  const depsIndex = await project.analyzer.analyzeDependencies;\n  let staticFileGlobs = Array.from(swPrecacheConfig.staticFileGlobs || []);\n  const precachedAssets = (options.bundled) ?\n      getBundledPrecachedAssets(project) :\n      getPrecachedAssets(depsIndex, project);\n\n  staticFileGlobs = staticFileGlobs.concat(precachedAssets);\n  staticFileGlobs = staticFileGlobs.map((filePath: string) => {\n    if (filePath.startsWith(project.config.root)) {\n      filePath = filePath.substring(project.config.root.length);\n    }\n    return path.join(buildRoot, filePath);\n  });\n\n  if (swPrecacheConfig.navigateFallback === undefined) {\n    // Map all application routes to the entrypoint.\n    swPrecacheConfig.navigateFallback =\n        path.relative(project.config.root, project.config.entrypoint);\n  }\n\n  if (swPrecacheConfig.navigateFallbackWhitelist === undefined) {\n    // Don't fall back to the entrypoint if the URL looks like a static file.\n    // We want those to 404 instead, since they are probably missing assets,\n    // not application routes. Note it's important that this matches the\n    // behavior of prpl-server.\n    swPrecacheConfig.navigateFallbackWhitelist = [hasNoFileExtension];\n  }\n\n  if (swPrecacheConfig.directoryIndex === undefined) {\n    // By default, sw-precache maps any path ending with \"/\" to \"index.html\".\n    // This is a reasonable default for matching application routes, but 1) our\n    // entrypoint might not be called \"index.html\", and 2) this case is already\n    // handled by the navigateFallback configuration above. Simplest to just\n    // disable this feature.\n    swPrecacheConfig.directoryIndex = '';\n  }\n\n  // swPrecache will determine the right urls by stripping buildRoot.\n  // NOTE:(usergenic) sw-precache generate() apparently replaces the\n  // prefix on an already posixified version of the path on win32.\n  //\n  // We include a trailing slash in `stripPrefix` so that we remove leading\n  // slashes on the pre-cache asset URLs, hence producing relative URLs\n  // instead of absolute. We want relative URLs for builds mounted at non-root\n  // paths. Note that service worker fetches are relative to its own URL.\n  swPrecacheConfig.stripPrefix = addTrailingSlash(posixifyPath(buildRoot));\n\n  if (options.basePath) {\n    // TODO Drop this feature once CLI doesn't depend on it.\n    let replacePrefix = posixifyPath(options.basePath);\n    if (!replacePrefix.endsWith('/')) {\n      replacePrefix = replacePrefix + '/' as PosixPath;\n    }\n    if (swPrecacheConfig.replacePrefix) {\n      console.info(\n          `Replacing service worker configuration's ` +\n          `replacePrefix option (${swPrecacheConfig.replacePrefix}) ` +\n          `with the build configuration's basePath (${replacePrefix}).`);\n    }\n    swPrecacheConfig.replacePrefix = replacePrefix;\n  }\n\n  // static files will be pre-cached\n  swPrecacheConfig.staticFileGlobs = staticFileGlobs;\n\n  // Log service-worker helpful output at the debug log level\n  swPrecacheConfig.logger = swPrecacheConfig.logger || logger.debug;\n\n  return swPrecacheConfig;\n}\n\n/**\n * Returns a promise that resolves with a generated service worker (the file\n * contents), based off of the options provided.\n */\nexport async function generateServiceWorker(options: AddServiceWorkerOptions):\n    Promise<Buffer> {\n  const swPrecacheConfig = await generateServiceWorkerConfig(options);\n  return await<Promise<Buffer>>(new Promise((resolve, reject) => {\n    logger.debug(`writing service worker...`, swPrecacheConfig);\n    swPrecacheGenerate(\n        swPrecacheConfig, (err?: Error, fileContents?: string) => {\n          if (err || fileContents == null) {\n            reject(err || 'No file contents provided.');\n          } else {\n            resolve(new Buffer(fileContents));\n          }\n        });\n  }));\n}\n\n/**\n * Returns a promise that resolves when a service worker has been generated\n * and written to the build directory. This uses generateServiceWorker() to\n * generate a service worker, which it then writes to the file system based on\n * the buildRoot & path (if provided) options.\n */\nexport function addServiceWorker(options: AddServiceWorkerOptions):\n    Promise<void> {\n  return generateServiceWorker(options).then((fileContents: Buffer) => {\n    return new Promise<void>((resolve, reject) => {\n      const serviceWorkerPath =\n          path.join(options.buildRoot, options.path || 'service-worker.js');\n      writeFile(serviceWorkerPath, fileContents, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  });\n}\n\nfunction addTrailingSlash(s: string): string {\n  return s.endsWith('/') ? s : s + '/';\n}\n"]}