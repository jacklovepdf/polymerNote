{"version":3,"sources":["../src/analyzer.ts"],"names":[],"mappings":"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","file":"analyzer.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as path from 'path';\nimport * as logging from 'plylog';\nimport {Analyzer, FsUrlResolver, PackageRelativeUrl, ResolvedUrl, Severity, UrlLoader, Warning, WarningFilter, WarningPrinter} from 'polymer-analyzer';\nimport {ProjectConfig} from 'polymer-project-config';\nimport {PassThrough, Transform} from 'stream';\nimport {src as vinylSrc} from 'vinyl-fs';\n\nimport {LocalFsPath, pathFromUrl, urlFromPath} from './path-transformers';\nimport {AsyncTransformStream, VinylReaderTransform} from './streams';\n\nimport File = require('vinyl');\n\nconst logger = logging.getLogger('cli.build.analyzer');\n\nexport interface DocumentDeps {\n  imports: PackageRelativeUrl[];\n  scripts: PackageRelativeUrl[];\n  styles: PackageRelativeUrl[];\n}\n\nexport interface DepsIndex {\n  // An index of dependency -> fragments that depend on it\n  depsToFragments: Map<PackageRelativeUrl, PackageRelativeUrl[]>;\n  // TODO(garlicnation): Remove this map.\n  // An index of fragments -> html dependencies\n  fragmentToDeps: Map<PackageRelativeUrl, PackageRelativeUrl[]>;\n  // A map from frament urls to html, js, and css dependencies.\n  fragmentToFullDeps: Map<PackageRelativeUrl, DocumentDeps>;\n}\n\n/**\n * A stream that tells the BuildAnalyzer to resolve each file it sees. It's\n * important that files are resolved here in a seperate stream, so that analysis\n * and file loading/resolution can't block each other while waiting.\n */\nclass ResolveTransform extends AsyncTransformStream<File, File> {\n  private _buildAnalyzer: BuildAnalyzer;\n\n  constructor(buildAnalyzer: BuildAnalyzer) {\n    super({objectMode: true});\n    this._buildAnalyzer = buildAnalyzer;\n  }\n\n  protected async *\n      _transformIter(files: AsyncIterable<File>): AsyncIterable<File> {\n    for await (const file of files) {\n      this._buildAnalyzer.resolveFile(file);\n      yield file;\n    }\n  }\n}\n\n/**\n * A stream to analyze every file that passes through it. This is used to\n * analyze important application fragments as they pass through the source\n * stream.\n *\n * We create a new stream to handle this because the alternative (attaching\n * event listeners directly to the existing sources stream) would\n * start the flow of data before the user was ready to consume it. By\n * analyzing inside of the stream instead of via \"data\" event listeners, the\n * source stream will remain paused until the user is ready to start the stream\n * themselves.\n */\nclass AnalyzeTransform extends AsyncTransformStream<File, File> {\n  private _buildAnalyzer: BuildAnalyzer;\n\n  constructor(buildAnalyzer: BuildAnalyzer) {\n    // A high `highWaterMark` value is needed to keep this from pausing the\n    // entire source stream.\n    // TODO(fks) 02-02-2017: Move analysis out of the source stream itself so\n    // that it no longer blocks during analysis.\n    super({objectMode: true, highWaterMark: 10000});\n    this._buildAnalyzer = buildAnalyzer;\n  }\n\n  protected async *\n      _transformIter(files: AsyncIterable<File>): AsyncIterable<File> {\n    for await (const file of files) {\n      await this._buildAnalyzer.analyzeFile(file);\n      yield file;\n    }\n  }\n}\n\n\nexport class BuildAnalyzer {\n  config: ProjectConfig;\n  loader: StreamLoader;\n  analyzer: Analyzer;\n  started: boolean = false;\n  sourceFilesLoaded: boolean = false;\n\n  private _sourcesStream!: NodeJS.ReadableStream;\n  private _sourcesProcessingStream!: NodeJS.ReadWriteStream;\n  private _dependenciesStream!: Transform;\n  private _dependenciesProcessingStream!: NodeJS.ReadWriteStream;\n  private _warningsFilter: WarningFilter;\n\n  files = new Map<PackageRelativeUrl, File>();\n  warnings = new Set<Warning>();\n  allFragmentsToAnalyze: Set<LocalFsPath>;\n\n  analyzeDependencies: Promise<DepsIndex>;\n  _dependencyAnalysis: DepsIndex = {\n    depsToFragments: new Map(),\n    fragmentToDeps: new Map(),\n    fragmentToFullDeps: new Map()\n  };\n  _resolveDependencyAnalysis!: (index: DepsIndex) => void;\n\n  constructor(\n      config: ProjectConfig,\n      /** If null is given, we do not log warnings. */\n      private readonly streamToWarnTo: (NodeJS.WriteStream|\n                                        null) = process.stdout) {\n    this.config = config;\n\n    this.loader = new StreamLoader(this);\n    this.analyzer = new Analyzer({\n      urlLoader: this.loader,\n      // TODO(usergenic): Add option to polymer-build to propagate a protocol\n      // and host option to the FsUrlResolver.\n      urlResolver: new FsUrlResolver(config.root),\n\n      moduleResolution: config.moduleResolution === 'none' ?\n          undefined :\n          config.moduleResolution,\n    });\n\n    this.allFragmentsToAnalyze =\n        new Set(this.config.allFragments.map((f) => f as LocalFsPath));\n    this.analyzeDependencies = new Promise((resolve, _reject) => {\n      this._resolveDependencyAnalysis = resolve;\n    });\n\n    const lintOptions: Partial<typeof config.lint> = (this.config.lint || {});\n\n    const warningCodesToIgnore = new Set(lintOptions.ignoreWarnings || []);\n    // These are expected, as we never want to load remote URLs like\n    // `https://example.com/` when we're building\n    warningCodesToIgnore.add('not-loadable');\n    this._warningsFilter = new WarningFilter(\n        {warningCodesToIgnore, minimumSeverity: Severity.WARNING});\n  }\n\n  /**\n   * Start analysis by setting up the sources and dependencies analysis\n   * pipelines and starting the source stream. Files will not be loaded from\n   * disk until this is called. Can be called multiple times but will only run\n   * set up once.\n   */\n  startAnalysis(): void {\n    if (this.started) {\n      return;\n    }\n    this.started = true;\n\n    // Create the base streams for sources & dependencies to be read from.\n    this._dependenciesStream = new PassThrough({objectMode: true});\n    this._sourcesStream = vinylSrc(this.config.sources, {\n      cwdbase: true,\n      nodir: true,\n    });\n\n    // _sourcesProcessingStream: Pipe the sources stream through...\n    //   1. The resolver stream, to resolve each file loaded via the analyzer\n    //   2. The analyzer stream, to analyze app fragments for dependencies\n    this._sourcesProcessingStream =\n        this._sourcesStream\n            .on('error',\n                (err: Error) =>\n                    this._sourcesProcessingStream.emit('error', err))\n            .pipe(new ResolveTransform(this))\n            .on('error',\n                (err: Error) =>\n                    this._sourcesProcessingStream.emit('error', err))\n            .on('end', this.onSourcesStreamComplete.bind(this))\n            .pipe(new AnalyzeTransform(this));\n\n    // _dependenciesProcessingStream: Pipe the dependencies stream through...\n    //   1. The vinyl loading stream, to load file objects from file paths\n    //   2. The resolver stream, to resolve each loaded file for the analyzer\n    this._dependenciesProcessingStream =\n        this._dependenciesStream\n            .on('error',\n                (err: Error) =>\n                    this._dependenciesProcessingStream.emit('error', err))\n            .pipe(new VinylReaderTransform())\n            .on('error',\n                (err: Error) =>\n                    this._dependenciesProcessingStream.emit('error', err))\n            .pipe(new ResolveTransform(this));\n  }\n\n  /**\n   * Return _dependenciesOutputStream, which will contain fully loaded file\n   * objects for each dependency after analysis.\n   */\n  dependencies(): NodeJS.ReadableStream {\n    this.startAnalysis();\n    return this._dependenciesProcessingStream;\n  }\n\n  /**\n   * Return _sourcesOutputStream, which will contain fully loaded file\n   * objects for each source after analysis.\n   */\n  sources(): NodeJS.ReadableStream {\n    this.startAnalysis();\n    return this._sourcesProcessingStream;\n  }\n\n  /**\n   * Resolve a file in our loader so that the analyzer can read it.\n   */\n  resolveFile(file: File) {\n    const filePath = file.path as LocalFsPath;\n    this.addFile(file);\n    // If our resolver is waiting for this file, resolve its deferred loader\n    if (this.loader.hasDeferredFile(filePath)) {\n      this.loader.resolveDeferredFile(filePath, file);\n    }\n  }\n\n  /**\n   * Analyze a file to find additional dependencies to load. Currently we only\n   * get dependencies for application fragments. When all fragments are\n   * analyzed, we call _done() to signal that analysis is complete.\n   */\n  async analyzeFile(file: File): Promise<void> {\n    const filePath = file.path as LocalFsPath;\n\n    // If the file is a fragment, begin analysis on its dependencies\n    if (this.config.isFragment(filePath)) {\n      const deps = await this._getDependencies(this.analyzer.resolveUrl(\n          urlFromPath(this.config.root as LocalFsPath, filePath))!);\n      this._addDependencies(filePath, deps);\n      this.allFragmentsToAnalyze.delete(filePath);\n      // If there are no more fragments to analyze, we are done\n      if (this.allFragmentsToAnalyze.size === 0) {\n        this._done();\n      }\n    }\n  }\n\n  /**\n   * Perform some checks once we know that `_sourcesStream` is done loading.\n   */\n  private onSourcesStreamComplete() {\n    // Emit an error if there are missing source files still deferred. Otherwise\n    // this would cause the analyzer to hang.\n    for (const filePath of this.loader.deferredFiles.keys()) {\n      if (this.config.isSource(filePath)) {\n        const err = new Error(`Not found: ${filePath}`);\n        this.loader.rejectDeferredFile(filePath, err);\n      }\n    }\n\n    // Set sourceFilesLoaded so that future files aren't accidentally deferred\n    this.sourceFilesLoaded = true;\n  }\n\n  /**\n   * Helper function for emitting a general analysis error onto both file\n   * streams.\n   */\n  private emitAnalysisError(err: Error) {\n    this._sourcesProcessingStream.emit('error', err);\n    this._dependenciesProcessingStream.emit('error', err);\n  }\n\n  /**\n   * Called when analysis is complete and there are no more files to analyze.\n   * Checks for serious errors before resolving its dependency analysis and\n   * ending the dependency stream (which it controls).\n   */\n  private _done() {\n    this.printWarnings();\n    const allWarningCount = this.countWarningsByType();\n    const errorWarningCount = allWarningCount.get(Severity.ERROR)!;\n\n    // If any ERROR warnings occurred, propagate an error in each build stream.\n    if (errorWarningCount > 0) {\n      this.emitAnalysisError(\n          new Error(`${errorWarningCount} error(s) occurred during build.`));\n      return;\n    }\n\n    // If analysis somehow finished with files that still needed to be loaded,\n    // propagate an error in each build stream.\n    for (const filePath of this.loader.deferredFiles.keys()) {\n      const err = new Error(`Not found: ${filePath}`);\n      this.loader.rejectDeferredFile(filePath, err);\n      return;\n    }\n\n    // Resolve our dependency analysis promise now that we have seen all files\n    this._dependenciesStream.end();\n    this._resolveDependencyAnalysis(this._dependencyAnalysis);\n  }\n\n  getFile(filepath: LocalFsPath): File|undefined {\n    const url = urlFromPath(this.config.root as LocalFsPath, filepath);\n    return this.getFileByUrl(url as PackageRelativeUrl);\n  }\n\n  getFileByUrl(url: PackageRelativeUrl): File|undefined {\n    // TODO(usergenic): url carefulness bug, take an extra careful look at this.\n    if (url.startsWith('/')) {\n      url = url.substring(1) as PackageRelativeUrl;\n    }\n    return this.files.get(url);\n  }\n\n  /**\n   * A side-channel to add files to the loader that did not come through the\n   * stream transformation. This is for generated files, like\n   * shared-bundle.html. This should probably be refactored so that the files\n   * can be injected into the stream.\n   */\n  addFile(file: File): void {\n    logger.debug(`addFile: ${file.path}`);\n    // Badly-behaved upstream transformers (looking at you gulp-html-minifier)\n    // may use posix path separators on Windows.\n    const filepath = path.normalize(file.path) as LocalFsPath;\n    // Store only root-relative paths, in URL/posix format\n    this.files.set(\n        urlFromPath(this.config.root as LocalFsPath, filepath), file);\n  }\n\n  printWarnings(): void {\n    if (this.streamToWarnTo === null) {\n      return;\n    }\n    const warningPrinter = new WarningPrinter(this.streamToWarnTo);\n    warningPrinter.printWarnings(this.warnings);\n  }\n\n  private countWarningsByType(): Map<Severity, number> {\n    const errorCountMap = new Map<Severity, number>();\n    errorCountMap.set(Severity.INFO, 0);\n    errorCountMap.set(Severity.WARNING, 0);\n    errorCountMap.set(Severity.ERROR, 0);\n    for (const warning of this.warnings) {\n      errorCountMap.set(\n          warning.severity, errorCountMap.get(warning.severity)! + 1);\n    }\n    return errorCountMap;\n  }\n\n\n  /**\n   * Attempts to retreive document-order transitive dependencies for `url`.\n   */\n  async _getDependencies(url: ResolvedUrl): Promise<DocumentDeps> {\n    const analysis = await this.analyzer.analyze([url]);\n    const result = analysis.getDocument(url);\n\n    if (result.successful === false) {\n      const message = result.error && result.error.message || 'unknown';\n      throw new Error(`Unable to get document ${url}: ${message}`);\n    }\n\n    const doc = result.value;\n    doc.getWarnings({imported: true})\n        .filter((w) => !this._warningsFilter.shouldIgnore(w))\n        .forEach((w) => this.warnings.add(w));\n\n    const scripts = new Set<PackageRelativeUrl>();\n    const styles = new Set<PackageRelativeUrl>();\n    const imports = new Set<PackageRelativeUrl>();\n\n    const importFeatures = doc.getFeatures(\n        {kind: 'import', externalPackages: true, imported: true});\n    for (const importFeature of importFeatures) {\n      const importUrl = importFeature.url;\n      if (!this.analyzer.canLoad(importUrl)) {\n        logger.debug(`ignoring external dependency: ${importUrl}`);\n      } else if (importFeature.type === 'html-script') {\n        scripts.add(this.analyzer.urlResolver.relative(importUrl));\n      } else if (importFeature.type === 'html-style') {\n        styles.add(this.analyzer.urlResolver.relative(importUrl));\n      } else if (importFeature.type === 'html-import') {\n        imports.add(this.analyzer.urlResolver.relative(importUrl));\n      } else {\n        logger.debug(\n            `unexpected import type encountered: ${importFeature.type}`);\n      }\n    }\n\n    const deps = {\n      scripts: [...scripts],\n      styles: [...styles],\n      imports: [...imports],\n    };\n    logger.debug(`dependencies analyzed for: ${url}`, deps);\n    return deps;\n  }\n\n  _addDependencies(filePath: LocalFsPath, deps: DocumentDeps) {\n    // Make sure function is being called properly\n    if (!this.allFragmentsToAnalyze.has(filePath)) {\n      throw new Error(`Dependency analysis incorrectly called for ${filePath}`);\n    }\n\n    const relativeUrl = urlFromPath(this.config.root as LocalFsPath, filePath);\n    // Add dependencies to _dependencyAnalysis object, and push them through\n    // the dependency stream.\n    this._dependencyAnalysis.fragmentToFullDeps.set(relativeUrl, deps);\n    this._dependencyAnalysis.fragmentToDeps.set(relativeUrl, deps.imports);\n    deps.imports.forEach((url) => {\n      const entrypointList = this._dependencyAnalysis.depsToFragments.get(url);\n      if (entrypointList) {\n        entrypointList.push(relativeUrl);\n      } else {\n        this._dependencyAnalysis.depsToFragments.set(url, [relativeUrl]);\n      }\n    });\n  }\n\n  /**\n   * Check that the source stream has not already completed loading by the\n   * time\n   * this file was analyzed.\n   */\n  sourcePathAnalyzed(filePath: LocalFsPath): void {\n    // If we've analyzed a new path to a source file after the sources\n    // stream has completed, we can assume that that file does not\n    // exist. Reject with a \"Not Found\" error.\n    if (this.sourceFilesLoaded) {\n      throw new Error(`Not found: \"${filePath}\"`);\n    }\n    // Source files are loaded automatically through the vinyl source\n    // stream. If it hasn't been seen yet, defer resolving until it has\n    // been loaded by vinyl.\n    logger.debug('dependency is a source file, ignoring...', {dep: filePath});\n  }\n\n  /**\n   * Push the given filepath into the dependencies stream for loading.\n   * Each dependency is only pushed through once to avoid duplicates.\n   */\n  dependencyPathAnalyzed(filePath: LocalFsPath): void {\n    if (this.getFile(filePath)) {\n      logger.debug(\n          'dependency has already been pushed, ignoring...', {dep: filePath});\n      return;\n    }\n\n    logger.debug(\n        'new dependency analyzed, pushing into dependency stream...', filePath);\n    this._dependenciesStream.push(filePath);\n  }\n}\n\nexport type ResolveFileCallback = (a: string) => void;\nexport type RejectFileCallback = (err: Error) => void;\nexport type DeferredFileCallbacks = {\n  resolve: ResolveFileCallback; reject: RejectFileCallback;\n};\n\nexport class StreamLoader implements UrlLoader {\n  config: ProjectConfig;\n  private _buildAnalyzer: BuildAnalyzer;\n\n  // Store files that have not yet entered the Analyzer stream here.\n  // Later, when the file is seen, the DeferredFileCallback can be\n  // called with the file contents to resolve its loading.\n  deferredFiles = new Map<LocalFsPath, DeferredFileCallbacks>();\n\n  constructor(buildAnalyzer: BuildAnalyzer) {\n    this._buildAnalyzer = buildAnalyzer;\n    this.config = this._buildAnalyzer.config;\n  }\n\n  hasDeferredFile(filePath: LocalFsPath): boolean {\n    return this.deferredFiles.has(filePath);\n  }\n\n  hasDeferredFiles(): boolean {\n    return this.deferredFiles.size > 0;\n  }\n\n  resolveDeferredFile(filePath: LocalFsPath, file: File): void {\n    const deferredCallbacks = this.deferredFiles.get(filePath);\n    if (deferredCallbacks == null) {\n      throw new Error(\n          `Internal error: could not get deferredCallbacks for ${filePath}`);\n    }\n    deferredCallbacks.resolve(file.contents!.toString());\n    this.deferredFiles.delete(filePath);\n  }\n\n  rejectDeferredFile(filePath: LocalFsPath, err: Error): void {\n    const deferredCallbacks = this.deferredFiles.get(filePath);\n    if (deferredCallbacks == null) {\n      throw new Error(\n          `Internal error: could not get deferredCallbacks for ${filePath}`);\n    }\n    deferredCallbacks.reject(err);\n    this.deferredFiles.delete(filePath);\n  }\n\n  // We can't load external dependencies.\n  canLoad(url: ResolvedUrl): boolean {\n    return url.startsWith('file:///');\n  }\n\n  async load(url: ResolvedUrl): Promise<string> {\n    logger.debug(`loading: ${url}`);\n    if (!this.canLoad(url)) {\n      throw new Error('Unable to load ${url}.');\n    }\n\n    const urlPath = this._buildAnalyzer.analyzer.urlResolver.relative(url);\n    const filePath = pathFromUrl(this.config.root as LocalFsPath, urlPath);\n    const file = this._buildAnalyzer.getFile(filePath);\n\n    if (file) {\n      return file.contents!.toString();\n    }\n\n    return new Promise(\n        (resolve: ResolveFileCallback, reject: RejectFileCallback) => {\n          this.deferredFiles.set(filePath, {resolve, reject});\n          try {\n            if (this.config.isSource(filePath)) {\n              this._buildAnalyzer.sourcePathAnalyzed(filePath);\n            } else {\n              this._buildAnalyzer.dependencyPathAnalyzed(filePath);\n            }\n          } catch (err) {\n            this.rejectDeferredFile(filePath, err);\n          }\n        });\n  }\n}\n"]}