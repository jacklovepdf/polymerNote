{"version":3,"sources":["../src/babel-plugin-import-meta.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,gFAAgE;AAChE,8CAAuC;AAIvC,MAAM,GAAG,GAAG,kBAAQ,CAAC,GAAG,CAAC;AAEzB;;;;;;;;;GASG;AACU,QAAA,iBAAiB,GAAG;IAC/B,QAAQ,EAAE,mCAAgB;IAE1B,OAAO,EAAE;QACP,OAAO,CAAC,IAAuB;YAC7B,MAAM,KAAK,GAA6B,EAAE,CAAC;YAC3C,MAAM,WAAW,GAAG,IAAI,GAAG,EAAU,CAAC;YAEtC,IAAI,CAAC,QAAQ,CAAC;gBACZ,YAAY,CAAC,IAA4B;oBACvC,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;oBACvB,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ;wBACxC,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,MAAM,EAAE;wBACjC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACjB,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,EAAE;4BAC3D,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;yBACvB;qBACF;gBACH,CAAC;aACF,CAAC,CAAC;YAEH,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBACtB,OAAO;aACR;YAED,IAAI,MAAM,GAAG,MAAM,CAAC;YACpB,OAAO,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBAC9B,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;aACxD;YAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAA,eAAe,MAAM,eAAe,CAAC,CAAC;YAChE,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACxB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAA,GAAG,MAAM,EAAE,CAAC,CAAC;aAClC;QACH,CAAC;KACF;CACF,CAAC","file":"babel-plugin-import-meta.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport importMetaSyntax from '@babel/plugin-syntax-import-meta';\nimport template from '@babel/template';\nimport {NodePath} from '@babel/traverse';\nimport {Program, MetaProperty} from '@babel/types';\n\nconst ast = template.ast;\n\n/**\n * Rewrites `import.meta`[1] into an import for a module named \"meta\". It is\n * expected this plugin runs alongside @babel/plugin-transform-modules-amd which\n * will transform this import into an AMD dependency, and is loaded using\n * @polymer/esm-amd-loader which will provide an object with a `url`[2] property\n * for the \"meta\" dependency.\n *\n * [1]: https://github.com/tc39/proposal-import-meta\n * [2]: https://html.spec.whatwg.org/#hostgetimportmetaproperties\n */\nexport const rewriteImportMeta = {\n  inherits: importMetaSyntax,\n\n  visitor: {\n    Program(path: NodePath<Program>) {\n      const metas: NodePath<MetaProperty>[] = [];\n      const identifiers = new Set<string>();\n\n      path.traverse({\n        MetaProperty(path: NodePath<MetaProperty>) {\n          const node = path.node;\n          if (node.meta && node.meta.name === 'import' &&\n              node.property.name === 'meta') {\n            metas.push(path);\n            for (const name of Object.keys(path.scope.getAllBindings())) {\n              identifiers.add(name);\n            }\n          }\n        }\n      });\n\n      if (metas.length === 0) {\n        return;\n      }\n\n      let metaId = 'meta';\n      while (identifiers.has(metaId)) {\n        metaId = path.scope.generateUidIdentifier('meta').name;\n      }\n\n      path.node.body.unshift(ast`import * as ${metaId} from 'meta';`);\n      for (const meta of metas) {\n        meta.replaceWith(ast`${metaId}`);\n      }\n    },\n  }\n};\n"]}